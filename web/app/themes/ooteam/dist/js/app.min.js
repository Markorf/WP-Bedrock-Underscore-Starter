/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/*! exports provided: increaseCount, SimpleCounter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"increaseCount\", function() { return increaseCount; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SimpleCounter\", function() { return SimpleCounter; });\n/* harmony import */ var hybrids__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hybrids */ \"./node_modules/hybrids/esm/index.js\");\n/* harmony import */ var _modules_pages_about__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/pages/about */ \"./assets/js/modules/pages/about.js\");\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    <style>\\n      button {\\n        background-color: orange;\\n        color: white;\\n      }\\n    </style>\\n    <button onclick=\\\"\", \"\\\">Count: \", \"</button>\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\nfunction increaseCount(host) {\n  // eslint-disable-next-line no-param-reassign\n  host.count += 1;\n}\nvar SimpleCounter = {\n  count: 0,\n  render: function render(_ref) {\n    var count = _ref.count;\n    return Object(hybrids__WEBPACK_IMPORTED_MODULE_0__[\"html\"])(_templateObject(), increaseCount, count);\n  }\n};\nObject(hybrids__WEBPACK_IMPORTED_MODULE_0__[\"define\"])('simple-counter', SimpleCounter);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvYXBwLmpzPzllMGUiXSwibmFtZXMiOlsiaW5jcmVhc2VDb3VudCIsImhvc3QiLCJjb3VudCIsIlNpbXBsZUNvdW50ZXIiLCJyZW5kZXIiLCJodG1sIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFTyxTQUFTQSxhQUFULENBQXVCQyxJQUF2QixFQUE2QjtBQUNsQztBQUNBQSxNQUFJLENBQUNDLEtBQUwsSUFBYyxDQUFkO0FBQ0Q7QUFFTSxJQUFNQyxhQUFhLEdBQUc7QUFDM0JELE9BQUssRUFBRSxDQURvQjtBQUUzQkUsUUFBTSxFQUFFO0FBQUEsUUFBR0YsS0FBSCxRQUFHQSxLQUFIO0FBQUEsV0FBZUcsb0RBQWYsb0JBT2FMLGFBUGIsRUFPc0NFLEtBUHRDO0FBQUE7QUFGbUIsQ0FBdEI7QUFhUEksc0RBQU0sQ0FBQyxnQkFBRCxFQUFtQkgsYUFBbkIsQ0FBTiIsImZpbGUiOiIuL2Fzc2V0cy9qcy9hcHAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBodG1sLCBkZWZpbmUgfSBmcm9tICdoeWJyaWRzJztcclxuaW1wb3J0ICcuL21vZHVsZXMvcGFnZXMvYWJvdXQnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluY3JlYXNlQ291bnQoaG9zdCkge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gIGhvc3QuY291bnQgKz0gMTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNpbXBsZUNvdW50ZXIgPSB7XHJcbiAgY291bnQ6IDAsXHJcbiAgcmVuZGVyOiAoeyBjb3VudCB9KSA9PiBodG1sYFxyXG4gICAgPHN0eWxlPlxyXG4gICAgICBidXR0b24ge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IG9yYW5nZTtcclxuICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgIH1cclxuICAgIDwvc3R5bGU+XHJcbiAgICA8YnV0dG9uIG9uY2xpY2s9XCIke2luY3JlYXNlQ291bnR9XCI+Q291bnQ6ICR7Y291bnR9PC9idXR0b24+XHJcbiAgYCxcclxufTtcclxuXHJcbmRlZmluZSgnc2ltcGxlLWNvdW50ZXInLCBTaW1wbGVDb3VudGVyKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/app.js\n");

/***/ }),

/***/ "./assets/js/modules/pages/about.js":
/*!******************************************!*\
  !*** ./assets/js/modules/pages/about.js ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _shared_helpers_MiscHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/helpers/MiscHelpers */ \"./assets/js/modules/shared/helpers/MiscHelpers.js\");\n\n\nif (Object(_shared_helpers_MiscHelpers__WEBPACK_IMPORTED_MODULE_0__[\"isPage\"])('about')) {\n  console.log('about page 123');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbW9kdWxlcy9wYWdlcy9hYm91dC5qcz84N2VjIl0sIm5hbWVzIjpbImlzUGFnZSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQSxJQUFJQSwwRUFBTSxDQUFDLE9BQUQsQ0FBVixFQUFxQjtBQUNuQkMsU0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQVo7QUFDRCIsImZpbGUiOiIuL2Fzc2V0cy9qcy9tb2R1bGVzL3BhZ2VzL2Fib3V0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQYWdlIH0gZnJvbSAnLi4vc2hhcmVkL2hlbHBlcnMvTWlzY0hlbHBlcnMnO1xuXG5pZiAoaXNQYWdlKCdhYm91dCcpKSB7XG4gIGNvbnNvbGUubG9nKCdhYm91dCBwYWdlIDEyMycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/modules/pages/about.js\n");

/***/ }),

/***/ "./assets/js/modules/shared/helpers/MiscHelpers.js":
/*!*********************************************************!*\
  !*** ./assets/js/modules/shared/helpers/MiscHelpers.js ***!
  \*********************************************************/
/*! exports provided: isPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isPage\", function() { return isPage; });\nvar isPage = function isPage(pageName) {\n  return document.body.classList.contains(\"page-\".concat(pageName));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbW9kdWxlcy9zaGFyZWQvaGVscGVycy9NaXNjSGVscGVycy5qcz83Mjk3Il0sIm5hbWVzIjpbImlzUGFnZSIsInBhZ2VOYW1lIiwiZG9jdW1lbnQiLCJib2R5IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBTyxJQUFNQSxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFDQyxRQUFEO0FBQUEsU0FDcEJDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxTQUFkLENBQXdCQyxRQUF4QixnQkFBeUNKLFFBQXpDLEVBRG9CO0FBQUEsQ0FBZiIsImZpbGUiOiIuL2Fzc2V0cy9qcy9tb2R1bGVzL3NoYXJlZC9oZWxwZXJzL01pc2NIZWxwZXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzUGFnZSA9IChwYWdlTmFtZSkgPT5cclxuICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhgcGFnZS0ke3BhZ2VOYW1lfWApO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/modules/shared/helpers/MiscHelpers.js\n");

/***/ }),

/***/ "./assets/scss/extras/woocommerce.scss":
/*!*********************************************!*\
  !*** ./assets/scss/extras/woocommerce.scss ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc2Nzcy9leHRyYXMvd29vY29tbWVyY2Uuc2Nzcz9lODJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vYXNzZXRzL3Njc3MvZXh0cmFzL3dvb2NvbW1lcmNlLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/scss/extras/woocommerce.scss\n");

/***/ }),

/***/ "./assets/scss/style.scss":
/*!********************************!*\
  !*** ./assets/scss/style.scss ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc2Nzcy9zdHlsZS5zY3NzPzBlNzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9hc3NldHMvc2Nzcy9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/scss/style.scss\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/cache.js":
/*!*******************************************!*\
  !*** ./node_modules/hybrids/esm/cache.js ***!
  \*******************************************/
/*! exports provided: getEntry, getEntries, get, set, invalidate, invalidateAll, observe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEntry\", function() { return getEntry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEntries\", function() { return getEntries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invalidate\", function() { return invalidate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invalidateAll\", function() { return invalidateAll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"observe\", function() { return observe; });\n/* harmony import */ var _emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emitter.js */ \"./node_modules/hybrids/esm/emitter.js\");\n\nvar entries = new WeakMap();\nfunction getEntry(target, key) {\n  var targetMap = entries.get(target);\n\n  if (!targetMap) {\n    targetMap = new Map();\n    entries.set(target, targetMap);\n  }\n\n  var entry = targetMap.get(key);\n\n  if (!entry) {\n    entry = {\n      target: target,\n      key: key,\n      value: undefined,\n      contexts: undefined,\n      deps: undefined,\n      state: 0,\n      checksum: 0,\n      observed: false\n    };\n    targetMap.set(key, entry);\n  }\n\n  return entry;\n}\nfunction getEntries(target) {\n  var result = [];\n  var targetMap = entries.get(target);\n\n  if (targetMap) {\n    targetMap.forEach(function (entry) {\n      result.push(entry);\n    });\n  }\n\n  return result;\n}\n\nfunction calculateChecksum(entry) {\n  var checksum = entry.state;\n\n  if (entry.deps) {\n    entry.deps.forEach(function (depEntry) {\n      checksum += depEntry.state;\n    });\n  }\n\n  return checksum;\n}\n\nfunction dispatchDeep(entry) {\n  if (entry.observed) _emitter_js__WEBPACK_IMPORTED_MODULE_0__[\"dispatch\"](entry);\n  if (entry.contexts) entry.contexts.forEach(dispatchDeep);\n}\n\nfunction restoreDeepDeps(entry, deps) {\n  if (deps) {\n    deps.forEach(function (depEntry) {\n      entry.deps.add(depEntry);\n\n      if (entry.observed) {\n        /* istanbul ignore if */\n        if (!depEntry.contexts) depEntry.contexts = new Set();\n        depEntry.contexts.add(entry);\n      }\n\n      restoreDeepDeps(entry, depEntry.deps);\n    });\n  }\n}\n\nvar contextStack = new Set();\nfunction get(target, key, getter, validate) {\n  var entry = getEntry(target, key);\n\n  if (contextStack.size && contextStack.has(entry)) {\n    throw Error(\"Circular get invocation is forbidden: '\".concat(key, \"'\"));\n  }\n\n  contextStack.forEach(function (context) {\n    if (!context.deps) context.deps = new Set();\n    context.deps.add(entry);\n\n    if (context.observed) {\n      if (!entry.contexts) entry.contexts = new Set();\n      entry.contexts.add(context);\n    }\n  });\n\n  if ((validate && validate(entry.value) || !validate) && entry.checksum && entry.checksum === calculateChecksum(entry)) {\n    return entry.value;\n  }\n\n  try {\n    contextStack.add(entry);\n\n    if (entry.observed && entry.deps && entry.deps.size) {\n      entry.deps.forEach(function (depEntry) {\n        /* istanbul ignore else */\n        if (depEntry.contexts) depEntry.contexts.delete(entry);\n      });\n    }\n\n    entry.deps = undefined;\n    var nextValue = getter(target, entry.value);\n\n    if (entry.deps) {\n      entry.deps.forEach(function (depEntry) {\n        restoreDeepDeps(entry, depEntry.deps);\n      });\n    }\n\n    if (nextValue !== entry.value) {\n      entry.state += 1;\n      entry.value = nextValue;\n      dispatchDeep(entry);\n    }\n\n    entry.checksum = calculateChecksum(entry);\n    contextStack.delete(entry);\n  } catch (e) {\n    entry.checksum = 0;\n    contextStack.delete(entry);\n    contextStack.forEach(function (context) {\n      context.deps.delete(entry);\n      if (context.observed) entry.contexts.delete(context);\n    });\n    throw e;\n  }\n\n  return entry.value;\n}\nfunction set(target, key, setter, value) {\n  var entry = getEntry(target, key);\n  var newValue = setter(target, value, entry.value);\n\n  if (newValue !== entry.value) {\n    entry.checksum = 0;\n    entry.state += 1;\n    entry.value = newValue;\n    dispatchDeep(entry);\n  }\n}\nvar gcList = new Set();\n\nfunction deleteEntry(entry) {\n  if (!gcList.size) {\n    requestAnimationFrame(function () {\n      gcList.forEach(function (e) {\n        if (!e.contexts || e.contexts && e.contexts.size === 0) {\n          var targetMap = entries.get(e.target);\n          targetMap.delete(e.key);\n        }\n      });\n      gcList.clear();\n    });\n  }\n\n  gcList.add(entry);\n}\n\nfunction invalidateEntry(entry, clearValue, deleteValue) {\n  entry.checksum = 0;\n  entry.state += 1;\n  dispatchDeep(entry);\n  if (deleteValue) deleteEntry(entry);\n\n  if (clearValue) {\n    entry.value = undefined;\n  }\n}\n\nfunction invalidate(target, key, clearValue, deleteValue) {\n  if (contextStack.size) {\n    throw Error(\"Invalidating property in chain of get calls is forbidden: '\".concat(key, \"'\"));\n  }\n\n  var entry = getEntry(target, key);\n  invalidateEntry(entry, clearValue, deleteValue);\n}\nfunction invalidateAll(target, clearValue, deleteValue) {\n  if (contextStack.size) {\n    throw Error(\"Invalidating all properties in chain of get calls is forbidden\");\n  }\n\n  var targetMap = entries.get(target);\n\n  if (targetMap) {\n    targetMap.forEach(function (entry) {\n      invalidateEntry(entry, clearValue, deleteValue);\n    });\n  }\n}\nfunction observe(target, key, getter, fn) {\n  var entry = getEntry(target, key);\n  entry.observed = true;\n  var lastValue;\n  var unsubscribe = _emitter_js__WEBPACK_IMPORTED_MODULE_0__[\"subscribe\"](entry, function () {\n    var value = get(target, key, getter);\n\n    if (value !== lastValue) {\n      fn(target, value, lastValue);\n      lastValue = value;\n    }\n  });\n\n  if (entry.deps) {\n    entry.deps.forEach(function (depEntry) {\n      /* istanbul ignore else */\n      if (!depEntry.contexts) depEntry.contexts = new Set();\n      depEntry.contexts.add(entry);\n    });\n  }\n\n  return function unobserve() {\n    unsubscribe();\n    entry.observed = false;\n\n    if (entry.deps && entry.deps.size) {\n      entry.deps.forEach(function (depEntry) {\n        /* istanbul ignore else */\n        if (depEntry.contexts) depEntry.contexts.delete(entry);\n      });\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/cache.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/children.js":
/*!**********************************************!*\
  !*** ./node_modules/hybrids/esm/children.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return children; });\nfunction walk(node, fn, options) {\n  var items = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  Array.from(node.children).forEach(function (child) {\n    var hybrids = child.constructor.hybrids;\n\n    if (hybrids && fn(hybrids)) {\n      items.push(child);\n\n      if (options.deep && options.nested) {\n        walk(child, fn, options, items);\n      }\n    } else if (options.deep) {\n      walk(child, fn, options, items);\n    }\n  });\n  return items;\n}\n\nfunction children(hybridsOrFn) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    deep: false,\n    nested: false\n  };\n  var fn = typeof hybridsOrFn === \"function\" ? hybridsOrFn : function (hybrids) {\n    return hybrids === hybridsOrFn;\n  };\n  return {\n    get: function get(host) {\n      return walk(host, fn, options);\n    },\n    connect: function connect(host, key, invalidate) {\n      var observer = new MutationObserver(invalidate);\n      observer.observe(host, {\n        childList: true,\n        subtree: !!options.deep\n      });\n      return function () {\n        observer.disconnect();\n      };\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGlsZHJlbi5qcyJdLCJuYW1lcyI6WyJ3YWxrIiwibm9kZSIsImZuIiwib3B0aW9ucyIsIml0ZW1zIiwiQXJyYXkiLCJmcm9tIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGQiLCJoeWJyaWRzIiwiY29uc3RydWN0b3IiLCJwdXNoIiwiZGVlcCIsIm5lc3RlZCIsImh5YnJpZHNPckZuIiwiZ2V0IiwiaG9zdCIsImNvbm5lY3QiLCJrZXkiLCJpbnZhbGlkYXRlIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJkaXNjb25uZWN0Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxJQUFULENBQWNDLElBQWQsRUFBb0JDLEVBQXBCLEVBQXdCQyxPQUF4QixFQUE2QztBQUFBLE1BQVpDLEtBQVksdUVBQUosRUFBSTtBQUMzQ0MsRUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVdMLElBQUksQ0FBQ00sUUFBaEIsRUFBMEJDLE9BQTFCLENBQWtDLFVBQUFDLEtBQUssRUFBSTtBQUN6QyxRQUFNQyxPQUFPLEdBQUdELEtBQUssQ0FBQ0UsV0FBTixDQUFrQkQsT0FBbEM7O0FBQ0EsUUFBSUEsT0FBTyxJQUFJUixFQUFFLENBQUNRLE9BQUQsQ0FBakIsRUFBNEI7QUFDMUJOLE1BQUFBLEtBQUssQ0FBQ1EsSUFBTixDQUFXSCxLQUFYOztBQUNBLFVBQUlOLE9BQU8sQ0FBQ1UsSUFBUixJQUFnQlYsT0FBTyxDQUFDVyxNQUE1QixFQUFvQztBQUNsQ2QsUUFBQUEsSUFBSSxDQUFDUyxLQUFELEVBQVFQLEVBQVIsRUFBWUMsT0FBWixFQUFxQkMsS0FBckIsQ0FBSjtBQUNEO0FBQ0YsS0FMRCxNQUtPLElBQUlELE9BQU8sQ0FBQ1UsSUFBWixFQUFrQjtBQUN2QmIsTUFBQUEsSUFBSSxDQUFDUyxLQUFELEVBQVFQLEVBQVIsRUFBWUMsT0FBWixFQUFxQkMsS0FBckIsQ0FBSjtBQUNEO0FBQ0YsR0FWRDtBQVlBLFNBQU9BLEtBQVA7QUFDRDs7QUFFRCxlQUFlLFNBQVNHLFFBQVQsQ0FDYlEsV0FEYSxFQUdiO0FBQUEsTUFEQVosT0FDQSx1RUFEVTtBQUFFVSxJQUFBQSxJQUFJLEVBQUUsS0FBUjtBQUFlQyxJQUFBQSxNQUFNLEVBQUU7QUFBdkIsR0FDVjtBQUNBLE1BQU1aLEVBQUUsR0FDTixPQUFPYSxXQUFQLEtBQXVCLFVBQXZCLEdBQ0lBLFdBREosR0FFSSxVQUFBTCxPQUFPO0FBQUEsV0FBSUEsT0FBTyxLQUFLSyxXQUFoQjtBQUFBLEdBSGI7QUFJQSxTQUFPO0FBQ0xDLElBQUFBLEdBREssZUFDREMsSUFEQyxFQUNLO0FBQ1IsYUFBT2pCLElBQUksQ0FBQ2lCLElBQUQsRUFBT2YsRUFBUCxFQUFXQyxPQUFYLENBQVg7QUFDRCxLQUhJO0FBSUxlLElBQUFBLE9BSkssbUJBSUdELElBSkgsRUFJU0UsR0FKVCxFQUljQyxVQUpkLEVBSTBCO0FBQzdCLFVBQU1DLFFBQVEsR0FBRyxJQUFJQyxnQkFBSixDQUFxQkYsVUFBckIsQ0FBakI7QUFFQUMsTUFBQUEsUUFBUSxDQUFDRSxPQUFULENBQWlCTixJQUFqQixFQUF1QjtBQUNyQk8sUUFBQUEsU0FBUyxFQUFFLElBRFU7QUFFckJDLFFBQUFBLE9BQU8sRUFBRSxDQUFDLENBQUN0QixPQUFPLENBQUNVO0FBRkUsT0FBdkI7QUFLQSxhQUFPLFlBQU07QUFDWFEsUUFBQUEsUUFBUSxDQUFDSyxVQUFUO0FBQ0QsT0FGRDtBQUdEO0FBZkksR0FBUDtBQWlCRCIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdhbGsobm9kZSwgZm4sIG9wdGlvbnMsIGl0ZW1zID0gW10pIHtcbiAgQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICBjb25zdCBoeWJyaWRzID0gY2hpbGQuY29uc3RydWN0b3IuaHlicmlkcztcbiAgICBpZiAoaHlicmlkcyAmJiBmbihoeWJyaWRzKSkge1xuICAgICAgaXRlbXMucHVzaChjaGlsZCk7XG4gICAgICBpZiAob3B0aW9ucy5kZWVwICYmIG9wdGlvbnMubmVzdGVkKSB7XG4gICAgICAgIHdhbGsoY2hpbGQsIGZuLCBvcHRpb25zLCBpdGVtcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRlZXApIHtcbiAgICAgIHdhbGsoY2hpbGQsIGZuLCBvcHRpb25zLCBpdGVtcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaXRlbXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoaWxkcmVuKFxuICBoeWJyaWRzT3JGbixcbiAgb3B0aW9ucyA9IHsgZGVlcDogZmFsc2UsIG5lc3RlZDogZmFsc2UgfSxcbikge1xuICBjb25zdCBmbiA9XG4gICAgdHlwZW9mIGh5YnJpZHNPckZuID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gaHlicmlkc09yRm5cbiAgICAgIDogaHlicmlkcyA9PiBoeWJyaWRzID09PSBoeWJyaWRzT3JGbjtcbiAgcmV0dXJuIHtcbiAgICBnZXQoaG9zdCkge1xuICAgICAgcmV0dXJuIHdhbGsoaG9zdCwgZm4sIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgY29ubmVjdChob3N0LCBrZXksIGludmFsaWRhdGUpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoaW52YWxpZGF0ZSk7XG5cbiAgICAgIG9ic2VydmVyLm9ic2VydmUoaG9zdCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6ICEhb3B0aW9ucy5kZWVwLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH07XG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vY2hpbGRyZW4uanM/NWFmMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9oeWJyaWRzL2VzbS9jaGlsZHJlbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdhbGsobm9kZSwgZm4sIG9wdGlvbnMpIHtcbiAgdmFyIGl0ZW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBbXTtcbiAgQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHZhciBoeWJyaWRzID0gY2hpbGQuY29uc3RydWN0b3IuaHlicmlkcztcblxuICAgIGlmIChoeWJyaWRzICYmIGZuKGh5YnJpZHMpKSB7XG4gICAgICBpdGVtcy5wdXNoKGNoaWxkKTtcblxuICAgICAgaWYgKG9wdGlvbnMuZGVlcCAmJiBvcHRpb25zLm5lc3RlZCkge1xuICAgICAgICB3YWxrKGNoaWxkLCBmbiwgb3B0aW9ucywgaXRlbXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kZWVwKSB7XG4gICAgICB3YWxrKGNoaWxkLCBmbiwgb3B0aW9ucywgaXRlbXMpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpdGVtcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hpbGRyZW4oaHlicmlkc09yRm4pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICBkZWVwOiBmYWxzZSxcbiAgICBuZXN0ZWQ6IGZhbHNlXG4gIH07XG4gIHZhciBmbiA9IHR5cGVvZiBoeWJyaWRzT3JGbiA9PT0gXCJmdW5jdGlvblwiID8gaHlicmlkc09yRm4gOiBmdW5jdGlvbiAoaHlicmlkcykge1xuICAgIHJldHVybiBoeWJyaWRzID09PSBoeWJyaWRzT3JGbjtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChob3N0KSB7XG4gICAgICByZXR1cm4gd2Fsayhob3N0LCBmbiwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBjb25uZWN0OiBmdW5jdGlvbiBjb25uZWN0KGhvc3QsIGtleSwgaW52YWxpZGF0ZSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoaW52YWxpZGF0ZSk7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGhvc3QsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiAhIW9wdGlvbnMuZGVlcFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5amFHbHNaSEpsYmk1cWN5SmRMQ0p1WVcxbGN5STZXeUozWVd4cklpd2libTlrWlNJc0ltWnVJaXdpYjNCMGFXOXVjeUlzSW1sMFpXMXpJaXdpUVhKeVlYa2lMQ0ptY205dElpd2lZMmhwYkdSeVpXNGlMQ0ptYjNKRllXTm9JaXdpWTJocGJHUWlMQ0pvZVdKeWFXUnpJaXdpWTI5dWMzUnlkV04wYjNJaUxDSndkWE5vSWl3aVpHVmxjQ0lzSW01bGMzUmxaQ0lzSW1oNVluSnBaSE5QY2tadUlpd2laMlYwSWl3aWFHOXpkQ0lzSW1OdmJtNWxZM1FpTENKclpYa2lMQ0pwYm5aaGJHbGtZWFJsSWl3aWIySnpaWEoyWlhJaUxDSk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUlpd2liMkp6WlhKMlpTSXNJbU5vYVd4a1RHbHpkQ0lzSW5OMVluUnlaV1VpTENKa2FYTmpiMjV1WldOMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFRRVUZUUVN4SlFVRlVMRU5CUVdORExFbEJRV1FzUlVGQmIwSkRMRVZCUVhCQ0xFVkJRWGRDUXl4UFFVRjRRaXhGUVVFMlF6dEJRVUZCTEUxQlFWcERMRXRCUVZrc2RVVkJRVW9zUlVGQlNUdEJRVU16UTBNc1JVRkJRVUVzUzBGQlN5eERRVUZEUXl4SlFVRk9MRU5CUVZkTUxFbEJRVWtzUTBGQlEwMHNVVUZCYUVJc1JVRkJNRUpETEU5QlFURkNMRU5CUVd0RExGVkJRVUZETEV0QlFVc3NSVUZCU1R0QlFVTjZReXhSUVVGTlF5eFBRVUZQTEVkQlFVZEVMRXRCUVVzc1EwRkJRMFVzVjBGQlRpeERRVUZyUWtRc1QwRkJiRU03TzBGQlEwRXNVVUZCU1VFc1QwRkJUeXhKUVVGSlVpeEZRVUZGTEVOQlFVTlJMRTlCUVVRc1EwRkJha0lzUlVGQk5FSTdRVUZETVVKT0xFMUJRVUZCTEV0QlFVc3NRMEZCUTFFc1NVRkJUaXhEUVVGWFNDeExRVUZZT3p0QlFVTkJMRlZCUVVsT0xFOUJRVThzUTBGQlExVXNTVUZCVWl4SlFVRm5RbFlzVDBGQlR5eERRVUZEVnl4TlFVRTFRaXhGUVVGdlF6dEJRVU5zUTJRc1VVRkJRVUVzU1VGQlNTeERRVUZEVXl4TFFVRkVMRVZCUVZGUUxFVkJRVklzUlVGQldVTXNUMEZCV2l4RlFVRnhRa01zUzBGQmNrSXNRMEZCU2p0QlFVTkVPMEZCUTBZc1MwRk1SQ3hOUVV0UExFbEJRVWxFTEU5QlFVOHNRMEZCUTFVc1NVRkJXaXhGUVVGclFqdEJRVU4yUW1Jc1RVRkJRVUVzU1VGQlNTeERRVUZEVXl4TFFVRkVMRVZCUVZGUUxFVkJRVklzUlVGQldVTXNUMEZCV2l4RlFVRnhRa01zUzBGQmNrSXNRMEZCU2p0QlFVTkVPMEZCUTBZc1IwRldSRHRCUVZsQkxGTkJRVTlCTEV0QlFWQTdRVUZEUkRzN1FVRkZSQ3hsUVVGbExGTkJRVk5ITEZGQlFWUXNRMEZEWWxFc1YwRkVZU3hGUVVkaU8wRkJRVUVzVFVGRVFWb3NUMEZEUVN4MVJVRkVWVHRCUVVGRlZTeEpRVUZCUVN4SlFVRkpMRVZCUVVVc1MwRkJVanRCUVVGbFF5eEpRVUZCUVN4TlFVRk5MRVZCUVVVN1FVRkJka0lzUjBGRFZqdEJRVU5CTEUxQlFVMWFMRVZCUVVVc1IwRkRUaXhQUVVGUFlTeFhRVUZRTEV0QlFYVkNMRlZCUVhaQ0xFZEJRMGxCTEZkQlJFb3NSMEZGU1N4VlFVRkJUQ3hQUVVGUE8wRkJRVUVzVjBGQlNVRXNUMEZCVHl4TFFVRkxTeXhYUVVGb1FqdEJRVUZCTEVkQlNHSTdRVUZKUVN4VFFVRlBPMEZCUTB4RExFbEJRVUZCTEVkQlJFc3NaVUZEUkVNc1NVRkVReXhGUVVOTE8wRkJRMUlzWVVGQlQycENMRWxCUVVrc1EwRkJRMmxDTEVsQlFVUXNSVUZCVDJZc1JVRkJVQ3hGUVVGWFF5eFBRVUZZTEVOQlFWZzdRVUZEUkN4TFFVaEpPMEZCU1V4bExFbEJRVUZCTEU5QlNrc3NiVUpCU1VkRUxFbEJTa2dzUlVGSlUwVXNSMEZLVkN4RlFVbGpReXhWUVVwa0xFVkJTVEJDTzBGQlF6ZENMRlZCUVUxRExGRkJRVkVzUjBGQlJ5eEpRVUZKUXl4blFrRkJTaXhEUVVGeFFrWXNWVUZCY2tJc1EwRkJha0k3UVVGRlFVTXNUVUZCUVVFc1VVRkJVU3hEUVVGRFJTeFBRVUZVTEVOQlFXbENUaXhKUVVGcVFpeEZRVUYxUWp0QlFVTnlRazhzVVVGQlFVRXNVMEZCVXl4RlFVRkZMRWxCUkZVN1FVRkZja0pETEZGQlFVRkJMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU4wUWl4UFFVRlBMRU5CUVVOVk8wRkJSa1VzVDBGQmRrSTdRVUZMUVN4aFFVRlBMRmxCUVUwN1FVRkRXRkVzVVVGQlFVRXNVVUZCVVN4RFFVRkRTeXhWUVVGVU8wRkJRMFFzVDBGR1JEdEJRVWRFTzBGQlpra3NSMEZCVUR0QlFXbENSQ0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1aMWJtTjBhVzl1SUhkaGJHc29ibTlrWlN3Z1ptNHNJRzl3ZEdsdmJuTXNJR2wwWlcxeklEMGdXMTBwSUh0Y2JpQWdRWEp5WVhrdVpuSnZiU2h1YjJSbExtTm9hV3hrY21WdUtTNW1iM0pGWVdOb0tHTm9hV3hrSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0JvZVdKeWFXUnpJRDBnWTJocGJHUXVZMjl1YzNSeWRXTjBiM0l1YUhsaWNtbGtjenRjYmlBZ0lDQnBaaUFvYUhsaWNtbGtjeUFtSmlCbWJpaG9lV0p5YVdSektTa2dlMXh1SUNBZ0lDQWdhWFJsYlhNdWNIVnphQ2hqYUdsc1pDazdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWldWd0lDWW1JRzl3ZEdsdmJuTXVibVZ6ZEdWa0tTQjdYRzRnSUNBZ0lDQWdJSGRoYkdzb1kyaHBiR1FzSUdadUxDQnZjSFJwYjI1ekxDQnBkR1Z0Y3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNodmNIUnBiMjV6TG1SbFpYQXBJSHRjYmlBZ0lDQWdJSGRoYkdzb1kyaHBiR1FzSUdadUxDQnZjSFJwYjI1ekxDQnBkR1Z0Y3lrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmx4dUlDQnlaWFIxY200Z2FYUmxiWE03WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHTm9hV3hrY21WdUtGeHVJQ0JvZVdKeWFXUnpUM0pHYml4Y2JpQWdiM0IwYVc5dWN5QTlJSHNnWkdWbGNEb2dabUZzYzJVc0lHNWxjM1JsWkRvZ1ptRnNjMlVnZlN4Y2Jpa2dlMXh1SUNCamIyNXpkQ0JtYmlBOVhHNGdJQ0FnZEhsd1pXOW1JR2g1WW5KcFpITlBja1p1SUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0pjYmlBZ0lDQWdJRDhnYUhsaWNtbGtjMDl5Um01Y2JpQWdJQ0FnSURvZ2FIbGljbWxrY3lBOVBpQm9lV0p5YVdSeklEMDlQU0JvZVdKeWFXUnpUM0pHYmp0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCblpYUW9hRzl6ZENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhkaGJHc29hRzl6ZEN3Z1ptNHNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ1kyOXVibVZqZENob2IzTjBMQ0JyWlhrc0lHbHVkbUZzYVdSaGRHVXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHOWljMlZ5ZG1WeUlEMGdibVYzSUUxMWRHRjBhVzl1VDJKelpYSjJaWElvYVc1MllXeHBaR0YwWlNrN1hHNWNiaUFnSUNBZ0lHOWljMlZ5ZG1WeUxtOWljMlZ5ZG1Vb2FHOXpkQ3dnZTF4dUlDQWdJQ0FnSUNCamFHbHNaRXhwYzNRNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhOMVluUnlaV1U2SUNFaGIzQjBhVzl1Y3k1a1pXVndMRnh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUFvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJRzlpYzJWeWRtVnlMbVJwYzJOdmJtNWxZM1FvS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlN4Y2JpQWdmVHRjYm4xY2JpSmRmUT09Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/children.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/define.js":
/*!********************************************!*\
  !*** ./node_modules/hybrids/esm/define.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return define; });\n/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./property.js */ \"./node_modules/hybrids/esm/property.js\");\n/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./render.js */ \"./node_modules/hybrids/esm/render.js\");\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cache.js */ \"./node_modules/hybrids/esm/cache.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/hybrids/esm/utils.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n/* istanbul ignore next */\n\ntry {\n  \"development\";\n} catch (e) {\n  var process = {\n    env: {\n      NODE_ENV: 'production'\n    }\n  };\n} // eslint-disable-line\n\n\nvar defaultMethod = function defaultMethod(host, value) {\n  return value;\n};\n\nvar callbacksMap = new WeakMap();\nvar propsMap = new WeakMap();\n\nfunction compile(Hybrid, descriptors) {\n  Hybrid.hybrids = descriptors;\n  var callbacks = [];\n  var props = Object.keys(descriptors);\n  callbacksMap.set(Hybrid, callbacks);\n  propsMap.set(Hybrid, props);\n  props.forEach(function (key) {\n    var desc = descriptors[key];\n\n    var type = _typeof(desc);\n\n    var config;\n\n    if (type === \"function\") {\n      config = key === \"render\" ? Object(_render_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(desc) : {\n        get: desc\n      };\n    } else if (type !== \"object\" || desc === null || Array.isArray(desc)) {\n      config = Object(_property_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(desc);\n    } else {\n      config = {\n        get: desc.get || defaultMethod,\n        set: desc.set || !desc.get && defaultMethod || undefined,\n        connect: desc.connect,\n        observe: desc.observe\n      };\n    }\n\n    Object.defineProperty(Hybrid.prototype, key, {\n      get: function get() {\n        return _cache_js__WEBPACK_IMPORTED_MODULE_2__[\"get\"](this, key, config.get);\n      },\n      set: config.set && function set(newValue) {\n        _cache_js__WEBPACK_IMPORTED_MODULE_2__[\"set\"](this, key, config.set, newValue);\n      },\n      enumerable: true,\n      configurable: \"development\" !== \"production\"\n    });\n\n    if (config.observe) {\n      callbacks.unshift(function (host) {\n        return _cache_js__WEBPACK_IMPORTED_MODULE_2__[\"observe\"](host, key, config.get, config.observe);\n      });\n    }\n\n    if (config.connect) {\n      callbacks.push(function (host) {\n        return config.connect(host, key, function () {\n          _cache_js__WEBPACK_IMPORTED_MODULE_2__[\"invalidate\"](host, key);\n        });\n      });\n    }\n  });\n}\n\nvar update;\n/* istanbul ignore else */\n\nif (true) {\n  var walkInShadow = function walkInShadow(node, fn) {\n    fn(node);\n    Array.from(node.children).forEach(function (el) {\n      return walkInShadow(el, fn);\n    });\n\n    if (node.shadowRoot) {\n      Array.from(node.shadowRoot.children).forEach(function (el) {\n        return walkInShadow(el, fn);\n      });\n    }\n  };\n\n  var updateQueue = new Map();\n\n  update = function update(Hybrid, lastHybrids) {\n    if (!updateQueue.size) {\n      _utils_js__WEBPACK_IMPORTED_MODULE_3__[\"deferred\"].then(function () {\n        walkInShadow(document.body, function (node) {\n          if (updateQueue.has(node.constructor)) {\n            var hybrids = updateQueue.get(node.constructor);\n            node.disconnectedCallback();\n            Object.keys(node.constructor.hybrids).forEach(function (key) {\n              _cache_js__WEBPACK_IMPORTED_MODULE_2__[\"invalidate\"](node, key, node.constructor.hybrids[key] !== hybrids[key]);\n            });\n            node.connectedCallback();\n          }\n        });\n        updateQueue.clear();\n      });\n    }\n\n    updateQueue.set(Hybrid, lastHybrids);\n  };\n}\n\nvar disconnects = new WeakMap();\n\nfunction defineElement(tagName, hybridsOrConstructor) {\n  var type = _typeof(hybridsOrConstructor);\n\n  if (type !== \"object\" && type !== \"function\") {\n    throw TypeError(\"Second argument must be an object or a function: \".concat(type));\n  }\n\n  if (tagName !== null) {\n    var CustomElement = window.customElements.get(tagName);\n\n    if (type === \"function\") {\n      if (CustomElement !== hybridsOrConstructor) {\n        return window.customElements.define(tagName, hybridsOrConstructor);\n      }\n\n      return CustomElement;\n    }\n\n    if (CustomElement) {\n      if (CustomElement.hybrids === hybridsOrConstructor) {\n        return CustomElement;\n      }\n\n      if ( true && CustomElement.hybrids) {\n        Object.keys(CustomElement.hybrids).forEach(function (key) {\n          delete CustomElement.prototype[key];\n        });\n        var lastHybrids = CustomElement.hybrids;\n        compile(CustomElement, hybridsOrConstructor);\n        update(CustomElement, lastHybrids);\n        return CustomElement;\n      }\n\n      throw Error(\"Element '\".concat(tagName, \"' already defined\"));\n    }\n  }\n\n  var Hybrid = /*#__PURE__*/function (_HTMLElement) {\n    _inherits(Hybrid, _HTMLElement);\n\n    var _super = _createSuper(Hybrid);\n\n    function Hybrid() {\n      var _this;\n\n      _classCallCheck(this, Hybrid);\n\n      _this = _super.call(this);\n      var props = propsMap.get(Hybrid);\n\n      for (var index = 0; index < props.length; index += 1) {\n        var key = props[index];\n\n        if (Object.prototype.hasOwnProperty.call(_assertThisInitialized(_this), key)) {\n          var value = _this[key];\n          delete _this[key];\n          _this[key] = value;\n        }\n      }\n\n      return _this;\n    }\n\n    _createClass(Hybrid, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var callbacks = callbacksMap.get(Hybrid);\n        var list = [];\n\n        for (var index = 0; index < callbacks.length; index += 1) {\n          var cb = callbacks[index](this);\n          if (cb) list.push(cb);\n        }\n\n        disconnects.set(this, list);\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        var list = disconnects.get(this);\n\n        for (var index = 0; index < list.length; index += 1) {\n          list[index]();\n        }\n      }\n    }]);\n\n    return Hybrid;\n  }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n  compile(Hybrid, hybridsOrConstructor);\n\n  if (tagName !== null) {\n    Object.defineProperty(Hybrid, \"name\", {\n      get: function get() {\n        return tagName;\n      }\n    });\n    customElements.define(tagName, Hybrid);\n  }\n\n  return Hybrid;\n}\n\nfunction defineMap(elements) {\n  return Object.keys(elements).reduce(function (acc, key) {\n    var tagName = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"pascalToDash\"])(key);\n    acc[key] = defineElement(tagName, elements[key]);\n    return acc;\n  }, {});\n}\n\nfunction define() {\n  if (_typeof(arguments.length <= 0 ? undefined : arguments[0]) === \"object\" && (arguments.length <= 0 ? undefined : arguments[0]) !== null) {\n    return defineMap(arguments.length <= 0 ? undefined : arguments[0]);\n  }\n\n  return defineElement.apply(void 0, arguments);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/define.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/hybrids/esm/emitter.js ***!
  \*********************************************/
/*! exports provided: dispatch, subscribe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dispatch\", function() { return dispatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subscribe\", function() { return subscribe; });\nvar callbacks = new WeakMap();\nvar queue = new Set();\n\nfunction execute() {\n  try {\n    queue.forEach(function (target) {\n      try {\n        callbacks.get(target)();\n        queue.delete(target);\n      } catch (e) {\n        queue.delete(target);\n        throw e;\n      }\n    });\n  } catch (e) {\n    if (queue.size) execute();\n    throw e;\n  }\n}\n\nfunction dispatch(target) {\n  if (!queue.size) {\n    requestAnimationFrame(execute);\n  }\n\n  queue.add(target);\n}\nfunction subscribe(target, cb) {\n  callbacks.set(target, cb);\n  dispatch(target);\n  return function unsubscribe() {\n    queue.delete(target);\n    callbacks.delete(target);\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbWl0dGVyLmpzIl0sIm5hbWVzIjpbImNhbGxiYWNrcyIsIldlYWtNYXAiLCJxdWV1ZSIsIlNldCIsImV4ZWN1dGUiLCJmb3JFYWNoIiwidGFyZ2V0IiwiZ2V0IiwiZGVsZXRlIiwiZSIsInNpemUiLCJkaXNwYXRjaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFkZCIsInN1YnNjcmliZSIsImNiIiwic2V0IiwidW5zdWJzY3JpYmUiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLFNBQVMsR0FBRyxJQUFJQyxPQUFKLEVBQWxCO0FBQ0EsSUFBTUMsS0FBSyxHQUFHLElBQUlDLEdBQUosRUFBZDs7QUFFQSxTQUFTQyxPQUFULEdBQW1CO0FBQ2pCLE1BQUk7QUFDRkYsSUFBQUEsS0FBSyxDQUFDRyxPQUFOLENBQWMsVUFBQUMsTUFBTSxFQUFJO0FBQ3RCLFVBQUk7QUFDRk4sUUFBQUEsU0FBUyxDQUFDTyxHQUFWLENBQWNELE1BQWQ7QUFDQUosUUFBQUEsS0FBSyxDQUFDTSxNQUFOLENBQWFGLE1BQWI7QUFDRCxPQUhELENBR0UsT0FBT0csQ0FBUCxFQUFVO0FBQ1ZQLFFBQUFBLEtBQUssQ0FBQ00sTUFBTixDQUFhRixNQUFiO0FBQ0EsY0FBTUcsQ0FBTjtBQUNEO0FBQ0YsS0FSRDtBQVNELEdBVkQsQ0FVRSxPQUFPQSxDQUFQLEVBQVU7QUFDVixRQUFJUCxLQUFLLENBQUNRLElBQVYsRUFBZ0JOLE9BQU87QUFDdkIsVUFBTUssQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsT0FBTyxTQUFTRSxRQUFULENBQWtCTCxNQUFsQixFQUEwQjtBQUMvQixNQUFJLENBQUNKLEtBQUssQ0FBQ1EsSUFBWCxFQUFpQjtBQUNmRSxJQUFBQSxxQkFBcUIsQ0FBQ1IsT0FBRCxDQUFyQjtBQUNEOztBQUNERixFQUFBQSxLQUFLLENBQUNXLEdBQU4sQ0FBVVAsTUFBVjtBQUNEO0FBRUQsT0FBTyxTQUFTUSxTQUFULENBQW1CUixNQUFuQixFQUEyQlMsRUFBM0IsRUFBK0I7QUFDcENmLEVBQUFBLFNBQVMsQ0FBQ2dCLEdBQVYsQ0FBY1YsTUFBZCxFQUFzQlMsRUFBdEI7QUFDQUosRUFBQUEsUUFBUSxDQUFDTCxNQUFELENBQVI7QUFFQSxTQUFPLFNBQVNXLFdBQVQsR0FBdUI7QUFDNUJmLElBQUFBLEtBQUssQ0FBQ00sTUFBTixDQUFhRixNQUFiO0FBQ0FOLElBQUFBLFNBQVMsQ0FBQ1EsTUFBVixDQUFpQkYsTUFBakI7QUFDRCxHQUhEO0FBSUQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcXVldWUgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gIHRyeSB7XG4gICAgcXVldWUuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2tzLmdldCh0YXJnZXQpKCk7XG4gICAgICAgIHF1ZXVlLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBxdWV1ZS5kZWxldGUodGFyZ2V0KTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChxdWV1ZS5zaXplKSBleGVjdXRlKCk7XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2godGFyZ2V0KSB7XG4gIGlmICghcXVldWUuc2l6ZSkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShleGVjdXRlKTtcbiAgfVxuICBxdWV1ZS5hZGQodGFyZ2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZSh0YXJnZXQsIGNiKSB7XG4gIGNhbGxiYWNrcy5zZXQodGFyZ2V0LCBjYik7XG4gIGRpc3BhdGNoKHRhcmdldCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgIHF1ZXVlLmRlbGV0ZSh0YXJnZXQpO1xuICAgIGNhbGxiYWNrcy5kZWxldGUodGFyZ2V0KTtcbiAgfTtcbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vZW1pdHRlci5qcz9hNmZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9oeWJyaWRzL2VzbS9lbWl0dGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNhbGxiYWNrcyA9IG5ldyBXZWFrTWFwKCk7XG52YXIgcXVldWUgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gIHRyeSB7XG4gICAgcXVldWUuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYWxsYmFja3MuZ2V0KHRhcmdldCkoKTtcbiAgICAgICAgcXVldWUuZGVsZXRlKHRhcmdldCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHF1ZXVlLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHF1ZXVlLnNpemUpIGV4ZWN1dGUoKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwYXRjaCh0YXJnZXQpIHtcbiAgaWYgKCFxdWV1ZS5zaXplKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGV4ZWN1dGUpO1xuICB9XG5cbiAgcXVldWUuYWRkKHRhcmdldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlKHRhcmdldCwgY2IpIHtcbiAgY2FsbGJhY2tzLnNldCh0YXJnZXQsIGNiKTtcbiAgZGlzcGF0Y2godGFyZ2V0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgIHF1ZXVlLmRlbGV0ZSh0YXJnZXQpO1xuICAgIGNhbGxiYWNrcy5kZWxldGUodGFyZ2V0KTtcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5bGJXbDBkR1Z5TG1weklsMHNJbTVoYldWeklqcGJJbU5oYkd4aVlXTnJjeUlzSWxkbFlXdE5ZWEFpTENKeGRXVjFaU0lzSWxObGRDSXNJbVY0WldOMWRHVWlMQ0ptYjNKRllXTm9JaXdpZEdGeVoyVjBJaXdpWjJWMElpd2laR1ZzWlhSbElpd2laU0lzSW5OcGVtVWlMQ0prYVhOd1lYUmphQ0lzSW5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTSXNJbUZrWkNJc0luTjFZbk5qY21saVpTSXNJbU5pSWl3aWMyVjBJaXdpZFc1emRXSnpZM0pwWW1VaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVTFCTEZOQlFWTXNSMEZCUnl4SlFVRkpReXhQUVVGS0xFVkJRV3hDTzBGQlEwRXNTVUZCVFVNc1MwRkJTeXhIUVVGSExFbEJRVWxETEVkQlFVb3NSVUZCWkRzN1FVRkZRU3hUUVVGVFF5eFBRVUZVTEVkQlFXMUNPMEZCUTJwQ0xFMUJRVWs3UVVGRFJrWXNTVUZCUVVFc1MwRkJTeXhEUVVGRFJ5eFBRVUZPTEVOQlFXTXNWVUZCUVVNc1RVRkJUU3hGUVVGSk8wRkJRM1JDTEZWQlFVazdRVUZEUms0c1VVRkJRVUVzVTBGQlV5eERRVUZEVHl4SFFVRldMRU5CUVdORUxFMUJRV1E3UVVGRFFVb3NVVUZCUVVFc1MwRkJTeXhEUVVGRFRTeE5RVUZPTEVOQlFXRkdMRTFCUVdJN1FVRkRSQ3hQUVVoRUxFTkJSMFVzVDBGQlQwY3NRMEZCVUN4RlFVRlZPMEZCUTFaUUxGRkJRVUZCTEV0QlFVc3NRMEZCUTAwc1RVRkJUaXhEUVVGaFJpeE5RVUZpTzBGQlEwRXNZMEZCVFVjc1EwRkJUanRCUVVORU8wRkJRMFlzUzBGU1JEdEJRVk5FTEVkQlZrUXNRMEZWUlN4UFFVRlBRU3hEUVVGUUxFVkJRVlU3UVVGRFZpeFJRVUZKVUN4TFFVRkxMRU5CUVVOUkxFbEJRVllzUlVGQlowSk9MRTlCUVU4N1FVRkRka0lzVlVGQlRVc3NRMEZCVGp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVDBGQlR5eFRRVUZUUlN4UlFVRlVMRU5CUVd0Q1RDeE5RVUZzUWl4RlFVRXdRanRCUVVNdlFpeE5RVUZKTEVOQlFVTktMRXRCUVVzc1EwRkJRMUVzU1VGQldDeEZRVUZwUWp0QlFVTm1SU3hKUVVGQlFTeHhRa0ZCY1VJc1EwRkJRMUlzVDBGQlJDeERRVUZ5UWp0QlFVTkVPenRCUVVORVJpeEZRVUZCUVN4TFFVRkxMRU5CUVVOWExFZEJRVTRzUTBGQlZWQXNUVUZCVmp0QlFVTkVPMEZCUlVRc1QwRkJUeXhUUVVGVFVTeFRRVUZVTEVOQlFXMUNVaXhOUVVGdVFpeEZRVUV5UWxNc1JVRkJNMElzUlVGQkswSTdRVUZEY0VObUxFVkJRVUZCTEZOQlFWTXNRMEZCUTJkQ0xFZEJRVllzUTBGQlkxWXNUVUZCWkN4RlFVRnpRbE1zUlVGQmRFSTdRVUZEUVVvc1JVRkJRVUVzVVVGQlVTeERRVUZEVEN4TlFVRkVMRU5CUVZJN1FVRkZRU3hUUVVGUExGTkJRVk5YTEZkQlFWUXNSMEZCZFVJN1FVRkROVUptTEVsQlFVRkJMRXRCUVVzc1EwRkJRMDBzVFVGQlRpeERRVUZoUml4TlFVRmlPMEZCUTBGT0xFbEJRVUZCTEZOQlFWTXNRMEZCUTFFc1RVRkJWaXhEUVVGcFFrWXNUVUZCYWtJN1FVRkRSQ3hIUVVoRU8wRkJTVVFpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKamIyNXpkQ0JqWVd4c1ltRmphM01nUFNCdVpYY2dWMlZoYTAxaGNDZ3BPMXh1WTI5dWMzUWdjWFZsZFdVZ1BTQnVaWGNnVTJWMEtDazdYRzVjYm1aMWJtTjBhVzl1SUdWNFpXTjFkR1VvS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY1hWbGRXVXVabTl5UldGamFDaDBZWEpuWlhRZ1BUNGdlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyRnNiR0poWTJ0ekxtZGxkQ2gwWVhKblpYUXBLQ2s3WEc0Z0lDQWdJQ0FnSUhGMVpYVmxMbVJsYkdWMFpTaDBZWEpuWlhRcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpTNWtaV3hsZEdVb2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJR2xtSUNoeGRXVjFaUzV6YVhwbEtTQmxlR1ZqZFhSbEtDazdYRzRnSUNBZ2RHaHliM2NnWlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1pHbHpjR0YwWTJnb2RHRnlaMlYwS1NCN1hHNGdJR2xtSUNnaGNYVmxkV1V1YzJsNlpTa2dlMXh1SUNBZ0lISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2hsZUdWamRYUmxLVHRjYmlBZ2ZWeHVJQ0J4ZFdWMVpTNWhaR1FvZEdGeVoyVjBLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlITjFZbk5qY21saVpTaDBZWEpuWlhRc0lHTmlLU0I3WEc0Z0lHTmhiR3hpWVdOcmN5NXpaWFFvZEdGeVoyVjBMQ0JqWWlrN1hHNGdJR1JwYzNCaGRHTm9LSFJoY21kbGRDazdYRzVjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhWdWMzVmljMk55YVdKbEtDa2dlMXh1SUNBZ0lIRjFaWFZsTG1SbGJHVjBaU2gwWVhKblpYUXBPMXh1SUNBZ0lHTmhiR3hpWVdOcmN5NWtaV3hsZEdVb2RHRnlaMlYwS1R0Y2JpQWdmVHRjYm4xY2JpSmRmUT09Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/emitter.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/index.js":
/*!*******************************************!*\
  !*** ./node_modules/hybrids/esm/index.js ***!
  \*******************************************/
/*! exports provided: define, property, parent, children, render, store, html, svg, dispatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./define.js */ \"./node_modules/hybrids/esm/define.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"define\", function() { return _define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./property.js */ \"./node_modules/hybrids/esm/property.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"property\", function() { return _property_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _parent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parent.js */ \"./node_modules/hybrids/esm/parent.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"parent\", function() { return _parent_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _children_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./children.js */ \"./node_modules/hybrids/esm/children.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"children\", function() { return _children_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./render.js */ \"./node_modules/hybrids/esm/render.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _render_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _store_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./store.js */ \"./node_modules/hybrids/esm/store.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"store\", function() { return _store_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _template_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./template/index.js */ \"./node_modules/hybrids/esm/template/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"html\", function() { return _template_index_js__WEBPACK_IMPORTED_MODULE_6__[\"html\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"svg\", function() { return _template_index_js__WEBPACK_IMPORTED_MODULE_6__[\"svg\"]; });\n\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/hybrids/esm/utils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"dispatch\", function() { return _utils_js__WEBPACK_IMPORTED_MODULE_7__[\"dispatch\"]; });\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiZGVmaW5lIiwicHJvcGVydHkiLCJwYXJlbnQiLCJjaGlsZHJlbiIsInJlbmRlciIsInN0b3JlIiwiaHRtbCIsInN2ZyIsImRpc3BhdGNoIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxPQUFPLElBQUlDLE1BQXBCLFFBQWtDLGFBQWxDO0FBQ0EsU0FBU0QsT0FBTyxJQUFJRSxRQUFwQixRQUFvQyxlQUFwQztBQUNBLFNBQVNGLE9BQU8sSUFBSUcsTUFBcEIsUUFBa0MsYUFBbEM7QUFDQSxTQUFTSCxPQUFPLElBQUlJLFFBQXBCLFFBQW9DLGVBQXBDO0FBQ0EsU0FBU0osT0FBTyxJQUFJSyxNQUFwQixRQUFrQyxhQUFsQztBQUNBLFNBQVNMLE9BQU8sSUFBSU0sS0FBcEIsUUFBaUMsWUFBakM7QUFFQSxTQUFTQyxJQUFULEVBQWVDLEdBQWYsUUFBMEIscUJBQTFCO0FBRUEsU0FBU0MsUUFBVCxRQUF5QixZQUF6QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmaW5lIH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByb3BlcnR5IH0gZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyZW50IH0gZnJvbSBcIi4vcGFyZW50LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNoaWxkcmVuIH0gZnJvbSBcIi4vY2hpbGRyZW4uanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVuZGVyIH0gZnJvbSBcIi4vcmVuZGVyLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0b3JlIH0gZnJvbSBcIi4vc3RvcmUuanNcIjtcblxuZXhwb3J0IHsgaHRtbCwgc3ZnIH0gZnJvbSBcIi4vdGVtcGxhdGUvaW5kZXguanNcIjtcblxuZXhwb3J0IHsgZGlzcGF0Y2ggfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vaW5kZXguanM/MzBiYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBZ0Q7QUFDSTtBQUNKO0FBQ0k7QUFDSjtBQUNGO0FBQ0U7QUFDVjtBQUN0QywyQ0FBMkMsY0FBYyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9oeWJyaWRzL2VzbS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmaW5lIH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByb3BlcnR5IH0gZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyZW50IH0gZnJvbSBcIi4vcGFyZW50LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNoaWxkcmVuIH0gZnJvbSBcIi4vY2hpbGRyZW4uanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVuZGVyIH0gZnJvbSBcIi4vcmVuZGVyLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0b3JlIH0gZnJvbSBcIi4vc3RvcmUuanNcIjtcbmV4cG9ydCB7IGh0bWwsIHN2ZyB9IGZyb20gXCIuL3RlbXBsYXRlL2luZGV4LmpzXCI7XG5leHBvcnQgeyBkaXNwYXRjaCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXeUprWldaaGRXeDBJaXdpWkdWbWFXNWxJaXdpY0hKdmNHVnlkSGtpTENKd1lYSmxiblFpTENKamFHbHNaSEpsYmlJc0luSmxibVJsY2lJc0luTjBiM0psSWl3aWFIUnRiQ0lzSW5OMlp5SXNJbVJwYzNCaGRHTm9JbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hUUVVGVFFTeFBRVUZQTEVsQlFVbERMRTFCUVhCQ0xGRkJRV3RETEdGQlFXeERPMEZCUTBFc1UwRkJVMFFzVDBGQlR5eEpRVUZKUlN4UlFVRndRaXhSUVVGdlF5eGxRVUZ3UXp0QlFVTkJMRk5CUVZOR0xFOUJRVThzU1VGQlNVY3NUVUZCY0VJc1VVRkJhME1zWVVGQmJFTTdRVUZEUVN4VFFVRlRTQ3hQUVVGUExFbEJRVWxKTEZGQlFYQkNMRkZCUVc5RExHVkJRWEJETzBGQlEwRXNVMEZCVTBvc1QwRkJUeXhKUVVGSlN5eE5RVUZ3UWl4UlFVRnJReXhoUVVGc1F6dEJRVU5CTEZOQlFWTk1MRTlCUVU4c1NVRkJTVTBzUzBGQmNFSXNVVUZCYVVNc1dVRkJha003UVVGRlFTeFRRVUZUUXl4SlFVRlVMRVZCUVdWRExFZEJRV1lzVVVGQk1FSXNjVUpCUVRGQ08wRkJSVUVzVTBGQlUwTXNVVUZCVkN4UlFVRjVRaXhaUVVGNlFpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQjdJR1JsWm1GMWJIUWdZWE1nWkdWbWFXNWxJSDBnWm5KdmJTQmNJaTR2WkdWbWFXNWxMbXB6WENJN1hHNWxlSEJ2Y25RZ2V5QmtaV1poZFd4MElHRnpJSEJ5YjNCbGNuUjVJSDBnWm5KdmJTQmNJaTR2Y0hKdmNHVnlkSGt1YW5OY0lqdGNibVY0Y0c5eWRDQjdJR1JsWm1GMWJIUWdZWE1nY0dGeVpXNTBJSDBnWm5KdmJTQmNJaTR2Y0dGeVpXNTBMbXB6WENJN1hHNWxlSEJ2Y25RZ2V5QmtaV1poZFd4MElHRnpJR05vYVd4a2NtVnVJSDBnWm5KdmJTQmNJaTR2WTJocGJHUnlaVzR1YW5OY0lqdGNibVY0Y0c5eWRDQjdJR1JsWm1GMWJIUWdZWE1nY21WdVpHVnlJSDBnWm5KdmJTQmNJaTR2Y21WdVpHVnlMbXB6WENJN1hHNWxlSEJ2Y25RZ2V5QmtaV1poZFd4MElHRnpJSE4wYjNKbElIMGdabkp2YlNCY0lpNHZjM1J2Y21VdWFuTmNJanRjYmx4dVpYaHdiM0owSUhzZ2FIUnRiQ3dnYzNabklIMGdabkp2YlNCY0lpNHZkR1Z0Y0d4aGRHVXZhVzVrWlhndWFuTmNJanRjYmx4dVpYaHdiM0owSUhzZ1pHbHpjR0YwWTJnZ2ZTQm1jbTl0SUZ3aUxpOTFkR2xzY3k1cWMxd2lPMXh1SWwxOSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/index.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/parent.js":
/*!********************************************!*\
  !*** ./node_modules/hybrids/esm/parent.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return parent; });\nfunction walk(node, fn) {\n  var parentElement = node.parentElement || node.parentNode.host;\n\n  while (parentElement) {\n    var hybrids = parentElement.constructor.hybrids;\n\n    if (hybrids && fn(hybrids)) {\n      return parentElement;\n    }\n\n    parentElement = parentElement.parentElement || parentElement.parentNode && parentElement.parentNode.host;\n  }\n\n  return parentElement || null;\n}\n\nfunction parent(hybridsOrFn) {\n  var fn = typeof hybridsOrFn === \"function\" ? hybridsOrFn : function (hybrids) {\n    return hybrids === hybridsOrFn;\n  };\n  return {\n    get: function get(host) {\n      return walk(host, fn);\n    },\n    connect: function connect(host, key, invalidate) {\n      var target = host[key];\n\n      if (target) {\n        return invalidate;\n      }\n\n      return false;\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJlbnQuanMiXSwibmFtZXMiOlsid2FsayIsIm5vZGUiLCJmbiIsInBhcmVudEVsZW1lbnQiLCJwYXJlbnROb2RlIiwiaG9zdCIsImh5YnJpZHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsImh5YnJpZHNPckZuIiwiZ2V0IiwiY29ubmVjdCIsImtleSIsImludmFsaWRhdGUiLCJ0YXJnZXQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLElBQVQsQ0FBY0MsSUFBZCxFQUFvQkMsRUFBcEIsRUFBd0I7QUFDdEIsTUFBSUMsYUFBYSxHQUFHRixJQUFJLENBQUNFLGFBQUwsSUFBc0JGLElBQUksQ0FBQ0csVUFBTCxDQUFnQkMsSUFBMUQ7O0FBRUEsU0FBT0YsYUFBUCxFQUFzQjtBQUNwQixRQUFNRyxPQUFPLEdBQUdILGFBQWEsQ0FBQ0ksV0FBZCxDQUEwQkQsT0FBMUM7O0FBRUEsUUFBSUEsT0FBTyxJQUFJSixFQUFFLENBQUNJLE9BQUQsQ0FBakIsRUFBNEI7QUFDMUIsYUFBT0gsYUFBUDtBQUNEOztBQUVEQSxJQUFBQSxhQUFhLEdBQ1hBLGFBQWEsQ0FBQ0EsYUFBZCxJQUNDQSxhQUFhLENBQUNDLFVBQWQsSUFBNEJELGFBQWEsQ0FBQ0MsVUFBZCxDQUF5QkMsSUFGeEQ7QUFHRDs7QUFFRCxTQUFPRixhQUFhLElBQUksSUFBeEI7QUFDRDs7QUFFRCxlQUFlLFNBQVNLLE1BQVQsQ0FBZ0JDLFdBQWhCLEVBQTZCO0FBQzFDLE1BQU1QLEVBQUUsR0FDTixPQUFPTyxXQUFQLEtBQXVCLFVBQXZCLEdBQ0lBLFdBREosR0FFSSxVQUFBSCxPQUFPO0FBQUEsV0FBSUEsT0FBTyxLQUFLRyxXQUFoQjtBQUFBLEdBSGI7QUFJQSxTQUFPO0FBQ0xDLElBQUFBLEdBQUcsRUFBRSxhQUFBTCxJQUFJO0FBQUEsYUFBSUwsSUFBSSxDQUFDSyxJQUFELEVBQU9ILEVBQVAsQ0FBUjtBQUFBLEtBREo7QUFFTFMsSUFBQUEsT0FGSyxtQkFFR04sSUFGSCxFQUVTTyxHQUZULEVBRWNDLFVBRmQsRUFFMEI7QUFDN0IsVUFBTUMsTUFBTSxHQUFHVCxJQUFJLENBQUNPLEdBQUQsQ0FBbkI7O0FBQ0EsVUFBSUUsTUFBSixFQUFZO0FBQ1YsZUFBT0QsVUFBUDtBQUNEOztBQUNELGFBQU8sS0FBUDtBQUNEO0FBUkksR0FBUDtBQVVEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd2Fsayhub2RlLCBmbikge1xuICBsZXQgcGFyZW50RWxlbWVudCA9IG5vZGUucGFyZW50RWxlbWVudCB8fCBub2RlLnBhcmVudE5vZGUuaG9zdDtcblxuICB3aGlsZSAocGFyZW50RWxlbWVudCkge1xuICAgIGNvbnN0IGh5YnJpZHMgPSBwYXJlbnRFbGVtZW50LmNvbnN0cnVjdG9yLmh5YnJpZHM7XG5cbiAgICBpZiAoaHlicmlkcyAmJiBmbihoeWJyaWRzKSkge1xuICAgICAgcmV0dXJuIHBhcmVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcGFyZW50RWxlbWVudCA9XG4gICAgICBwYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgfHxcbiAgICAgIChwYXJlbnRFbGVtZW50LnBhcmVudE5vZGUgJiYgcGFyZW50RWxlbWVudC5wYXJlbnROb2RlLmhvc3QpO1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudEVsZW1lbnQgfHwgbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyZW50KGh5YnJpZHNPckZuKSB7XG4gIGNvbnN0IGZuID1cbiAgICB0eXBlb2YgaHlicmlkc09yRm4gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBoeWJyaWRzT3JGblxuICAgICAgOiBoeWJyaWRzID0+IGh5YnJpZHMgPT09IGh5YnJpZHNPckZuO1xuICByZXR1cm4ge1xuICAgIGdldDogaG9zdCA9PiB3YWxrKGhvc3QsIGZuKSxcbiAgICBjb25uZWN0KGhvc3QsIGtleSwgaW52YWxpZGF0ZSkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gaG9zdFtrZXldO1xuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gaW52YWxpZGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9O1xufVxuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vcGFyZW50LmpzP2I1ZjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vcGFyZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd2Fsayhub2RlLCBmbikge1xuICB2YXIgcGFyZW50RWxlbWVudCA9IG5vZGUucGFyZW50RWxlbWVudCB8fCBub2RlLnBhcmVudE5vZGUuaG9zdDtcblxuICB3aGlsZSAocGFyZW50RWxlbWVudCkge1xuICAgIHZhciBoeWJyaWRzID0gcGFyZW50RWxlbWVudC5jb25zdHJ1Y3Rvci5oeWJyaWRzO1xuXG4gICAgaWYgKGh5YnJpZHMgJiYgZm4oaHlicmlkcykpIHtcbiAgICAgIHJldHVybiBwYXJlbnRFbGVtZW50O1xuICAgIH1cblxuICAgIHBhcmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgcGFyZW50RWxlbWVudC5wYXJlbnROb2RlICYmIHBhcmVudEVsZW1lbnQucGFyZW50Tm9kZS5ob3N0O1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudEVsZW1lbnQgfHwgbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyZW50KGh5YnJpZHNPckZuKSB7XG4gIHZhciBmbiA9IHR5cGVvZiBoeWJyaWRzT3JGbiA9PT0gXCJmdW5jdGlvblwiID8gaHlicmlkc09yRm4gOiBmdW5jdGlvbiAoaHlicmlkcykge1xuICAgIHJldHVybiBoeWJyaWRzID09PSBoeWJyaWRzT3JGbjtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChob3N0KSB7XG4gICAgICByZXR1cm4gd2Fsayhob3N0LCBmbik7XG4gICAgfSxcbiAgICBjb25uZWN0OiBmdW5jdGlvbiBjb25uZWN0KGhvc3QsIGtleSwgaW52YWxpZGF0ZSkge1xuICAgICAgdmFyIHRhcmdldCA9IGhvc3Rba2V5XTtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gaW52YWxpZGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5d1lYSmxiblF1YW5NaVhTd2libUZ0WlhNaU9sc2lkMkZzYXlJc0ltNXZaR1VpTENKbWJpSXNJbkJoY21WdWRFVnNaVzFsYm5RaUxDSndZWEpsYm5ST2IyUmxJaXdpYUc5emRDSXNJbWg1WW5KcFpITWlMQ0pqYjI1emRISjFZM1J2Y2lJc0luQmhjbVZ1ZENJc0ltaDVZbkpwWkhOUGNrWnVJaXdpWjJWMElpd2lZMjl1Ym1WamRDSXNJbXRsZVNJc0ltbHVkbUZzYVdSaGRHVWlMQ0owWVhKblpYUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRk5CUVZOQkxFbEJRVlFzUTBGQlkwTXNTVUZCWkN4RlFVRnZRa01zUlVGQmNFSXNSVUZCZDBJN1FVRkRkRUlzVFVGQlNVTXNZVUZCWVN4SFFVRkhSaXhKUVVGSkxFTkJRVU5GTEdGQlFVd3NTVUZCYzBKR0xFbEJRVWtzUTBGQlEwY3NWVUZCVEN4RFFVRm5Ra01zU1VGQk1VUTdPMEZCUlVFc1UwRkJUMFlzWVVGQlVDeEZRVUZ6UWp0QlFVTndRaXhSUVVGTlJ5eFBRVUZQTEVkQlFVZElMR0ZCUVdFc1EwRkJRMGtzVjBGQlpDeERRVUV3UWtRc1QwRkJNVU03TzBGQlJVRXNVVUZCU1VFc1QwRkJUeXhKUVVGSlNpeEZRVUZGTEVOQlFVTkpMRTlCUVVRc1EwRkJha0lzUlVGQk5FSTdRVUZETVVJc1lVRkJUMGdzWVVGQlVEdEJRVU5FT3p0QlFVVkVRU3hKUVVGQlFTeGhRVUZoTEVkQlExaEJMR0ZCUVdFc1EwRkJRMEVzWVVGQlpDeEpRVU5EUVN4aFFVRmhMRU5CUVVORExGVkJRV1FzU1VGQk5FSkVMR0ZCUVdFc1EwRkJRME1zVlVGQlpDeERRVUY1UWtNc1NVRkdlRVE3UVVGSFJEczdRVUZGUkN4VFFVRlBSaXhoUVVGaExFbEJRVWtzU1VGQmVFSTdRVUZEUkRzN1FVRkZSQ3hsUVVGbExGTkJRVk5MTEUxQlFWUXNRMEZCWjBKRExGZEJRV2hDTEVWQlFUWkNPMEZCUXpGRExFMUJRVTFRTEVWQlFVVXNSMEZEVGl4UFFVRlBUeXhYUVVGUUxFdEJRWFZDTEZWQlFYWkNMRWRCUTBsQkxGZEJSRW9zUjBGRlNTeFZRVUZCU0N4UFFVRlBPMEZCUVVFc1YwRkJTVUVzVDBGQlR5eExRVUZMUnl4WFFVRm9RanRCUVVGQkxFZEJTR0k3UVVGSlFTeFRRVUZQTzBGQlEweERMRWxCUVVGQkxFZEJRVWNzUlVGQlJTeGhRVUZCVEN4SlFVRkpPMEZCUVVFc1lVRkJTVXdzU1VGQlNTeERRVUZEU3l4SlFVRkVMRVZCUVU5SUxFVkJRVkFzUTBGQlVqdEJRVUZCTEV0QlJFbzdRVUZGVEZNc1NVRkJRVUVzVDBGR1N5eHRRa0ZGUjA0c1NVRkdTQ3hGUVVWVFR5eEhRVVpVTEVWQlJXTkRMRlZCUm1Rc1JVRkZNRUk3UVVGRE4wSXNWVUZCVFVNc1RVRkJUU3hIUVVGSFZDeEpRVUZKTEVOQlFVTlBMRWRCUVVRc1EwRkJia0k3TzBGQlEwRXNWVUZCU1VVc1RVRkJTaXhGUVVGWk8wRkJRMVlzWlVGQlQwUXNWVUZCVUR0QlFVTkVPenRCUVVORUxHRkJRVThzUzBGQlVEdEJRVU5FTzBGQlVra3NSMEZCVUR0QlFWVkVJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWm5WdVkzUnBiMjRnZDJGc2F5aHViMlJsTENCbWJpa2dlMXh1SUNCc1pYUWdjR0Z5Wlc1MFJXeGxiV1Z1ZENBOUlHNXZaR1V1Y0dGeVpXNTBSV3hsYldWdWRDQjhmQ0J1YjJSbExuQmhjbVZ1ZEU1dlpHVXVhRzl6ZER0Y2JseHVJQ0IzYUdsc1pTQW9jR0Z5Wlc1MFJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUdOdmJuTjBJR2g1WW5KcFpITWdQU0J3WVhKbGJuUkZiR1Z0Wlc1MExtTnZibk4wY25WamRHOXlMbWg1WW5KcFpITTdYRzVjYmlBZ0lDQnBaaUFvYUhsaWNtbGtjeUFtSmlCbWJpaG9lV0p5YVdSektTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIQmhjbVZ1ZEVWc1pXMWxiblE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjR0Z5Wlc1MFJXeGxiV1Z1ZENBOVhHNGdJQ0FnSUNCd1lYSmxiblJGYkdWdFpXNTBMbkJoY21WdWRFVnNaVzFsYm5RZ2ZIeGNiaUFnSUNBZ0lDaHdZWEpsYm5SRmJHVnRaVzUwTG5CaGNtVnVkRTV2WkdVZ0ppWWdjR0Z5Wlc1MFJXeGxiV1Z1ZEM1d1lYSmxiblJPYjJSbExtaHZjM1FwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhCaGNtVnVkRVZzWlcxbGJuUWdmSHdnYm5Wc2JEdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnY0dGeVpXNTBLR2g1WW5KcFpITlBja1p1S1NCN1hHNGdJR052Ym5OMElHWnVJRDFjYmlBZ0lDQjBlWEJsYjJZZ2FIbGljbWxrYzA5eVJtNGdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lseHVJQ0FnSUNBZ1B5Qm9lV0p5YVdSelQzSkdibHh1SUNBZ0lDQWdPaUJvZVdKeWFXUnpJRDArSUdoNVluSnBaSE1nUFQwOUlHaDVZbkpwWkhOUGNrWnVPMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJR2RsZERvZ2FHOXpkQ0E5UGlCM1lXeHJLR2h2YzNRc0lHWnVLU3hjYmlBZ0lDQmpiMjV1WldOMEtHaHZjM1FzSUd0bGVTd2dhVzUyWVd4cFpHRjBaU2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdkR0Z5WjJWMElEMGdhRzl6ZEZ0clpYbGRPMXh1SUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYVc1MllXeHBaR0YwWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOUxGeHVJQ0I5TzF4dWZWeHVJbDE5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/parent.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/property.js":
/*!**********************************************!*\
  !*** ./node_modules/hybrids/esm/property.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return property; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/hybrids/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\nvar defaultTransform = function defaultTransform(v) {\n  return v;\n};\n\nvar objectTransform = function objectTransform(value) {\n  if (_typeof(value) !== \"object\") {\n    throw TypeError(\"Assigned value must be an object: \".concat(_typeof(value)));\n  }\n\n  return value && Object.freeze(value);\n};\n\nfunction property(value, connect) {\n  var type = _typeof(value);\n\n  var transform = defaultTransform;\n\n  switch (type) {\n    case \"string\":\n      transform = String;\n      break;\n\n    case \"number\":\n      transform = Number;\n      break;\n\n    case \"boolean\":\n      transform = Boolean;\n      break;\n\n    case \"function\":\n      transform = value;\n      value = transform();\n      break;\n\n    case \"object\":\n      if (value) Object.freeze(value);\n      transform = objectTransform;\n      break;\n\n    default:\n      break;\n  }\n\n  return {\n    get: function get(host) {\n      var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : value;\n      return val;\n    },\n    set: function set(host, val, oldValue) {\n      return transform(val, oldValue);\n    },\n    connect: type !== \"object\" && type !== \"undefined\" ? function (host, key, invalidate) {\n      if (host[key] === value) {\n        var attrName = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"camelToDash\"])(key);\n\n        if (host.hasAttribute(attrName)) {\n          var attrValue = host.getAttribute(attrName);\n          host[key] = attrValue === \"\" && transform === Boolean ? true : attrValue;\n        }\n      }\n\n      return connect && connect(host, key, invalidate);\n    } : connect\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9wZXJ0eS5qcyJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJ2Iiwib2JqZWN0VHJhbnNmb3JtIiwidmFsdWUiLCJUeXBlRXJyb3IiLCJPYmplY3QiLCJmcmVlemUiLCJwcm9wZXJ0eSIsImNvbm5lY3QiLCJ0eXBlIiwidHJhbnNmb3JtIiwiU3RyaW5nIiwiTnVtYmVyIiwiQm9vbGVhbiIsImdldCIsImhvc3QiLCJ2YWwiLCJzZXQiLCJvbGRWYWx1ZSIsImtleSIsImludmFsaWRhdGUiLCJhdHRyTmFtZSIsImhhc0F0dHJpYnV0ZSIsImF0dHJWYWx1ZSIsImdldEF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxXQUFULFFBQTRCLFlBQTVCOztBQUVBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQUMsQ0FBQztBQUFBLFNBQUlBLENBQUo7QUFBQSxDQUExQjs7QUFFQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUFDLEtBQUssRUFBSTtBQUMvQixNQUFJLFFBQU9BLEtBQVAsTUFBaUIsUUFBckIsRUFBK0I7QUFDN0IsVUFBTUMsU0FBUyxxREFBNkNELEtBQTdDLEdBQWY7QUFDRDs7QUFDRCxTQUFPQSxLQUFLLElBQUlFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxLQUFkLENBQWhCO0FBQ0QsQ0FMRDs7QUFPQSxlQUFlLFNBQVNJLFFBQVQsQ0FBa0JKLEtBQWxCLEVBQXlCSyxPQUF6QixFQUFrQztBQUMvQyxNQUFNQyxJQUFJLFdBQVVOLEtBQVYsQ0FBVjs7QUFDQSxNQUFJTyxTQUFTLEdBQUdWLGdCQUFoQjs7QUFFQSxVQUFRUyxJQUFSO0FBQ0UsU0FBSyxRQUFMO0FBQ0VDLE1BQUFBLFNBQVMsR0FBR0MsTUFBWjtBQUNBOztBQUNGLFNBQUssUUFBTDtBQUNFRCxNQUFBQSxTQUFTLEdBQUdFLE1BQVo7QUFDQTs7QUFDRixTQUFLLFNBQUw7QUFDRUYsTUFBQUEsU0FBUyxHQUFHRyxPQUFaO0FBQ0E7O0FBQ0YsU0FBSyxVQUFMO0FBQ0VILE1BQUFBLFNBQVMsR0FBR1AsS0FBWjtBQUNBQSxNQUFBQSxLQUFLLEdBQUdPLFNBQVMsRUFBakI7QUFDQTs7QUFDRixTQUFLLFFBQUw7QUFDRSxVQUFJUCxLQUFKLEVBQVdFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxLQUFkO0FBQ1hPLE1BQUFBLFNBQVMsR0FBR1IsZUFBWjtBQUNBOztBQUNGO0FBQ0U7QUFuQko7O0FBc0JBLFNBQU87QUFDTFksSUFBQUEsR0FBRyxFQUFFLGFBQUNDLElBQUQ7QUFBQSxVQUFPQyxHQUFQLHVFQUFhYixLQUFiO0FBQUEsYUFBdUJhLEdBQXZCO0FBQUEsS0FEQTtBQUVMQyxJQUFBQSxHQUFHLEVBQUUsYUFBQ0YsSUFBRCxFQUFPQyxHQUFQLEVBQVlFLFFBQVo7QUFBQSxhQUF5QlIsU0FBUyxDQUFDTSxHQUFELEVBQU1FLFFBQU4sQ0FBbEM7QUFBQSxLQUZBO0FBR0xWLElBQUFBLE9BQU8sRUFDTEMsSUFBSSxLQUFLLFFBQVQsSUFBcUJBLElBQUksS0FBSyxXQUE5QixHQUNJLFVBQUNNLElBQUQsRUFBT0ksR0FBUCxFQUFZQyxVQUFaLEVBQTJCO0FBQ3pCLFVBQUlMLElBQUksQ0FBQ0ksR0FBRCxDQUFKLEtBQWNoQixLQUFsQixFQUF5QjtBQUN2QixZQUFNa0IsUUFBUSxHQUFHdEIsV0FBVyxDQUFDb0IsR0FBRCxDQUE1Qjs7QUFFQSxZQUFJSixJQUFJLENBQUNPLFlBQUwsQ0FBa0JELFFBQWxCLENBQUosRUFBaUM7QUFDL0IsY0FBTUUsU0FBUyxHQUFHUixJQUFJLENBQUNTLFlBQUwsQ0FBa0JILFFBQWxCLENBQWxCO0FBQ0FOLFVBQUFBLElBQUksQ0FBQ0ksR0FBRCxDQUFKLEdBQ0VJLFNBQVMsS0FBSyxFQUFkLElBQW9CYixTQUFTLEtBQUtHLE9BQWxDLEdBQTRDLElBQTVDLEdBQW1EVSxTQURyRDtBQUVEO0FBQ0Y7O0FBRUQsYUFBT2YsT0FBTyxJQUFJQSxPQUFPLENBQUNPLElBQUQsRUFBT0ksR0FBUCxFQUFZQyxVQUFaLENBQXpCO0FBQ0QsS0FiTCxHQWNJWjtBQWxCRCxHQUFQO0FBb0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuXG5jb25zdCBkZWZhdWx0VHJhbnNmb3JtID0gdiA9PiB2O1xuXG5jb25zdCBvYmplY3RUcmFuc2Zvcm0gPSB2YWx1ZSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoYEFzc2lnbmVkIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0OiAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgJiYgT2JqZWN0LmZyZWV6ZSh2YWx1ZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9wZXJ0eSh2YWx1ZSwgY29ubmVjdCkge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZXQgdHJhbnNmb3JtID0gZGVmYXVsdFRyYW5zZm9ybTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICB0cmFuc2Zvcm0gPSBTdHJpbmc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICB0cmFuc2Zvcm0gPSBOdW1iZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgdHJhbnNmb3JtID0gQm9vbGVhbjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgdHJhbnNmb3JtID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IHRyYW5zZm9ybSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgaWYgKHZhbHVlKSBPYmplY3QuZnJlZXplKHZhbHVlKTtcbiAgICAgIHRyYW5zZm9ybSA9IG9iamVjdFRyYW5zZm9ybTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoaG9zdCwgdmFsID0gdmFsdWUpID0+IHZhbCxcbiAgICBzZXQ6IChob3N0LCB2YWwsIG9sZFZhbHVlKSA9PiB0cmFuc2Zvcm0odmFsLCBvbGRWYWx1ZSksXG4gICAgY29ubmVjdDpcbiAgICAgIHR5cGUgIT09IFwib2JqZWN0XCIgJiYgdHlwZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IChob3N0LCBrZXksIGludmFsaWRhdGUpID0+IHtcbiAgICAgICAgICAgIGlmIChob3N0W2tleV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gY2FtZWxUb0Rhc2goa2V5KTtcblxuICAgICAgICAgICAgICBpZiAoaG9zdC5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gaG9zdC5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgICAgIGhvc3Rba2V5XSA9XG4gICAgICAgICAgICAgICAgICBhdHRyVmFsdWUgPT09IFwiXCIgJiYgdHJhbnNmb3JtID09PSBCb29sZWFuID8gdHJ1ZSA6IGF0dHJWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdCAmJiBjb25uZWN0KGhvc3QsIGtleSwgaW52YWxpZGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICA6IGNvbm5lY3QsXG4gIH07XG59XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/property.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/render.js":
/*!********************************************!*\
  !*** ./node_modules/hybrids/esm/render.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return render; });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction render(fn) {\n  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof fn !== \"function\") {\n    throw TypeError(\"The first argument must be a function: \".concat(_typeof(fn)));\n  }\n\n  var options = _objectSpread({\n    shadowRoot: true\n  }, customOptions);\n\n  var shadowRootInit = {\n    mode: \"open\"\n  };\n\n  if (_typeof(options.shadowRoot) === \"object\") {\n    Object.assign(shadowRootInit, options.shadowRoot);\n  }\n\n  return {\n    get: function get(host) {\n      var update = fn(host);\n      var target = host;\n\n      if (options.shadowRoot) {\n        if (!host.shadowRoot) host.attachShadow(shadowRootInit);\n        target = host.shadowRoot;\n      }\n\n      return function flush() {\n        update(host, target);\n        return target;\n      };\n    },\n    observe: function observe(host, flush) {\n      flush();\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXIuanMiXSwibmFtZXMiOlsicmVuZGVyIiwiZm4iLCJjdXN0b21PcHRpb25zIiwiVHlwZUVycm9yIiwib3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJzaGFkb3dSb290SW5pdCIsIm1vZGUiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXQiLCJob3N0IiwidXBkYXRlIiwidGFyZ2V0IiwiYXR0YWNoU2hhZG93IiwiZmx1c2giLCJvYnNlcnZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGVBQWUsU0FBU0EsTUFBVCxDQUFnQkMsRUFBaEIsRUFBd0M7QUFBQSxNQUFwQkMsYUFBb0IsdUVBQUosRUFBSTs7QUFDckQsTUFBSSxPQUFPRCxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUIsVUFBTUUsU0FBUywwREFBa0RGLEVBQWxELEdBQWY7QUFDRDs7QUFFRCxNQUFNRyxPQUFPO0FBQUtDLElBQUFBLFVBQVUsRUFBRTtBQUFqQixLQUEwQkgsYUFBMUIsQ0FBYjs7QUFDQSxNQUFNSSxjQUFjLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBdkI7O0FBRUEsTUFBSSxRQUFPSCxPQUFPLENBQUNDLFVBQWYsTUFBOEIsUUFBbEMsRUFBNEM7QUFDMUNHLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxjQUFkLEVBQThCRixPQUFPLENBQUNDLFVBQXRDO0FBQ0Q7O0FBRUQsU0FBTztBQUNMSyxJQUFBQSxHQURLLGVBQ0RDLElBREMsRUFDSztBQUNSLFVBQU1DLE1BQU0sR0FBR1gsRUFBRSxDQUFDVSxJQUFELENBQWpCO0FBQ0EsVUFBSUUsTUFBTSxHQUFHRixJQUFiOztBQUVBLFVBQUlQLE9BQU8sQ0FBQ0MsVUFBWixFQUF3QjtBQUN0QixZQUFJLENBQUNNLElBQUksQ0FBQ04sVUFBVixFQUFzQk0sSUFBSSxDQUFDRyxZQUFMLENBQWtCUixjQUFsQjtBQUN0Qk8sUUFBQUEsTUFBTSxHQUFHRixJQUFJLENBQUNOLFVBQWQ7QUFDRDs7QUFFRCxhQUFPLFNBQVNVLEtBQVQsR0FBaUI7QUFDdEJILFFBQUFBLE1BQU0sQ0FBQ0QsSUFBRCxFQUFPRSxNQUFQLENBQU47QUFDQSxlQUFPQSxNQUFQO0FBQ0QsT0FIRDtBQUlELEtBZEk7QUFlTEcsSUFBQUEsT0FmSyxtQkFlR0wsSUFmSCxFQWVTSSxLQWZULEVBZWdCO0FBQ25CQSxNQUFBQSxLQUFLO0FBQ047QUFqQkksR0FBUDtBQW1CRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihmbiwgY3VzdG9tT3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IFR5cGVFcnJvcihgVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbjogJHt0eXBlb2YgZm59YCk7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0geyBzaGFkb3dSb290OiB0cnVlLCAuLi5jdXN0b21PcHRpb25zIH07XG4gIGNvbnN0IHNoYWRvd1Jvb3RJbml0ID0geyBtb2RlOiBcIm9wZW5cIiB9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5zaGFkb3dSb290ID09PSBcIm9iamVjdFwiKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzaGFkb3dSb290SW5pdCwgb3B0aW9ucy5zaGFkb3dSb290KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0KGhvc3QpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IGZuKGhvc3QpO1xuICAgICAgbGV0IHRhcmdldCA9IGhvc3Q7XG5cbiAgICAgIGlmIChvcHRpb25zLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgaWYgKCFob3N0LnNoYWRvd1Jvb3QpIGhvc3QuYXR0YWNoU2hhZG93KHNoYWRvd1Jvb3RJbml0KTtcbiAgICAgICAgdGFyZ2V0ID0gaG9zdC5zaGFkb3dSb290O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHVwZGF0ZShob3N0LCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9ic2VydmUoaG9zdCwgZmx1c2gpIHtcbiAgICAgIGZsdXNoKCk7XG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vcmVuZGVyLmpzP2E0YWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBLDBDQUEwQyxnQ0FBZ0Msb0NBQW9DLG9EQUFvRCw4REFBOEQsZ0VBQWdFLEVBQUUsRUFBRSxnQ0FBZ0MsRUFBRSxhQUFhOztBQUVuVixnQ0FBZ0MsZ0JBQWdCLHNCQUFzQixPQUFPLHVEQUF1RCxhQUFhLHVEQUF1RCwyQ0FBMkMsRUFBRSxFQUFFLEVBQUUsNkNBQTZDLDJFQUEyRSxFQUFFLE9BQU8saURBQWlELGtGQUFrRixFQUFFLEVBQUUsRUFBRSxFQUFFLGVBQWU7O0FBRXBoQiwyQ0FBMkMsa0JBQWtCLGtDQUFrQyxxRUFBcUUsRUFBRSxFQUFFLE9BQU8sa0JBQWtCLEVBQUUsWUFBWTs7QUFFL00sdUJBQXVCLDJCQUEyQiwyRUFBMkUsa0NBQWtDLG1CQUFtQixHQUFHLEVBQUUsT0FBTyxrQ0FBa0MsOEhBQThILEdBQUcsRUFBRSxxQkFBcUI7O0FBRXpXO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxjQUFjIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3JlbmRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihmbikge1xuICB2YXIgY3VzdG9tT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbjogXCIuY29uY2F0KF90eXBlb2YoZm4pKSk7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe1xuICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgfSwgY3VzdG9tT3B0aW9ucyk7XG5cbiAgdmFyIHNoYWRvd1Jvb3RJbml0ID0ge1xuICAgIG1vZGU6IFwib3BlblwiXG4gIH07XG5cbiAgaWYgKF90eXBlb2Yob3B0aW9ucy5zaGFkb3dSb290KSA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5hc3NpZ24oc2hhZG93Um9vdEluaXQsIG9wdGlvbnMuc2hhZG93Um9vdCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KGhvc3QpIHtcbiAgICAgIHZhciB1cGRhdGUgPSBmbihob3N0KTtcbiAgICAgIHZhciB0YXJnZXQgPSBob3N0O1xuXG4gICAgICBpZiAob3B0aW9ucy5zaGFkb3dSb290KSB7XG4gICAgICAgIGlmICghaG9zdC5zaGFkb3dSb290KSBob3N0LmF0dGFjaFNoYWRvdyhzaGFkb3dSb290SW5pdCk7XG4gICAgICAgIHRhcmdldCA9IGhvc3Quc2hhZG93Um9vdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICB1cGRhdGUoaG9zdCwgdGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBvYnNlcnZlOiBmdW5jdGlvbiBvYnNlcnZlKGhvc3QsIGZsdXNoKSB7XG4gICAgICBmbHVzaCgpO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5eVpXNWtaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ1WkdWeUlpd2labTRpTENKamRYTjBiMjFQY0hScGIyNXpJaXdpVkhsd1pVVnljbTl5SWl3aWIzQjBhVzl1Y3lJc0luTm9ZV1J2ZDFKdmIzUWlMQ0p6YUdGa2IzZFNiMjkwU1c1cGRDSXNJbTF2WkdVaUxDSlBZbXBsWTNRaUxDSmhjM05wWjI0aUxDSm5aWFFpTENKb2IzTjBJaXdpZFhCa1lYUmxJaXdpZEdGeVoyVjBJaXdpWVhSMFlXTm9VMmhoWkc5M0lpd2labXgxYzJnaUxDSnZZbk5sY25abElsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenRCUVVGQkxHVkJRV1VzVTBGQlUwRXNUVUZCVkN4RFFVRm5Ra01zUlVGQmFFSXNSVUZCZDBNN1FVRkJRU3hOUVVGd1FrTXNZVUZCYjBJc2RVVkJRVW9zUlVGQlNUczdRVUZEY2tRc1RVRkJTU3hQUVVGUFJDeEZRVUZRTEV0QlFXTXNWVUZCYkVJc1JVRkJPRUk3UVVGRE5VSXNWVUZCVFVVc1UwRkJVeXd3UkVGQmEwUkdMRVZCUVd4RUxFZEJRV1k3UVVGRFJEczdRVUZGUkN4TlFVRk5SeXhQUVVGUE8wRkJRVXRETEVsQlFVRkJMRlZCUVZVc1JVRkJSVHRCUVVGcVFpeExRVUV3UWtnc1lVRkJNVUlzUTBGQllqczdRVUZEUVN4TlFVRk5TU3hqUVVGakxFZEJRVWM3UVVGQlJVTXNTVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVklzUjBGQmRrSTdPMEZCUlVFc1RVRkJTU3hSUVVGUFNDeFBRVUZQTEVOQlFVTkRMRlZCUVdZc1RVRkJPRUlzVVVGQmJFTXNSVUZCTkVNN1FVRkRNVU5ITEVsQlFVRkJMRTFCUVUwc1EwRkJRME1zVFVGQlVDeERRVUZqU0N4alFVRmtMRVZCUVRoQ1JpeFBRVUZQTEVOQlFVTkRMRlZCUVhSRE8wRkJRMFE3TzBGQlJVUXNVMEZCVHp0QlFVTk1TeXhKUVVGQlFTeEhRVVJMTEdWQlEwUkRMRWxCUkVNc1JVRkRTenRCUVVOU0xGVkJRVTFETEUxQlFVMHNSMEZCUjFnc1JVRkJSU3hEUVVGRFZTeEpRVUZFTEVOQlFXcENPMEZCUTBFc1ZVRkJTVVVzVFVGQlRTeEhRVUZIUml4SlFVRmlPenRCUVVWQkxGVkJRVWxRTEU5QlFVOHNRMEZCUTBNc1ZVRkJXaXhGUVVGM1FqdEJRVU4wUWl4WlFVRkpMRU5CUVVOTkxFbEJRVWtzUTBGQlEwNHNWVUZCVml4RlFVRnpRazBzU1VGQlNTeERRVUZEUnl4WlFVRk1MRU5CUVd0Q1VpeGpRVUZzUWp0QlFVTjBRazhzVVVGQlFVRXNUVUZCVFN4SFFVRkhSaXhKUVVGSkxFTkJRVU5PTEZWQlFXUTdRVUZEUkRzN1FVRkZSQ3hoUVVGUExGTkJRVk5WTEV0QlFWUXNSMEZCYVVJN1FVRkRkRUpJTEZGQlFVRkJMRTFCUVUwc1EwRkJRMFFzU1VGQlJDeEZRVUZQUlN4TlFVRlFMRU5CUVU0N1FVRkRRU3hsUVVGUFFTeE5RVUZRTzBGQlEwUXNUMEZJUkR0QlFVbEVMRXRCWkVrN1FVRmxURWNzU1VGQlFVRXNUMEZtU3l4dFFrRmxSMHdzU1VGbVNDeEZRV1ZUU1N4TFFXWlVMRVZCWldkQ08wRkJRMjVDUVN4TlFVRkJRU3hMUVVGTE8wRkJRMDQ3UVVGcVFra3NSMEZCVUR0QlFXMUNSQ0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJSEpsYm1SbGNpaG1iaXdnWTNWemRHOXRUM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWm00Z0lUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUhSb2NtOTNJRlI1Y0dWRmNuSnZjaWhnVkdobElHWnBjbk4wSUdGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmpvZ0pIdDBlWEJsYjJZZ1ptNTlZQ2s3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0J2Y0hScGIyNXpJRDBnZXlCemFHRmtiM2RTYjI5ME9pQjBjblZsTENBdUxpNWpkWE4wYjIxUGNIUnBiMjV6SUgwN1hHNGdJR052Ym5OMElITm9ZV1J2ZDFKdmIzUkpibWwwSUQwZ2V5QnRiMlJsT2lCY0ltOXdaVzVjSWlCOU8xeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3k1emFHRmtiM2RTYjI5MElEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNGdJQ0FnVDJKcVpXTjBMbUZ6YzJsbmJpaHphR0ZrYjNkU2IyOTBTVzVwZEN3Z2IzQjBhVzl1Y3k1emFHRmtiM2RTYjI5MEtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ1oyVjBLR2h2YzNRcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhWd1pHRjBaU0E5SUdadUtHaHZjM1FwTzF4dUlDQWdJQ0FnYkdWMElIUmhjbWRsZENBOUlHaHZjM1E3WEc1Y2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuTm9ZV1J2ZDFKdmIzUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm9iM04wTG5Ob1lXUnZkMUp2YjNRcElHaHZjM1F1WVhSMFlXTm9VMmhoWkc5M0tITm9ZV1J2ZDFKdmIzUkpibWwwS1R0Y2JpQWdJQ0FnSUNBZ2RHRnlaMlYwSUQwZ2FHOXpkQzV6YUdGa2IzZFNiMjkwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWm14MWMyZ29LU0I3WEc0Z0lDQWdJQ0FnSUhWd1pHRjBaU2hvYjNOMExDQjBZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5TEZ4dUlDQWdJRzlpYzJWeWRtVW9hRzl6ZEN3Z1pteDFjMmdwSUh0Y2JpQWdJQ0FnSUdac2RYTm9LQ2s3WEc0Z0lDQWdmU3hjYmlBZ2ZUdGNibjFjYmlKZGZRPT0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/render.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/store.js":
/*!*******************************************!*\
  !*** ./node_modules/hybrids/esm/store.js ***!
  \*******************************************/
/*! exports provided: connect, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"connect\", function() { return connect; });\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache.js */ \"./node_modules/hybrids/esm/cache.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/hybrids/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-use-before-define */\n\n\n/* istanbul ignore next */\n\ntry {\n  \"development\";\n} catch (e) {\n  var process = {\n    env: {\n      NODE_ENV: 'production'\n    }\n  };\n} // eslint-disable-line\n\n\nvar connect = \"__store__connect__\".concat(Date.now(), \"__\");\nvar definitions = new WeakMap();\n\nfunction resolve(config, model, lastModel) {\n  if (lastModel) definitions.set(lastModel, null);\n  definitions.set(model, config);\n  return model;\n}\n\nfunction resolveWithInvalidate(config, model, lastModel) {\n  resolve(config, model, lastModel);\n\n  if (config.external && model || !lastModel || error(model)) {\n    config.invalidate();\n  }\n\n  return model;\n}\n\nfunction sync(config, id, model, invalidate) {\n  _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"set\"](config, id, invalidate ? resolveWithInvalidate : resolve, model, true);\n  return model;\n}\n\nvar currentTimestamp;\n\nfunction getCurrentTimestamp() {\n  if (!currentTimestamp) {\n    currentTimestamp = Date.now();\n    requestAnimationFrame(function () {\n      currentTimestamp = undefined;\n    });\n  }\n\n  return currentTimestamp;\n}\n\nvar timestamps = new WeakMap();\n\nfunction getTimestamp(model) {\n  var timestamp = timestamps.get(model);\n\n  if (!timestamp) {\n    timestamp = getCurrentTimestamp();\n    timestamps.set(model, timestamp);\n  }\n\n  return timestamp;\n}\n\nfunction setTimestamp(model) {\n  timestamps.set(model, getCurrentTimestamp());\n  return model;\n}\n\nfunction setupStorage(storage) {\n  if (typeof storage === \"function\") storage = {\n    get: storage\n  };\n\n  var result = _objectSpread({\n    cache: true\n  }, storage);\n\n  if (result.cache === false || result.cache === 0) {\n    result.validate = function (cachedModel) {\n      return !cachedModel || getTimestamp(cachedModel) === getCurrentTimestamp();\n    };\n  } else if (typeof result.cache === \"number\") {\n    result.validate = function (cachedModel) {\n      return !cachedModel || getTimestamp(cachedModel) + result.cache > getCurrentTimestamp();\n    };\n  } else if (result.cache !== true) {\n    throw TypeError(\"Storage cache property must be a boolean or number: \".concat(_typeof(result.cache)));\n  }\n\n  if (!result.get && result.list) {\n    result.get = function () {};\n  }\n\n  return Object.freeze(result);\n}\n\nfunction memoryStorage(config) {\n  return {\n    get: config.enumerable ? function () {} : function () {\n      return config.create({});\n    },\n    set: config.enumerable ? function (id, values) {\n      return values;\n    } : function (id, values) {\n      return values === null ? {\n        id: id\n      } : values;\n    },\n    list: config.enumerable && function list(id) {\n      if (id) {\n        throw TypeError(\"Memory-based model definition does not support id\");\n      }\n\n      return _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"getEntries\"](config).reduce(function (acc, _ref) {\n        var key = _ref.key,\n            value = _ref.value;\n        if (key === config) return acc;\n        if (value && !error(value)) acc.push(key);\n        return acc;\n      }, []);\n    }\n  };\n}\n\nfunction bootstrap(Model, nested) {\n  if (Array.isArray(Model)) {\n    return setupListModel(Model[0], nested);\n  }\n\n  return setupModel(Model, nested);\n}\n\nfunction getTypeConstructor(type, key) {\n  switch (type) {\n    case \"string\":\n      return function (v) {\n        return v !== undefined && v !== null ? String(v) : \"\";\n      };\n\n    case \"number\":\n      return Number;\n\n    case \"boolean\":\n      return Boolean;\n\n    default:\n      throw TypeError(\"The value of the '\".concat(key, \"' must be a string, number or boolean: \").concat(type));\n  }\n}\n\nvar stateSetter = function stateSetter(h, v) {\n  return v;\n};\n\nfunction setModelState(model, state) {\n  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : model;\n  _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"set\"](model, \"state\", stateSetter, {\n    state: state,\n    value: value\n  }, true);\n  return model;\n}\n\nvar stateGetter = function stateGetter(model) {\n  var v = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    state: \"ready\",\n    value: model\n  };\n  return v;\n};\n\nfunction getModelState(model) {\n  return _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"get\"](model, \"state\", stateGetter);\n} // UUID v4 generator thanks to https://gist.github.com/jed/982883\n\n\nfunction uuid(temp) {\n  return temp ? // eslint-disable-next-line no-bitwise, no-mixed-operators\n  (temp ^ Math.random() * 16 >> temp / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\n}\n\nvar validationMap = new WeakMap();\n\nfunction resolveKey(Model, key, config) {\n  var defaultValue = config.model[key];\n\n  var type = _typeof(config.model[key]);\n\n  if (defaultValue instanceof String || defaultValue instanceof Number) {\n    var check = validationMap.get(defaultValue);\n\n    if (!check) {\n      throw TypeError(stringifyModel(Model, \"You must use primitive \".concat(_typeof(defaultValue.valueOf()), \" value for '\").concat(key, \"' property of the provided model definition\")));\n    }\n\n    defaultValue = defaultValue.valueOf();\n    type = _typeof(defaultValue);\n    config.checks.set(key, check);\n  }\n\n  return {\n    defaultValue: defaultValue,\n    type: type\n  };\n}\n\nfunction stringifyModel(Model, msg) {\n  return \"\".concat(msg, \":\\n\\n\").concat(JSON.stringify(Model, function (key, value) {\n    if (key === connect) return undefined;\n    return value;\n  }, 2), \"\\n\\n\");\n}\n\nvar _ = function _(h, v) {\n  return v;\n};\n\nvar resolvedPromise = Promise.resolve();\nvar configs = new WeakMap();\n\nfunction setupModel(Model, nested) {\n  if (_typeof(Model) !== \"object\" || Model === null) {\n    throw TypeError(\"Model definition must be an object: \".concat(_typeof(Model)));\n  }\n\n  var config = configs.get(Model);\n\n  if (config && !config.enumerable) {\n    if (nested && !config.nested) {\n      throw TypeError(stringifyModel(Model, \"Provided model definition for nested object already used as a root definition\"));\n    }\n\n    if (!nested && config.nested) {\n      throw TypeError(stringifyModel(Model, \"Nested model definition cannot be used outside of the parent definition\"));\n    }\n  }\n\n  if (!config) {\n    var storage = Model[connect];\n    if (_typeof(storage) === \"object\") Object.freeze(storage);\n    var invalidatePromise;\n    var _placeholder = {};\n    var enumerable = hasOwnProperty.call(Model, \"id\");\n    var checks = new Map();\n    config = {\n      model: Model,\n      external: !!storage,\n      enumerable: enumerable,\n      nested: !enumerable && nested,\n      placeholder: function placeholder(id) {\n        return Object.freeze(Object.assign(Object.create(_placeholder), {\n          id: id\n        }));\n      },\n      isInstance: function isInstance(model) {\n        return Object.getPrototypeOf(model) !== _placeholder;\n      },\n      invalidate: function invalidate() {\n        if (!invalidatePromise) {\n          invalidatePromise = resolvedPromise.then(function () {\n            _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"invalidate\"](config, config, true);\n            invalidatePromise = null;\n          });\n        }\n      },\n      checks: checks\n    };\n    config.storage = setupStorage(storage || memoryStorage(config, Model));\n    var transform = Object.keys(Object.freeze(Model)).filter(function (key) {\n      return key !== connect;\n    }).map(function (key) {\n      if (key !== \"id\") {\n        Object.defineProperty(_placeholder, key, {\n          get: function get() {\n            throw Error(\"Model instance in \".concat(getModelState(this).state, \" state - use store.pending(), store.error(), or store.ready() guards\"));\n          },\n          enumerable: true\n        });\n      }\n\n      if (key === \"id\") {\n        if (Model[key] !== true) {\n          throw TypeError(\"The 'id' property in model definition must be set to 'true' or not be defined\");\n        }\n\n        return function (model, data, lastModel) {\n          var id;\n\n          if (lastModel) {\n            id = lastModel.id;\n          } else if (hasOwnProperty.call(data, \"id\")) {\n            id = String(data.id);\n          } else {\n            id = uuid();\n          }\n\n          Object.defineProperty(model, \"id\", {\n            value: id,\n            enumerable: true\n          });\n        };\n      }\n\n      var _resolveKey = resolveKey(Model, key, config),\n          defaultValue = _resolveKey.defaultValue,\n          type = _resolveKey.type;\n\n      switch (type) {\n        case \"function\":\n          return function (model) {\n            Object.defineProperty(model, key, {\n              get: function get() {\n                return _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"get\"](this, key, defaultValue);\n              }\n            });\n          };\n\n        case \"object\":\n          {\n            if (defaultValue === null) {\n              throw TypeError(\"The value for the '\".concat(key, \"' must be an object instance: \").concat(defaultValue));\n            }\n\n            var isArray = Array.isArray(defaultValue);\n\n            if (isArray) {\n              var nestedType = _typeof(defaultValue[0]);\n\n              if (nestedType !== \"object\") {\n                var Constructor = getTypeConstructor(nestedType, key);\n                var defaultArray = Object.freeze(defaultValue.map(Constructor));\n                return function (model, data, lastModel) {\n                  if (hasOwnProperty.call(data, key)) {\n                    if (!Array.isArray(data[key])) {\n                      throw TypeError(\"The value for '\".concat(key, \"' property must be an array: \").concat(_typeof(data[key])));\n                    }\n\n                    model[key] = Object.freeze(data[key].map(Constructor));\n                  } else if (lastModel && hasOwnProperty.call(lastModel, key)) {\n                    model[key] = lastModel[key];\n                  } else {\n                    model[key] = defaultArray;\n                  }\n                };\n              }\n\n              var localConfig = bootstrap(defaultValue, true);\n\n              if (localConfig.enumerable && defaultValue[1]) {\n                var nestedOptions = defaultValue[1];\n\n                if (_typeof(nestedOptions) !== \"object\") {\n                  throw TypeError(\"Options for '\".concat(key, \"' array property must be an object instance: \").concat(_typeof(nestedOptions)));\n                }\n\n                if (nestedOptions.loose) {\n                  config.contexts = config.contexts || new Set();\n                  config.contexts.add(bootstrap(defaultValue[0]));\n                }\n              }\n\n              return function (model, data, lastModel) {\n                if (hasOwnProperty.call(data, key)) {\n                  if (!Array.isArray(data[key])) {\n                    throw TypeError(\"The value for '\".concat(key, \"' property must be an array: \").concat(_typeof(data[key])));\n                  }\n\n                  model[key] = localConfig.create(data[key]);\n                } else {\n                  model[key] = lastModel && lastModel[key] || !localConfig.enumerable && localConfig.create(defaultValue) || [];\n                }\n              };\n            }\n\n            var nestedConfig = bootstrap(defaultValue, true);\n\n            if (nestedConfig.enumerable || nestedConfig.external) {\n              return function (model, data, lastModel) {\n                var resultModel;\n\n                if (hasOwnProperty.call(data, key)) {\n                  var nestedData = data[key];\n\n                  if (_typeof(nestedData) !== \"object\" || nestedData === null) {\n                    if (nestedData !== undefined && nestedData !== null) {\n                      resultModel = {\n                        id: nestedData\n                      };\n                    }\n                  } else {\n                    var dataConfig = definitions.get(nestedData);\n\n                    if (dataConfig) {\n                      if (dataConfig.model !== defaultValue) {\n                        throw TypeError(\"Model instance must match the definition\");\n                      }\n\n                      resultModel = nestedData;\n                    } else {\n                      resultModel = nestedConfig.create(nestedData);\n                      sync(nestedConfig, resultModel.id, resultModel);\n                    }\n                  }\n                } else {\n                  resultModel = lastModel && lastModel[key];\n                }\n\n                if (resultModel) {\n                  var id = resultModel.id;\n                  Object.defineProperty(model, key, {\n                    get: function get() {\n                      return _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"get\"](this, key, pending(this) ? _ : function () {\n                        return _get(defaultValue, id);\n                      });\n                    },\n                    enumerable: true\n                  });\n                } else {\n                  model[key] = undefined;\n                }\n              };\n            }\n\n            return function (model, data, lastModel) {\n              if (hasOwnProperty.call(data, key)) {\n                model[key] = nestedConfig.create(data[key], lastModel && lastModel[key]);\n              } else {\n                model[key] = lastModel ? lastModel[key] : nestedConfig.create({});\n              }\n            };\n          }\n        // eslint-disable-next-line no-fallthrough\n\n        default:\n          {\n            var _Constructor = getTypeConstructor(type, key);\n\n            return function (model, data, lastModel) {\n              if (hasOwnProperty.call(data, key)) {\n                model[key] = _Constructor(data[key]);\n              } else if (lastModel && hasOwnProperty.call(lastModel, key)) {\n                model[key] = lastModel[key];\n              } else {\n                model[key] = defaultValue;\n              }\n            };\n          }\n      }\n    });\n\n    config.create = function create(data, lastModel) {\n      if (data === null) return null;\n\n      if (_typeof(data) !== \"object\") {\n        throw TypeError(\"Model values must be an object instance: \".concat(data));\n      }\n\n      var model = transform.reduce(function (acc, fn) {\n        fn(acc, data, lastModel);\n        return acc;\n      }, {});\n      definitions.set(model, config);\n      _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"storePointer\"].set(model, store);\n      return Object.freeze(model);\n    };\n\n    Object.freeze(_placeholder);\n    configs.set(Model, Object.freeze(config));\n  }\n\n  return config;\n}\n\nvar listPlaceholderPrototype = Object.getOwnPropertyNames(Array.prototype).reduce(function (acc, key) {\n  if (key === \"length\" || key === \"constructor\") return acc;\n  Object.defineProperty(acc, key, {\n    get: function get() {\n      throw Error(\"Model list instance in \".concat(getModelState(this).state, \" state - use store.pending(), store.error(), or store.ready() guards\"));\n    }\n  });\n  return acc;\n}, []);\nvar lists = new WeakMap();\n\nfunction setupListModel(Model, nested) {\n  var config = lists.get(Model);\n\n  if (config && !config.enumerable) {\n    if (!nested && config.nested) {\n      throw TypeError(stringifyModel(Model, \"Nested model definition cannot be used outside of the parent definition\"));\n    }\n  }\n\n  if (!config) {\n    var modelConfig = setupModel(Model);\n    var contexts = new Set();\n    contexts.add(modelConfig);\n\n    if (!nested) {\n      if (!modelConfig.enumerable) {\n        throw TypeError(stringifyModel(Model, \"Provided model definition does not support listing (it must be enumerable - set `id` property to `true`)\"));\n      }\n\n      if (!modelConfig.storage.list) {\n        throw TypeError(stringifyModel(Model, \"Provided model definition storage does not support `list` action\"));\n      }\n    }\n\n    config = {\n      list: true,\n      nested: !modelConfig.enumerable && nested,\n      model: Model,\n      contexts: contexts,\n      enumerable: modelConfig.enumerable,\n      storage: setupStorage({\n        cache: modelConfig.storage.cache,\n        get: !nested && function (id) {\n          return modelConfig.storage.list(id);\n        }\n      }),\n      placeholder: function placeholder() {\n        return Object.freeze(Object.create(listPlaceholderPrototype));\n      },\n      isInstance: function isInstance(model) {\n        return Object.getPrototypeOf(model) !== listPlaceholderPrototype;\n      },\n      create: function create(items) {\n        var result = items.reduce(function (acc, data) {\n          var id = data;\n\n          if (_typeof(data) === \"object\" && data !== null) {\n            id = data.id;\n            var dataConfig = definitions.get(data);\n            var model = data;\n\n            if (dataConfig) {\n              if (dataConfig.model !== Model) {\n                throw TypeError(\"Model instance must match the definition\");\n              }\n            } else {\n              model = modelConfig.create(data);\n\n              if (modelConfig.enumerable) {\n                id = model.id;\n                sync(modelConfig, id, model);\n              }\n            }\n\n            if (!modelConfig.enumerable) {\n              acc.push(model);\n            }\n          } else if (!modelConfig.enumerable) {\n            throw TypeError(\"Model instance must be an object: \".concat(_typeof(data)));\n          }\n\n          if (modelConfig.enumerable) {\n            var key = acc.length;\n            Object.defineProperty(acc, key, {\n              get: function get() {\n                return _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"get\"](this, key, pending(this) ? _ : function () {\n                  return _get(Model, id);\n                });\n              },\n              enumerable: true\n            });\n          }\n\n          return acc;\n        }, []);\n        definitions.set(result, config);\n        _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"storePointer\"].set(result, store);\n        return Object.freeze(result);\n      }\n    };\n    lists.set(Model, Object.freeze(config));\n  }\n\n  return config;\n}\n\nfunction resolveTimestamp(h, v) {\n  return v || getCurrentTimestamp();\n}\n\nfunction stringifyId(id) {\n  switch (_typeof(id)) {\n    case \"object\":\n      return JSON.stringify(Object.keys(id).sort().reduce(function (acc, key) {\n        if (_typeof(id[key]) === \"object\" && id[key] !== null) {\n          throw TypeError(\"You must use primitive value for '\".concat(key, \"' key: \").concat(_typeof(id[key])));\n        }\n\n        acc[key] = id[key];\n        return acc;\n      }, {}));\n\n    case \"undefined\":\n      return undefined;\n\n    default:\n      return String(id);\n  }\n}\n\nfunction mapError(model, err, suppressLog) {\n  /* istanbul ignore next */\n  if ( true && suppressLog !== false) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n  }\n\n  return setModelState(model, \"error\", err);\n}\n\nfunction _get(Model, id) {\n  var config = bootstrap(Model);\n  var stringId;\n\n  if (!config.storage.get) {\n    throw TypeError(stringifyModel(Model, \"Provided model definition does not support 'get' method\"));\n  }\n\n  if (config.enumerable) {\n    stringId = stringifyId(id);\n\n    if (!config.list && !stringId) {\n      throw TypeError(stringifyModel(Model, \"Provided model definition requires non-empty id: \\\"\".concat(stringId, \"\\\"\")));\n    }\n  } else if (id !== undefined) {\n    throw TypeError(stringifyModel(Model, \"Provided model definition does not support id\"));\n  }\n\n  return _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"get\"](config, stringId, function (h, cachedModel) {\n    if (cachedModel && pending(cachedModel)) return cachedModel;\n    var validContexts = true;\n\n    if (config.contexts) {\n      config.contexts.forEach(function (context) {\n        if (_cache_js__WEBPACK_IMPORTED_MODULE_0__[\"get\"](context, context, resolveTimestamp) === getCurrentTimestamp()) {\n          validContexts = false;\n        }\n      });\n    }\n\n    if (validContexts && cachedModel && (config.storage.cache === true || config.storage.validate(cachedModel))) {\n      return cachedModel;\n    }\n\n    try {\n      var result = config.storage.get(id);\n\n      if (_typeof(result) !== \"object\" || result === null) {\n        throw Error(\"Model instance \".concat(stringId !== undefined ? \"with '\".concat(stringId, \"' id\") : \"\", \" does not exist\"));\n      }\n\n      if (result instanceof Promise) {\n        result = result.then(function (data) {\n          if (_typeof(data) !== \"object\" || data === null) {\n            throw Error(\"Model instance \".concat(stringId !== undefined ? \"with '\".concat(stringId, \"' id\") : \"\", \" does not exist\"));\n          }\n\n          return sync(config, stringId, config.create(!config.list && stringId ? _objectSpread({}, data, {\n            id: stringId\n          }) : data));\n        }).catch(function (e) {\n          return sync(config, stringId, mapError(cachedModel || config.placeholder(stringId), e));\n        });\n        return setModelState(cachedModel || config.placeholder(stringId), \"pending\", result);\n      }\n\n      if (cachedModel) definitions.set(cachedModel, null);\n      return setTimestamp(config.create(!config.list && stringId ? _objectSpread({}, result, {\n        id: stringId\n      }) : result));\n    } catch (e) {\n      return setTimestamp(mapError(cachedModel || config.placeholder(stringId), e));\n    }\n  }, config.storage.validate);\n}\n\nvar draftMap = new WeakMap();\n\nfunction getValidationError(errors) {\n  var keys = Object.keys(errors);\n  var e = Error(\"Model validation failed (\".concat(keys.join(\", \"), \") - read the details from 'errors' property\"));\n  e.errors = errors;\n  return e;\n}\n\nfunction set(model) {\n  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var config = definitions.get(model);\n  var isInstance = !!config;\n\n  if (config === null) {\n    throw Error(\"Provided model instance has expired. Haven't you used stale value?\");\n  }\n\n  if (!config) config = bootstrap(model);\n\n  if (config.nested) {\n    throw stringifyModel(config.model, TypeError(\"Setting provided nested model instance is not supported, use the root model instance\"));\n  }\n\n  if (config.list) {\n    throw TypeError(\"Listing model definition does not support 'set' method\");\n  }\n\n  if (!config.storage.set) {\n    throw stringifyModel(config.model, TypeError(\"Provided model definition storage does not support 'set' method\"));\n  }\n\n  if (isInstance && pending(model)) {\n    throw Error(\"Provided model instance is in pending state\");\n  }\n\n  var id;\n\n  var setState = function setState(state, value) {\n    if (isInstance) {\n      setModelState(model, state, value);\n    } else {\n      var entry = _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"getEntry\"](config, id);\n\n      if (entry.value) {\n        setModelState(entry.value, state, value);\n      }\n    }\n  };\n\n  try {\n    if (config.enumerable && !isInstance && (!values || _typeof(values) !== \"object\")) {\n      throw TypeError(\"Values must be an object instance: \".concat(values));\n    }\n\n    if (values && hasOwnProperty.call(values, \"id\")) {\n      throw TypeError(\"Values must not contain 'id' property: \".concat(values.id));\n    }\n\n    var localModel = config.create(values, isInstance ? model : undefined);\n    var keys = values ? Object.keys(values) : [];\n    var isDraft = draftMap.get(config);\n    var errors = {};\n    var lastError = isInstance && isDraft && error(model);\n    var hasErrors = false;\n\n    if (localModel) {\n      config.checks.forEach(function (fn, key) {\n        if (keys.indexOf(key) === -1) {\n          if (lastError && lastError.errors && lastError.errors[key]) {\n            hasErrors = true;\n            errors[key] = lastError.errors[key];\n          } // eslint-disable-next-line eqeqeq\n\n\n          if (isDraft && localModel[key] == config.model[key]) {\n            return;\n          }\n        }\n\n        var checkResult;\n\n        try {\n          checkResult = fn(localModel[key], key, localModel);\n        } catch (e) {\n          checkResult = e;\n        }\n\n        if (checkResult !== true && checkResult !== undefined) {\n          hasErrors = true;\n          errors[key] = checkResult || true;\n        }\n      });\n\n      if (hasErrors && !isDraft) {\n        throw getValidationError(errors);\n      }\n    }\n\n    id = localModel ? localModel.id : model.id;\n    var result = Promise.resolve(config.storage.set(isInstance ? id : undefined, localModel, keys)).then(function (data) {\n      var resultModel = data === localModel ? localModel : config.create(data);\n\n      if (isInstance && resultModel && id !== resultModel.id) {\n        throw TypeError(\"Local and storage data must have the same id: '\".concat(id, \"', '\").concat(resultModel.id, \"'\"));\n      }\n\n      var resultId = resultModel ? resultModel.id : id;\n\n      if (hasErrors && isDraft) {\n        setModelState(resultModel, \"error\", getValidationError(errors));\n      }\n\n      return sync(config, resultId, resultModel || mapError(config.placeholder(resultId), Error(\"Model instance \".concat(id !== undefined ? \"with '\".concat(id, \"' id\") : \"\", \" does not exist\")), false), true);\n    }).catch(function (err) {\n      err = err !== undefined ? err : Error(\"Undefined error\");\n      setState(\"error\", err);\n      throw err;\n    });\n    setState(\"pending\", result);\n    return result;\n  } catch (e) {\n    setState(\"error\", e);\n    return Promise.reject(e);\n  }\n}\n\nfunction clear(model) {\n  var clearValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (_typeof(model) !== \"object\" || model === null) {\n    throw TypeError(\"The first argument must be a model instance or a model definition: \".concat(model));\n  }\n\n  var config = definitions.get(model);\n\n  if (config === null) {\n    throw Error(\"Provided model instance has expired. Haven't you used stale value from the outer scope?\");\n  }\n\n  if (config) {\n    _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"invalidate\"](config, model.id, clearValue, true);\n  } else {\n    if (!configs.get(model) && !lists.get(model[0])) {\n      throw Error(\"Model definition must be used before - passed argument is probably not a model definition\");\n    }\n\n    _cache_js__WEBPACK_IMPORTED_MODULE_0__[\"invalidateAll\"](bootstrap(model), clearValue, true);\n  }\n}\n\nfunction pending(model) {\n  if (model === null || _typeof(model) !== \"object\") return false;\n\n  var _getModelState = getModelState(model),\n      state = _getModelState.state,\n      value = _getModelState.value;\n\n  return state === \"pending\" && value;\n}\n\nfunction error(model, property) {\n  if (model === null || _typeof(model) !== \"object\") return false;\n\n  var _getModelState2 = getModelState(model),\n      state = _getModelState2.state,\n      value = _getModelState2.value;\n\n  var result = state === \"error\" && value;\n\n  if (result && property !== undefined) {\n    return result.errors && result.errors[property];\n  }\n\n  return result;\n}\n\nfunction ready(model) {\n  if (model === null || _typeof(model) !== \"object\") return false;\n  var config = definitions.get(model);\n  return !!(config && config.isInstance(model));\n}\n\nfunction mapValueWithState(lastValue, nextValue) {\n  var result = Object.freeze(Object.keys(lastValue).reduce(function (acc, key) {\n    Object.defineProperty(acc, key, {\n      get: function get() {\n        return lastValue[key];\n      },\n      enumerable: true\n    });\n    return acc;\n  }, Object.create(lastValue)));\n  definitions.set(result, definitions.get(lastValue));\n\n  var _getModelState3 = getModelState(nextValue),\n      state = _getModelState3.state,\n      value = _getModelState3.value;\n\n  return setModelState(result, state, value);\n}\n\nfunction getValuesFromModel(model) {\n  var values = _objectSpread({}, model);\n\n  delete values.id;\n  return values;\n}\n\nfunction submit(draft) {\n  var config = definitions.get(draft);\n\n  if (!config || !draftMap.has(config)) {\n    throw TypeError(\"Provided model instance is not a draft: \".concat(draft));\n  }\n\n  if (pending(draft)) {\n    throw Error(\"Model draft in pending state\");\n  }\n\n  var options = draftMap.get(config);\n  var result;\n\n  if (!options.id) {\n    result = store.set(options.model, getValuesFromModel(draft));\n  } else {\n    var model = store.get(options.model, draft.id);\n    result = Promise.resolve(pending(model) || model).then(function (resolvedModel) {\n      return store.set(resolvedModel, getValuesFromModel(draft));\n    });\n  }\n\n  result = result.then(function (resultModel) {\n    setModelState(draft, \"ready\");\n    return store.set(draft, getValuesFromModel(resultModel)).then(function () {\n      return resultModel;\n    });\n  }).catch(function (e) {\n    setModelState(draft, \"error\", e);\n    return Promise.reject(e);\n  });\n  setModelState(draft, \"pending\", result);\n  return result;\n}\n\nfunction required(value, key) {\n  return !!value || \"\".concat(key, \" is required\");\n}\n\nfunction valueWithValidation(defaultValue) {\n  var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : required;\n  var errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n  switch (_typeof(defaultValue)) {\n    case \"string\":\n      // eslint-disable-next-line no-new-wrappers\n      defaultValue = new String(defaultValue);\n      break;\n\n    case \"number\":\n      // eslint-disable-next-line no-new-wrappers\n      defaultValue = new Number(defaultValue);\n      break;\n\n    default:\n      throw TypeError(\"Default value must be a string or a number: \".concat(_typeof(defaultValue)));\n  }\n\n  var fn;\n\n  if (validate instanceof RegExp) {\n    fn = function fn(value) {\n      return validate.test(value) || errorMessage;\n    };\n  } else if (typeof validate === \"function\") {\n    fn = function fn() {\n      var result = validate.apply(void 0, arguments);\n      return result !== true && result !== undefined ? result || errorMessage : result;\n    };\n  } else {\n    throw TypeError(\"The second argument must be a RegExp instance or a function: \".concat(_typeof(validate)));\n  }\n\n  validationMap.set(defaultValue, fn);\n  return defaultValue;\n}\n\nfunction store(Model) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var config = bootstrap(Model);\n\n  if (_typeof(options) !== \"object\") {\n    options = {\n      id: options\n    };\n  }\n\n  if (options.id !== undefined && typeof options.id !== \"function\") {\n    var id = options.id;\n\n    options.id = function (host) {\n      return host[id];\n    };\n  }\n\n  if (options.draft) {\n    if (config.list) {\n      throw TypeError(\"Draft mode is not supported for listing model definition\");\n    }\n\n    Model = _objectSpread({}, Model, _defineProperty({}, store.connect, {\n      get: function get(id) {\n        var model = store.get(config.model, id);\n        return ready(model) ? model : pending(model);\n      },\n      set: function set(id, values) {\n        return values === null ? {\n          id: id\n        } : values;\n      }\n    }));\n    options.draft = bootstrap(Model);\n    draftMap.set(options.draft, {\n      model: config.model,\n      id: options.id\n    });\n  }\n\n  var createMode = options.draft && config.enumerable && !options.id;\n  var desc = {\n    get: function get(host, lastValue) {\n      if (createMode && !lastValue) {\n        var _nextValue = options.draft.create({});\n\n        sync(options.draft, _nextValue.id, _nextValue);\n        return store.get(Model, _nextValue.id);\n      }\n\n      var id = options.draft && lastValue ? lastValue.id : options.id && options.id(host);\n      var nextValue = store.get(Model, id);\n\n      if (lastValue && nextValue !== lastValue && !ready(nextValue)) {\n        return mapValueWithState(lastValue, nextValue);\n      }\n\n      return nextValue;\n    },\n    set: config.list ? undefined : function (host, values, lastValue) {\n      if (!lastValue || !ready(lastValue)) lastValue = desc.get(host);\n      store.set(lastValue, values).catch(\n      /* istanbul ignore next */\n      function () {});\n      return lastValue;\n    },\n    connect: options.draft ? function () {\n      return function () {\n        return clear(Model, false);\n      };\n    } : undefined\n  };\n  return desc;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object.assign(store, {\n  // storage\n  connect: connect,\n  // actions\n  get: _get,\n  set: set,\n  clear: clear,\n  // guards\n  pending: pending,\n  error: error,\n  ready: ready,\n  // helpers\n  submit: submit,\n  value: valueWithValidation\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/store.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/core.js":
/*!***************************************************!*\
  !*** ./node_modules/hybrids/esm/template/core.js ***!
  \***************************************************/
/*! exports provided: getPlaceholder, createInternalWalker, compileTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPlaceholder\", function() { return getPlaceholder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createInternalWalker\", function() { return createInternalWalker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"compileTemplate\", function() { return compileTemplate; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/hybrids/esm/utils.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/hybrids/esm/template/utils.js\");\n/* harmony import */ var _resolvers_value_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolvers/value.js */ \"./node_modules/hybrids/esm/template/resolvers/value.js\");\n/* harmony import */ var _resolvers_property_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolvers/property.js */ \"./node_modules/hybrids/esm/template/resolvers/property.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n/* istanbul ignore next */\n\ntry {\n  \"development\";\n} catch (e) {\n  var process = {\n    env: {\n      NODE_ENV: 'production'\n    }\n  };\n} // eslint-disable-line\n\n\nvar TIMESTAMP = Date.now();\nvar getPlaceholder = function getPlaceholder() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return \"{{h-\".concat(TIMESTAMP, \"-\").concat(id, \"}}\");\n};\nvar PLACEHOLDER_REGEXP_TEXT = getPlaceholder(\"(\\\\d+)\");\nvar PLACEHOLDER_REGEXP_EQUAL = new RegExp(\"^\".concat(PLACEHOLDER_REGEXP_TEXT, \"$\"));\nvar PLACEHOLDER_REGEXP_ALL = new RegExp(PLACEHOLDER_REGEXP_TEXT, \"g\");\nvar ATTR_PREFIX = \"--\".concat(TIMESTAMP, \"--\");\nvar ATTR_REGEXP = new RegExp(ATTR_PREFIX, \"g\");\nvar preparedTemplates = new WeakMap();\n/* istanbul ignore next */\n\nfunction applyShadyCSS(template, tagName) {\n  if (!tagName) return template;\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"shadyCSS\"])(function (shady) {\n    var map = preparedTemplates.get(template);\n\n    if (!map) {\n      map = new Map();\n      preparedTemplates.set(template, map);\n    }\n\n    var clone = map.get(tagName);\n\n    if (!clone) {\n      clone = document.createElement(\"template\");\n      clone.content.appendChild(template.content.cloneNode(true));\n      map.set(tagName, clone);\n      var styles = clone.content.querySelectorAll(\"style\");\n      Array.from(styles).forEach(function (style) {\n        var count = style.childNodes.length + 1;\n\n        for (var i = 0; i < count; i += 1) {\n          style.parentNode.insertBefore(document.createTextNode(getPlaceholder()), style);\n        }\n      });\n      shady.prepareTemplate(clone, tagName.toLowerCase());\n    }\n\n    return clone;\n  }, template);\n}\n\nfunction createSignature(parts, styles) {\n  var signature = parts.reduce(function (acc, part, index) {\n    if (index === 0) {\n      return part;\n    }\n\n    if (parts.slice(index).join(\"\").match(/^\\s*<\\/\\s*(table|tr|thead|tbody|tfoot|colgroup)>/)) {\n      return \"\".concat(acc, \"<!--\").concat(getPlaceholder(index - 1), \"-->\").concat(part);\n    }\n\n    return acc + getPlaceholder(index - 1) + part;\n  }, \"\");\n\n  if (styles) {\n    signature += \"<style>\\n\".concat(styles.join(\"\\n/*------*/\\n\"), \"\\n</style>\");\n  }\n  /* istanbul ignore if */\n\n\n  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"IS_IE\"]) {\n    return signature.replace(/style\\s*=\\s*([\"][^\"]+[\"]|['][^']+[']|[^\\s\"'<>/]+)/g, function (match) {\n      return \"\".concat(ATTR_PREFIX).concat(match);\n    });\n  }\n\n  return signature;\n}\n\nfunction getPropertyName(string) {\n  return string.replace(/\\s*=\\s*['\"]*$/g, \"\").split(/\\s+/).pop();\n}\n\nfunction replaceComments(fragment) {\n  var iterator = document.createNodeIterator(fragment, NodeFilter.SHOW_COMMENT, null, false);\n  var node; // eslint-disable-next-line no-cond-assign\n\n  while (node = iterator.nextNode()) {\n    if (PLACEHOLDER_REGEXP_EQUAL.test(node.textContent)) {\n      node.parentNode.insertBefore(document.createTextNode(node.textContent), node);\n      node.parentNode.removeChild(node);\n    }\n  }\n}\n\nfunction createInternalWalker(context) {\n  var node;\n  return {\n    get currentNode() {\n      return node;\n    },\n\n    nextNode: function nextNode() {\n      if (node === undefined) {\n        node = context.childNodes[0];\n      } else if (node.childNodes.length) {\n        node = node.childNodes[0];\n      } else if (node.nextSibling) {\n        node = node.nextSibling;\n      } else {\n        var parentNode = node.parentNode;\n        node = parentNode.nextSibling;\n\n        while (!node && parentNode !== context) {\n          parentNode = parentNode.parentNode;\n          node = parentNode.nextSibling;\n        }\n      }\n\n      return !!node;\n    }\n  };\n}\n\nfunction createExternalWalker(context) {\n  return document.createTreeWalker(context, // eslint-disable-next-line no-bitwise\n  NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, null, false);\n}\n/* istanbul ignore next */\n\n\nvar createWalker = _typeof(window.ShadyDOM) === \"object\" && window.ShadyDOM.inUse ? createInternalWalker : createExternalWalker;\nvar container = document.createElement(\"div\");\nvar styleSheetsMap = new Map();\n\nfunction normalizeWhitespace(input) {\n  var startIndent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  input = input.replace(/(^[\\n\\s\\t ]+)|([\\n\\s\\t ]+$)+/g, \"\");\n  var i = input.indexOf(\"\\n\");\n\n  if (i > -1) {\n    var indent = 0 - startIndent - 2;\n\n    for (i += 1; input[i] === \" \" && i < input.length; i += 1) {\n      indent += 1;\n    }\n\n    return input.replace(/\\n +/g, function (t) {\n      return t.substr(0, Math.max(t.length - indent, 1));\n    });\n  }\n\n  return input;\n}\n\nfunction beautifyTemplateLog(input, index) {\n  var placeholder = getPlaceholder(index);\n  var output = normalizeWhitespace(input).split(\"\\n\").filter(function (i) {\n    return i;\n  }).map(function (line) {\n    var startIndex = line.indexOf(placeholder);\n\n    if (startIndex > -1) {\n      return \"| \".concat(line, \"\\n--\").concat(\"-\".repeat(startIndex)).concat(\"^\".repeat(6));\n    }\n\n    return \"| \".concat(line);\n  }).join(\"\\n\") // eslint-disable-next-line no-template-curly-in-string\n  .replace(PLACEHOLDER_REGEXP_ALL, \"${...}\");\n  return \"\".concat(output);\n}\n\nfunction compileTemplate(rawParts, isSVG, styles) {\n  var template = document.createElement(\"template\");\n  var parts = [];\n  var signature = createSignature(rawParts, styles);\n  if (isSVG) signature = \"<svg>\".concat(signature, \"</svg>\");\n  /* istanbul ignore if */\n\n  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"IS_IE\"]) {\n    template.innerHTML = signature;\n  } else {\n    container.innerHTML = \"<template>\".concat(signature, \"</template>\");\n    template.content.appendChild(container.children[0].content);\n  }\n\n  if (isSVG) {\n    var svgRoot = template.content.firstChild;\n    template.content.removeChild(svgRoot);\n    Array.from(svgRoot.childNodes).forEach(function (node) {\n      return template.content.appendChild(node);\n    });\n  }\n\n  replaceComments(template.content);\n  var compileWalker = createWalker(template.content);\n  var compileIndex = 0;\n\n  var _loop = function _loop() {\n    var node = compileWalker.currentNode;\n\n    if (node.nodeType === Node.TEXT_NODE) {\n      var text = node.textContent;\n\n      if (!text.match(PLACEHOLDER_REGEXP_EQUAL)) {\n        var results = text.match(PLACEHOLDER_REGEXP_ALL);\n\n        if (results) {\n          var currentNode = node;\n          results.reduce(function (acc, placeholder) {\n            var _acc$pop$split = acc.pop().split(placeholder),\n                _acc$pop$split2 = _slicedToArray(_acc$pop$split, 2),\n                before = _acc$pop$split2[0],\n                next = _acc$pop$split2[1];\n\n            if (before) acc.push(before);\n            acc.push(placeholder);\n            if (next) acc.push(next);\n            return acc;\n          }, [text]).forEach(function (part, index) {\n            if (index === 0) {\n              currentNode.textContent = part;\n            } else {\n              currentNode = currentNode.parentNode.insertBefore(document.createTextNode(part), currentNode.nextSibling);\n            }\n          });\n        }\n      }\n\n      var equal = node.textContent.match(PLACEHOLDER_REGEXP_EQUAL);\n\n      if (equal) {\n        /* istanbul ignore else */\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"IS_IE\"]) node.textContent = \"\";\n        parts[equal[1]] = [compileIndex, _resolvers_value_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]];\n      }\n    } else {\n      /* istanbul ignore else */\n      // eslint-disable-next-line no-lonely-if\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        Array.from(node.attributes).forEach(function (attr) {\n          var value = attr.value.trim();\n          /* istanbul ignore next */\n\n          var name = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"IS_IE\"] ? attr.name.replace(ATTR_PREFIX, \"\") : attr.name;\n          var equal = value.match(PLACEHOLDER_REGEXP_EQUAL);\n\n          if (equal) {\n            var propertyName = getPropertyName(rawParts[equal[1]]);\n            parts[equal[1]] = [compileIndex, Object(_resolvers_property_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(name, propertyName, isSVG)];\n            node.removeAttribute(attr.name);\n          } else {\n            var _results = value.match(PLACEHOLDER_REGEXP_ALL);\n\n            if (_results) {\n              var partialName = \"attr__\".concat(name);\n\n              _results.forEach(function (placeholder, index) {\n                var _placeholder$match = placeholder.match(PLACEHOLDER_REGEXP_EQUAL),\n                    _placeholder$match2 = _slicedToArray(_placeholder$match, 2),\n                    id = _placeholder$match2[1];\n\n                parts[id] = [compileIndex, function (host, target, attrValue) {\n                  var data = _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"dataMap\"].get(target, {});\n                  data[partialName] = (data[partialName] || value).replace(placeholder, attrValue == null ? \"\" : attrValue);\n\n                  if (_results.length === 1 || index + 1 === _results.length) {\n                    target.setAttribute(name, data[partialName]);\n                    data[partialName] = undefined;\n                  }\n                }];\n              });\n\n              attr.value = \"\";\n              /* istanbul ignore next */\n\n              if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"IS_IE\"] && name !== attr.name) {\n                node.removeAttribute(attr.name);\n                node.setAttribute(name, \"\");\n              }\n            }\n          }\n        });\n      }\n    }\n\n    compileIndex += 1;\n  };\n\n  while (compileWalker.nextNode()) {\n    _loop();\n  }\n\n  return function updateTemplateInstance(host, target, args, styleSheets) {\n    var data = _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"dataMap\"].get(target, {\n      type: \"function\"\n    });\n\n    if (template !== data.template) {\n      if (data.template || target.nodeType === Node.ELEMENT_NODE) {\n        Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"removeTemplate\"])(target);\n      }\n\n      data.prevArgs = null;\n      var fragment = document.importNode(applyShadyCSS(template, host.tagName).content, true);\n      var renderWalker = createWalker(fragment);\n      var clonedParts = parts.slice(0);\n      var renderIndex = 0;\n      var currentPart = clonedParts.shift();\n      var markers = [];\n      data.template = template;\n      data.markers = markers;\n\n      while (renderWalker.nextNode()) {\n        var node = renderWalker.currentNode;\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          /* istanbul ignore next */\n          if (PLACEHOLDER_REGEXP_EQUAL.test(node.textContent)) {\n            node.textContent = \"\";\n          } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"IS_IE\"]) {\n            node.textContent = node.textContent.replace(ATTR_REGEXP, \"\");\n          }\n        } else if ( true && node.nodeType === Node.ELEMENT_NODE) {\n          if (node.tagName.indexOf(\"-\") > -1 && !customElements.get(node.tagName.toLowerCase())) {\n            throw Error(\"Missing \".concat(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"stringifyElement\"])(node), \" element definition in \").concat(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"stringifyElement\"])(host)));\n          }\n        }\n\n        while (currentPart && currentPart[0] === renderIndex) {\n          markers.push([node, currentPart[1]]);\n          currentPart = clonedParts.shift();\n        }\n\n        renderIndex += 1;\n      }\n\n      if (target.nodeType === Node.TEXT_NODE) {\n        data.startNode = fragment.childNodes[0];\n        data.endNode = fragment.childNodes[fragment.childNodes.length - 1];\n        var previousChild = target;\n        var child = fragment.childNodes[0];\n\n        while (child) {\n          target.parentNode.insertBefore(child, previousChild.nextSibling);\n          previousChild = child;\n          child = fragment.childNodes[0];\n        }\n      } else {\n        target.appendChild(fragment);\n      }\n    }\n\n    var adoptedStyleSheets = target.adoptedStyleSheets;\n\n    if (styleSheets) {\n      var isEqual = false;\n      styleSheets = styleSheets.map(function (style) {\n        if (style instanceof CSSStyleSheet) return style;\n        var styleSheet = styleSheetsMap.get(style);\n\n        if (!styleSheet) {\n          styleSheet = new CSSStyleSheet();\n          styleSheet.replaceSync(style);\n          styleSheetsMap.set(style, styleSheet);\n        }\n\n        return styleSheet;\n      });\n\n      if (styleSheets.length === adoptedStyleSheets.length) {\n        isEqual = true;\n\n        for (var i = 0; i < styleSheets.length; i += 1) {\n          if (styleSheets[i] !== adoptedStyleSheets[i]) {\n            isEqual = false;\n            break;\n          }\n        }\n      }\n\n      if (!isEqual) target.adoptedStyleSheets = styleSheets;\n    } else if (adoptedStyleSheets && adoptedStyleSheets.length) {\n      target.adoptedStyleSheets = [];\n    }\n\n    var prevArgs = data.prevArgs;\n    data.prevArgs = args;\n\n    for (var index = 0; index < data.markers.length; index += 1) {\n      var _data$markers$index = _slicedToArray(data.markers[index], 2),\n          _node = _data$markers$index[0],\n          marker = _data$markers$index[1];\n\n      if (!prevArgs || prevArgs[index] !== args[index]) {\n        try {\n          marker(host, _node, args[index], prevArgs ? prevArgs[index] : undefined);\n        } catch (error) {\n          if (true) {\n            // eslint-disable-next-line no-console\n            console.error(\"Following error was thrown when updating a template expression in \".concat(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"stringifyElement\"])(host), \"\\n\").concat(beautifyTemplateLog(signature, index)));\n          }\n\n          throw error;\n        }\n      }\n    }\n\n    if (target.nodeType !== Node.TEXT_NODE) {\n      Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"shadyCSS\"])(function (shady) {\n        if (host.shadowRoot) {\n          if (prevArgs) {\n            shady.styleSubtree(host);\n          } else {\n            shady.styleElement(host);\n          }\n        }\n      });\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/core.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/helpers.js":
/*!******************************************************!*\
  !*** ./node_modules/hybrids/esm/template/helpers.js ***!
  \******************************************************/
/*! exports provided: set, resolve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolve\", function() { return resolve; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/hybrids/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nfunction resolveValue(_ref, setter) {\n  var target = _ref.target;\n  var value;\n\n  switch (target.type) {\n    case \"radio\":\n    case \"checkbox\":\n      value = target.checked && target.value;\n      break;\n\n    case \"file\":\n      value = target.files;\n      break;\n\n    default:\n      value = target.value;\n  }\n\n  setter(value);\n}\n\nfunction getPartialObject(name, value) {\n  return name.split(\".\").reverse().reduce(function (acc, key) {\n    if (!acc) return _defineProperty({}, key, value);\n    return _defineProperty({}, key, acc);\n  }, null);\n}\n\nvar stringCache = new Map();\nfunction set(property, valueOrPath) {\n  if (!property) {\n    throw Error(\"The first argument must be a property name or an object instance: \".concat(property));\n  }\n\n  if (_typeof(property) === \"object\") {\n    if (valueOrPath === undefined) {\n      throw Error(\"For model instance property the second argument must be defined\");\n    }\n\n    var store = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"storePointer\"].get(property);\n\n    if (!store) {\n      throw Error(\"Provided object must be a model instance of the store\");\n    }\n\n    return function (host, event) {\n      resolveValue(event, function (value) {\n        store.set(property, valueOrPath !== null ? getPartialObject(valueOrPath, value) : valueOrPath);\n      });\n    };\n  }\n\n  if (arguments.length === 2) {\n    return function (host) {\n      host[property] = valueOrPath;\n    };\n  }\n\n  var fn = stringCache.get(property);\n\n  if (!fn) {\n    fn = function fn(host, event) {\n      resolveValue(event, function (value) {\n        host[property] = value;\n      });\n    };\n\n    stringCache.set(property, fn);\n  }\n\n  return fn;\n}\nvar promiseMap = new WeakMap();\nfunction resolve(promise, placeholder) {\n  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n  return function (host, target) {\n    var timeout;\n\n    if (placeholder) {\n      timeout = setTimeout(function () {\n        timeout = undefined;\n        requestAnimationFrame(function () {\n          placeholder(host, target);\n        });\n      }, delay);\n    }\n\n    promiseMap.set(target, promise);\n    promise.then(function (template) {\n      if (timeout) clearTimeout(timeout);\n\n      if (promiseMap.get(target) === promise) {\n        template(host, target);\n        promiseMap.set(target, null);\n      }\n    });\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbInN0b3JlUG9pbnRlciIsInJlc29sdmVWYWx1ZSIsInNldHRlciIsInRhcmdldCIsInZhbHVlIiwidHlwZSIsImNoZWNrZWQiLCJmaWxlcyIsImdldFBhcnRpYWxPYmplY3QiLCJuYW1lIiwic3BsaXQiLCJyZXZlcnNlIiwicmVkdWNlIiwiYWNjIiwia2V5Iiwic3RyaW5nQ2FjaGUiLCJNYXAiLCJzZXQiLCJwcm9wZXJ0eSIsInZhbHVlT3JQYXRoIiwiRXJyb3IiLCJ1bmRlZmluZWQiLCJzdG9yZSIsImdldCIsImhvc3QiLCJldmVudCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZuIiwicHJvbWlzZU1hcCIsIldlYWtNYXAiLCJyZXNvbHZlIiwicHJvbWlzZSIsInBsYWNlaG9sZGVyIiwiZGVsYXkiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRoZW4iLCJ0ZW1wbGF0ZSIsImNsZWFyVGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFlBQVQsUUFBNkIsYUFBN0I7O0FBRUEsU0FBU0MsWUFBVCxPQUFrQ0MsTUFBbEMsRUFBMEM7QUFBQSxNQUFsQkMsTUFBa0IsUUFBbEJBLE1BQWtCO0FBQ3hDLE1BQUlDLEtBQUo7O0FBRUEsVUFBUUQsTUFBTSxDQUFDRSxJQUFmO0FBQ0UsU0FBSyxPQUFMO0FBQ0EsU0FBSyxVQUFMO0FBQ0VELE1BQUFBLEtBQUssR0FBR0QsTUFBTSxDQUFDRyxPQUFQLElBQWtCSCxNQUFNLENBQUNDLEtBQWpDO0FBQ0E7O0FBQ0YsU0FBSyxNQUFMO0FBQ0VBLE1BQUFBLEtBQUssR0FBR0QsTUFBTSxDQUFDSSxLQUFmO0FBQ0E7O0FBQ0Y7QUFDRUgsTUFBQUEsS0FBSyxHQUFHRCxNQUFNLENBQUNDLEtBQWY7QUFUSjs7QUFZQUYsRUFBQUEsTUFBTSxDQUFDRSxLQUFELENBQU47QUFDRDs7QUFFRCxTQUFTSSxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0NMLEtBQWhDLEVBQXVDO0FBQ3JDLFNBQU9LLElBQUksQ0FDUkMsS0FESSxDQUNFLEdBREYsRUFFSkMsT0FGSSxHQUdKQyxNQUhJLENBR0csVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDcEIsUUFBSSxDQUFDRCxHQUFMLEVBQVUsMkJBQVVDLEdBQVYsRUFBZ0JWLEtBQWhCO0FBQ1YsK0JBQVVVLEdBQVYsRUFBZ0JELEdBQWhCO0FBQ0QsR0FOSSxFQU1GLElBTkUsQ0FBUDtBQU9EOztBQUVELElBQU1FLFdBQVcsR0FBRyxJQUFJQyxHQUFKLEVBQXBCO0FBRUEsT0FBTyxTQUFTQyxHQUFULENBQWFDLFFBQWIsRUFBdUJDLFdBQXZCLEVBQW9DO0FBQ3pDLE1BQUksQ0FBQ0QsUUFBTCxFQUFlO0FBQ2IsVUFBTUUsS0FBSyw2RUFDNERGLFFBRDVELEVBQVg7QUFHRDs7QUFFRCxNQUFJLFFBQU9BLFFBQVAsTUFBb0IsUUFBeEIsRUFBa0M7QUFDaEMsUUFBSUMsV0FBVyxLQUFLRSxTQUFwQixFQUErQjtBQUM3QixZQUFNRCxLQUFLLENBQ1QsaUVBRFMsQ0FBWDtBQUdEOztBQUVELFFBQU1FLEtBQUssR0FBR3RCLFlBQVksQ0FBQ3VCLEdBQWIsQ0FBaUJMLFFBQWpCLENBQWQ7O0FBRUEsUUFBSSxDQUFDSSxLQUFMLEVBQVk7QUFDVixZQUFNRixLQUFLLENBQUMsdURBQUQsQ0FBWDtBQUNEOztBQUVELFdBQU8sVUFBQ0ksSUFBRCxFQUFPQyxLQUFQLEVBQWlCO0FBQ3RCeEIsTUFBQUEsWUFBWSxDQUFDd0IsS0FBRCxFQUFRLFVBQUFyQixLQUFLLEVBQUk7QUFDM0JrQixRQUFBQSxLQUFLLENBQUNMLEdBQU4sQ0FDRUMsUUFERixFQUVFQyxXQUFXLEtBQUssSUFBaEIsR0FDSVgsZ0JBQWdCLENBQUNXLFdBQUQsRUFBY2YsS0FBZCxDQURwQixHQUVJZSxXQUpOO0FBTUQsT0FQVyxDQUFaO0FBUUQsS0FURDtBQVVEOztBQUVELE1BQUlPLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQixXQUFPLFVBQUFILElBQUksRUFBSTtBQUNiQSxNQUFBQSxJQUFJLENBQUNOLFFBQUQsQ0FBSixHQUFpQkMsV0FBakI7QUFDRCxLQUZEO0FBR0Q7O0FBRUQsTUFBSVMsRUFBRSxHQUFHYixXQUFXLENBQUNRLEdBQVosQ0FBZ0JMLFFBQWhCLENBQVQ7O0FBRUEsTUFBSSxDQUFDVSxFQUFMLEVBQVM7QUFDUEEsSUFBQUEsRUFBRSxHQUFHLFlBQUNKLElBQUQsRUFBT0MsS0FBUCxFQUFpQjtBQUNwQnhCLE1BQUFBLFlBQVksQ0FBQ3dCLEtBQUQsRUFBUSxVQUFBckIsS0FBSyxFQUFJO0FBQzNCb0IsUUFBQUEsSUFBSSxDQUFDTixRQUFELENBQUosR0FBaUJkLEtBQWpCO0FBQ0QsT0FGVyxDQUFaO0FBR0QsS0FKRDs7QUFNQVcsSUFBQUEsV0FBVyxDQUFDRSxHQUFaLENBQWdCQyxRQUFoQixFQUEwQlUsRUFBMUI7QUFDRDs7QUFFRCxTQUFPQSxFQUFQO0FBQ0Q7QUFFRCxJQUFNQyxVQUFVLEdBQUcsSUFBSUMsT0FBSixFQUFuQjtBQUNBLE9BQU8sU0FBU0MsT0FBVCxDQUFpQkMsT0FBakIsRUFBMEJDLFdBQTFCLEVBQW9EO0FBQUEsTUFBYkMsS0FBYSx1RUFBTCxHQUFLO0FBQ3pELFNBQU8sVUFBQ1YsSUFBRCxFQUFPckIsTUFBUCxFQUFrQjtBQUN2QixRQUFJZ0MsT0FBSjs7QUFFQSxRQUFJRixXQUFKLEVBQWlCO0FBQ2ZFLE1BQUFBLE9BQU8sR0FBR0MsVUFBVSxDQUFDLFlBQU07QUFDekJELFFBQUFBLE9BQU8sR0FBR2QsU0FBVjtBQUVBZ0IsUUFBQUEscUJBQXFCLENBQUMsWUFBTTtBQUMxQkosVUFBQUEsV0FBVyxDQUFDVCxJQUFELEVBQU9yQixNQUFQLENBQVg7QUFDRCxTQUZvQixDQUFyQjtBQUdELE9BTm1CLEVBTWpCK0IsS0FOaUIsQ0FBcEI7QUFPRDs7QUFFREwsSUFBQUEsVUFBVSxDQUFDWixHQUFYLENBQWVkLE1BQWYsRUFBdUI2QixPQUF2QjtBQUVBQSxJQUFBQSxPQUFPLENBQUNNLElBQVIsQ0FBYSxVQUFBQyxRQUFRLEVBQUk7QUFDdkIsVUFBSUosT0FBSixFQUFhSyxZQUFZLENBQUNMLE9BQUQsQ0FBWjs7QUFFYixVQUFJTixVQUFVLENBQUNOLEdBQVgsQ0FBZXBCLE1BQWYsTUFBMkI2QixPQUEvQixFQUF3QztBQUN0Q08sUUFBQUEsUUFBUSxDQUFDZixJQUFELEVBQU9yQixNQUFQLENBQVI7QUFDQTBCLFFBQUFBLFVBQVUsQ0FBQ1osR0FBWCxDQUFlZCxNQUFmLEVBQXVCLElBQXZCO0FBQ0Q7QUFDRixLQVBEO0FBUUQsR0F2QkQ7QUF3QkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdG9yZVBvaW50ZXIgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcblxuZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKHsgdGFyZ2V0IH0sIHNldHRlcikge1xuICBsZXQgdmFsdWU7XG5cbiAgc3dpdGNoICh0YXJnZXQudHlwZSkge1xuICAgIGNhc2UgXCJyYWRpb1wiOlxuICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgdmFsdWUgPSB0YXJnZXQuY2hlY2tlZCAmJiB0YXJnZXQudmFsdWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgdmFsdWUgPSB0YXJnZXQuZmlsZXM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gIH1cblxuICBzZXR0ZXIodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJ0aWFsT2JqZWN0KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBuYW1lXG4gICAgLnNwbGl0KFwiLlwiKVxuICAgIC5yZXZlcnNlKClcbiAgICAucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKCFhY2MpIHJldHVybiB7IFtrZXldOiB2YWx1ZSB9O1xuICAgICAgcmV0dXJuIHsgW2tleV06IGFjYyB9O1xuICAgIH0sIG51bGwpO1xufVxuXG5jb25zdCBzdHJpbmdDYWNoZSA9IG5ldyBNYXAoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldChwcm9wZXJ0eSwgdmFsdWVPclBhdGgpIHtcbiAgaWYgKCFwcm9wZXJ0eSkge1xuICAgIHRocm93IEVycm9yKFxuICAgICAgYFRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgcHJvcGVydHkgbmFtZSBvciBhbiBvYmplY3QgaW5zdGFuY2U6ICR7cHJvcGVydHl9YCxcbiAgICApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gXCJvYmplY3RcIikge1xuICAgIGlmICh2YWx1ZU9yUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJGb3IgbW9kZWwgaW5zdGFuY2UgcHJvcGVydHkgdGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGRlZmluZWRcIixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVBvaW50ZXIuZ2V0KHByb3BlcnR5KTtcblxuICAgIGlmICghc3RvcmUpIHtcbiAgICAgIHRocm93IEVycm9yKFwiUHJvdmlkZWQgb2JqZWN0IG11c3QgYmUgYSBtb2RlbCBpbnN0YW5jZSBvZiB0aGUgc3RvcmVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIChob3N0LCBldmVudCkgPT4ge1xuICAgICAgcmVzb2x2ZVZhbHVlKGV2ZW50LCB2YWx1ZSA9PiB7XG4gICAgICAgIHN0b3JlLnNldChcbiAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICB2YWx1ZU9yUGF0aCAhPT0gbnVsbFxuICAgICAgICAgICAgPyBnZXRQYXJ0aWFsT2JqZWN0KHZhbHVlT3JQYXRoLCB2YWx1ZSlcbiAgICAgICAgICAgIDogdmFsdWVPclBhdGgsXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gaG9zdCA9PiB7XG4gICAgICBob3N0W3Byb3BlcnR5XSA9IHZhbHVlT3JQYXRoO1xuICAgIH07XG4gIH1cblxuICBsZXQgZm4gPSBzdHJpbmdDYWNoZS5nZXQocHJvcGVydHkpO1xuXG4gIGlmICghZm4pIHtcbiAgICBmbiA9IChob3N0LCBldmVudCkgPT4ge1xuICAgICAgcmVzb2x2ZVZhbHVlKGV2ZW50LCB2YWx1ZSA9PiB7XG4gICAgICAgIGhvc3RbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc3RyaW5nQ2FjaGUuc2V0KHByb3BlcnR5LCBmbik7XG4gIH1cblxuICByZXR1cm4gZm47XG59XG5cbmNvbnN0IHByb21pc2VNYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgcGxhY2Vob2xkZXIsIGRlbGF5ID0gMjAwKSB7XG4gIHJldHVybiAoaG9zdCwgdGFyZ2V0KSA9PiB7XG4gICAgbGV0IHRpbWVvdXQ7XG5cbiAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGltZW91dCA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHBsYWNlaG9sZGVyKGhvc3QsIHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH1cblxuICAgIHByb21pc2VNYXAuc2V0KHRhcmdldCwgcHJvbWlzZSk7XG5cbiAgICBwcm9taXNlLnRoZW4odGVtcGxhdGUgPT4ge1xuICAgICAgaWYgKHRpbWVvdXQpIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgICAgaWYgKHByb21pc2VNYXAuZ2V0KHRhcmdldCkgPT09IHByb21pc2UpIHtcbiAgICAgICAgdGVtcGxhdGUoaG9zdCwgdGFyZ2V0KTtcbiAgICAgICAgcHJvbWlzZU1hcC5zZXQodGFyZ2V0LCBudWxsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/helpers.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/index.js":
/*!****************************************************!*\
  !*** ./node_modules/hybrids/esm/template/index.js ***!
  \****************************************************/
/*! exports provided: html, svg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"html\", function() { return html; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"svg\", function() { return svg; });\n/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../define.js */ \"./node_modules/hybrids/esm/define.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"./node_modules/hybrids/esm/template/core.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/hybrids/esm/template/helpers.js\");\n\n\n\nvar PLACEHOLDER = Object(_core_js__WEBPACK_IMPORTED_MODULE_1__[\"getPlaceholder\"])();\nvar SVG_PLACEHOLDER = Object(_core_js__WEBPACK_IMPORTED_MODULE_1__[\"getPlaceholder\"])(\"svg\");\nvar STYLE_IMPORT_REGEXP = /@import/;\nvar templatesMap = new Map();\nvar stylesMap = new WeakMap();\nvar methods = {\n  define: function define(elements) {\n    Object(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(elements);\n    return this;\n  },\n  key: function key(id) {\n    this.id = id;\n    return this;\n  },\n  style: function style() {\n    for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n      styles[_key] = arguments[_key];\n    }\n\n    stylesMap.set(this, styles.filter(function (style) {\n      return style;\n    }));\n    return this;\n  }\n};\n\nfunction create(parts, args, isSVG) {\n  var createTemplate = function createTemplate(host) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : host;\n    var styles = stylesMap.get(createTemplate);\n    var hasAdoptedStyleSheets;\n    var id = parts.join(PLACEHOLDER);\n\n    if (styles) {\n      var joinedStyles = styles.join(PLACEHOLDER);\n      hasAdoptedStyleSheets = !!target.adoptedStyleSheets && !STYLE_IMPORT_REGEXP.test(joinedStyles);\n      if (!hasAdoptedStyleSheets) id += joinedStyles;\n    }\n\n    if (isSVG) id += SVG_PLACEHOLDER;\n    var render = templatesMap.get(id);\n\n    if (!render) {\n      render = Object(_core_js__WEBPACK_IMPORTED_MODULE_1__[\"compileTemplate\"])(parts, isSVG, !hasAdoptedStyleSheets && styles);\n      templatesMap.set(id, render);\n    }\n\n    render(host, target, args, hasAdoptedStyleSheets && styles);\n  };\n\n  return Object.assign(createTemplate, methods);\n}\n\nfunction html(parts) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  return create(parts, args);\n}\nfunction svg(parts) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  return create(parts, args, true);\n}\nObject.assign(html, _helpers_js__WEBPACK_IMPORTED_MODULE_2__);\nObject.assign(svg, _helpers_js__WEBPACK_IMPORTED_MODULE_2__);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZpbmVFbGVtZW50cyIsImNvbXBpbGVUZW1wbGF0ZSIsImdldFBsYWNlaG9sZGVyIiwiaGVscGVycyIsIlBMQUNFSE9MREVSIiwiU1ZHX1BMQUNFSE9MREVSIiwiU1RZTEVfSU1QT1JUX1JFR0VYUCIsInRlbXBsYXRlc01hcCIsIk1hcCIsInN0eWxlc01hcCIsIldlYWtNYXAiLCJtZXRob2RzIiwiZGVmaW5lIiwiZWxlbWVudHMiLCJrZXkiLCJpZCIsInN0eWxlIiwic3R5bGVzIiwic2V0IiwiZmlsdGVyIiwiY3JlYXRlIiwicGFydHMiLCJhcmdzIiwiaXNTVkciLCJjcmVhdGVUZW1wbGF0ZSIsImhvc3QiLCJ0YXJnZXQiLCJnZXQiLCJoYXNBZG9wdGVkU3R5bGVTaGVldHMiLCJqb2luIiwiam9pbmVkU3R5bGVzIiwiYWRvcHRlZFN0eWxlU2hlZXRzIiwidGVzdCIsInJlbmRlciIsIk9iamVjdCIsImFzc2lnbiIsImh0bWwiLCJzdmciXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLGNBQVAsTUFBMkIsY0FBM0I7QUFFQSxTQUFTQyxlQUFULEVBQTBCQyxjQUExQixRQUFnRCxXQUFoRDtBQUNBLE9BQU8sS0FBS0MsT0FBWixNQUF5QixjQUF6QjtBQUVBLElBQU1DLFdBQVcsR0FBR0YsY0FBYyxFQUFsQztBQUNBLElBQU1HLGVBQWUsR0FBR0gsY0FBYyxDQUFDLEtBQUQsQ0FBdEM7QUFDQSxJQUFNSSxtQkFBbUIsR0FBRyxTQUE1QjtBQUVBLElBQU1DLFlBQVksR0FBRyxJQUFJQyxHQUFKLEVBQXJCO0FBQ0EsSUFBTUMsU0FBUyxHQUFHLElBQUlDLE9BQUosRUFBbEI7QUFFQSxJQUFNQyxPQUFPLEdBQUc7QUFDZEMsRUFBQUEsTUFEYyxrQkFDUEMsUUFETyxFQUNHO0FBQ2ZiLElBQUFBLGNBQWMsQ0FBQ2EsUUFBRCxDQUFkO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FKYTtBQUtkQyxFQUFBQSxHQUxjLGVBS1ZDLEVBTFUsRUFLTjtBQUNOLFNBQUtBLEVBQUwsR0FBVUEsRUFBVjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBUmE7QUFTZEMsRUFBQUEsS0FUYyxtQkFTRztBQUFBLHNDQUFSQyxNQUFRO0FBQVJBLE1BQUFBLE1BQVE7QUFBQTs7QUFDZlIsSUFBQUEsU0FBUyxDQUFDUyxHQUFWLENBQ0UsSUFERixFQUVFRCxNQUFNLENBQUNFLE1BQVAsQ0FBYyxVQUFBSCxLQUFLO0FBQUEsYUFBSUEsS0FBSjtBQUFBLEtBQW5CLENBRkY7QUFJQSxXQUFPLElBQVA7QUFDRDtBQWZhLENBQWhCOztBQWtCQSxTQUFTSSxNQUFULENBQWdCQyxLQUFoQixFQUF1QkMsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQ2xDLE1BQU1DLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQ0MsSUFBRCxFQUF5QjtBQUFBLFFBQWxCQyxNQUFrQix1RUFBVEQsSUFBUztBQUM5QyxRQUFNUixNQUFNLEdBQUdSLFNBQVMsQ0FBQ2tCLEdBQVYsQ0FBY0gsY0FBZCxDQUFmO0FBQ0EsUUFBSUkscUJBQUo7QUFDQSxRQUFJYixFQUFFLEdBQUdNLEtBQUssQ0FBQ1EsSUFBTixDQUFXekIsV0FBWCxDQUFUOztBQUVBLFFBQUlhLE1BQUosRUFBWTtBQUNWLFVBQU1hLFlBQVksR0FBR2IsTUFBTSxDQUFDWSxJQUFQLENBQVl6QixXQUFaLENBQXJCO0FBQ0F3QixNQUFBQSxxQkFBcUIsR0FDbkIsQ0FBQyxDQUFDRixNQUFNLENBQUNLLGtCQUFULElBQStCLENBQUN6QixtQkFBbUIsQ0FBQzBCLElBQXBCLENBQXlCRixZQUF6QixDQURsQztBQUVBLFVBQUksQ0FBQ0YscUJBQUwsRUFBNEJiLEVBQUUsSUFBSWUsWUFBTjtBQUM3Qjs7QUFFRCxRQUFJUCxLQUFKLEVBQVdSLEVBQUUsSUFBSVYsZUFBTjtBQUVYLFFBQUk0QixNQUFNLEdBQUcxQixZQUFZLENBQUNvQixHQUFiLENBQWlCWixFQUFqQixDQUFiOztBQUNBLFFBQUksQ0FBQ2tCLE1BQUwsRUFBYTtBQUNYQSxNQUFBQSxNQUFNLEdBQUdoQyxlQUFlLENBQUNvQixLQUFELEVBQVFFLEtBQVIsRUFBZSxDQUFDSyxxQkFBRCxJQUEwQlgsTUFBekMsQ0FBeEI7QUFDQVYsTUFBQUEsWUFBWSxDQUFDVyxHQUFiLENBQWlCSCxFQUFqQixFQUFxQmtCLE1BQXJCO0FBQ0Q7O0FBRURBLElBQUFBLE1BQU0sQ0FBQ1IsSUFBRCxFQUFPQyxNQUFQLEVBQWVKLElBQWYsRUFBcUJNLHFCQUFxQixJQUFJWCxNQUE5QyxDQUFOO0FBQ0QsR0FyQkQ7O0FBdUJBLFNBQU9pQixNQUFNLENBQUNDLE1BQVAsQ0FBY1gsY0FBZCxFQUE4QmIsT0FBOUIsQ0FBUDtBQUNEOztBQUVELE9BQU8sU0FBU3lCLElBQVQsQ0FBY2YsS0FBZCxFQUE4QjtBQUFBLHFDQUFOQyxJQUFNO0FBQU5BLElBQUFBLElBQU07QUFBQTs7QUFDbkMsU0FBT0YsTUFBTSxDQUFDQyxLQUFELEVBQVFDLElBQVIsQ0FBYjtBQUNEO0FBRUQsT0FBTyxTQUFTZSxHQUFULENBQWFoQixLQUFiLEVBQTZCO0FBQUEscUNBQU5DLElBQU07QUFBTkEsSUFBQUEsSUFBTTtBQUFBOztBQUNsQyxTQUFPRixNQUFNLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjLElBQWQsQ0FBYjtBQUNEO0FBRURZLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEVBQW9CakMsT0FBcEI7QUFDQStCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRSxHQUFkLEVBQW1CbEMsT0FBbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVmaW5lRWxlbWVudHMgZnJvbSBcIi4uL2RlZmluZS5qc1wiO1xuXG5pbXBvcnQgeyBjb21waWxlVGVtcGxhdGUsIGdldFBsYWNlaG9sZGVyIH0gZnJvbSBcIi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG5cbmNvbnN0IFBMQUNFSE9MREVSID0gZ2V0UGxhY2Vob2xkZXIoKTtcbmNvbnN0IFNWR19QTEFDRUhPTERFUiA9IGdldFBsYWNlaG9sZGVyKFwic3ZnXCIpO1xuY29uc3QgU1RZTEVfSU1QT1JUX1JFR0VYUCA9IC9AaW1wb3J0LztcblxuY29uc3QgdGVtcGxhdGVzTWFwID0gbmV3IE1hcCgpO1xuY29uc3Qgc3R5bGVzTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuY29uc3QgbWV0aG9kcyA9IHtcbiAgZGVmaW5lKGVsZW1lbnRzKSB7XG4gICAgZGVmaW5lRWxlbWVudHMoZWxlbWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBrZXkoaWQpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHN0eWxlKC4uLnN0eWxlcykge1xuICAgIHN0eWxlc01hcC5zZXQoXG4gICAgICB0aGlzLFxuICAgICAgc3R5bGVzLmZpbHRlcihzdHlsZSA9PiBzdHlsZSksXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZShwYXJ0cywgYXJncywgaXNTVkcpIHtcbiAgY29uc3QgY3JlYXRlVGVtcGxhdGUgPSAoaG9zdCwgdGFyZ2V0ID0gaG9zdCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlcyA9IHN0eWxlc01hcC5nZXQoY3JlYXRlVGVtcGxhdGUpO1xuICAgIGxldCBoYXNBZG9wdGVkU3R5bGVTaGVldHM7XG4gICAgbGV0IGlkID0gcGFydHMuam9pbihQTEFDRUhPTERFUik7XG5cbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICBjb25zdCBqb2luZWRTdHlsZXMgPSBzdHlsZXMuam9pbihQTEFDRUhPTERFUik7XG4gICAgICBoYXNBZG9wdGVkU3R5bGVTaGVldHMgPVxuICAgICAgICAhIXRhcmdldC5hZG9wdGVkU3R5bGVTaGVldHMgJiYgIVNUWUxFX0lNUE9SVF9SRUdFWFAudGVzdChqb2luZWRTdHlsZXMpO1xuICAgICAgaWYgKCFoYXNBZG9wdGVkU3R5bGVTaGVldHMpIGlkICs9IGpvaW5lZFN0eWxlcztcbiAgICB9XG5cbiAgICBpZiAoaXNTVkcpIGlkICs9IFNWR19QTEFDRUhPTERFUjtcblxuICAgIGxldCByZW5kZXIgPSB0ZW1wbGF0ZXNNYXAuZ2V0KGlkKTtcbiAgICBpZiAoIXJlbmRlcikge1xuICAgICAgcmVuZGVyID0gY29tcGlsZVRlbXBsYXRlKHBhcnRzLCBpc1NWRywgIWhhc0Fkb3B0ZWRTdHlsZVNoZWV0cyAmJiBzdHlsZXMpO1xuICAgICAgdGVtcGxhdGVzTWFwLnNldChpZCwgcmVuZGVyKTtcbiAgICB9XG5cbiAgICByZW5kZXIoaG9zdCwgdGFyZ2V0LCBhcmdzLCBoYXNBZG9wdGVkU3R5bGVTaGVldHMgJiYgc3R5bGVzKTtcbiAgfTtcblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihjcmVhdGVUZW1wbGF0ZSwgbWV0aG9kcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodG1sKHBhcnRzLCAuLi5hcmdzKSB7XG4gIHJldHVybiBjcmVhdGUocGFydHMsIGFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ZnKHBhcnRzLCAuLi5hcmdzKSB7XG4gIHJldHVybiBjcmVhdGUocGFydHMsIGFyZ3MsIHRydWUpO1xufVxuXG5PYmplY3QuYXNzaWduKGh0bWwsIGhlbHBlcnMpO1xuT2JqZWN0LmFzc2lnbihzdmcsIGhlbHBlcnMpO1xuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/index.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/resolvers/array.js":
/*!**************************************************************!*\
  !*** ./node_modules/hybrids/esm/template/resolvers/array.js ***!
  \**************************************************************/
/*! exports provided: arrayMap, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arrayMap\", function() { return arrayMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return resolveArray; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/hybrids/esm/template/utils.js\");\n\nvar arrayMap = new WeakMap();\n\nfunction movePlaceholder(target, previousSibling) {\n  var data = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dataMap\"].get(target);\n  var startNode = data.startNode;\n  var endNode = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getTemplateEnd\"])(data.endNode);\n  previousSibling.parentNode.insertBefore(target, previousSibling.nextSibling);\n  var prevNode = target;\n  var node = startNode;\n\n  while (node) {\n    var nextNode = node.nextSibling;\n    prevNode.parentNode.insertBefore(node, prevNode.nextSibling);\n    prevNode = node;\n    node = nextNode !== endNode.nextSibling && nextNode;\n  }\n}\n\nfunction resolveArray(host, target, value, resolveValue) {\n  var lastEntries = arrayMap.get(target);\n  var entries = value.map(function (item, index) {\n    return {\n      id: Object.prototype.hasOwnProperty.call(item, \"id\") ? item.id : index,\n      value: item,\n      placeholder: null,\n      available: true\n    };\n  });\n  arrayMap.set(target, entries);\n\n  if (lastEntries) {\n    var ids = new Set();\n    entries.forEach(function (entry) {\n      return ids.add(entry.id);\n    });\n    lastEntries = lastEntries.filter(function (entry) {\n      if (!ids.has(entry.id)) {\n        Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"removeTemplate\"])(entry.placeholder);\n        entry.placeholder.parentNode.removeChild(entry.placeholder);\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  var previousSibling = target;\n  var lastIndex = value.length - 1;\n  var data = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dataMap\"].get(target);\n\n  for (var index = 0; index < entries.length; index += 1) {\n    var entry = entries[index];\n    var matchedEntry = void 0;\n\n    if (lastEntries) {\n      for (var i = 0; i < lastEntries.length; i += 1) {\n        if (lastEntries[i].available && lastEntries[i].id === entry.id) {\n          matchedEntry = lastEntries[i];\n          break;\n        }\n      }\n    }\n\n    if (matchedEntry) {\n      matchedEntry.available = false;\n      entry.placeholder = matchedEntry.placeholder;\n\n      if (entry.placeholder.previousSibling !== previousSibling) {\n        movePlaceholder(entry.placeholder, previousSibling);\n      }\n\n      if (matchedEntry.value !== entry.value) {\n        resolveValue(host, entry.placeholder, entry.value);\n      }\n    } else {\n      entry.placeholder = document.createTextNode(\"\");\n      previousSibling.parentNode.insertBefore(entry.placeholder, previousSibling.nextSibling);\n      resolveValue(host, entry.placeholder, entry.value);\n    }\n\n    previousSibling = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getTemplateEnd\"])(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dataMap\"].get(entry.placeholder).endNode || entry.placeholder);\n    if (index === 0) data.startNode = entry.placeholder;\n    if (index === lastIndex) data.endNode = previousSibling;\n  }\n\n  if (lastEntries) {\n    lastEntries.forEach(function (entry) {\n      if (entry.available) {\n        Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"removeTemplate\"])(entry.placeholder);\n        entry.placeholder.parentNode.removeChild(entry.placeholder);\n      }\n    });\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/resolvers/array.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/resolvers/class.js":
/*!**************************************************************!*\
  !*** ./node_modules/hybrids/esm/template/resolvers/class.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return resolveClassList; });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction normalizeValue(value) {\n  var set = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n\n  if (Array.isArray(value)) {\n    value.forEach(function (className) {\n      return set.add(className);\n    });\n  } else if (value !== null && _typeof(value) === \"object\") {\n    Object.keys(value).forEach(function (key) {\n      return value[key] && set.add(key);\n    });\n  } else {\n    set.add(value);\n  }\n\n  return set;\n}\n\nvar classMap = new WeakMap();\nfunction resolveClassList(host, target, value) {\n  var previousList = classMap.get(target) || new Set();\n  var list = normalizeValue(value);\n  classMap.set(target, list);\n  list.forEach(function (className) {\n    target.classList.add(className);\n    previousList.delete(className);\n  });\n  previousList.forEach(function (className) {\n    target.classList.remove(className);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvY2xhc3MuanMiXSwibmFtZXMiOlsibm9ybWFsaXplVmFsdWUiLCJ2YWx1ZSIsInNldCIsIlNldCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJjbGFzc05hbWUiLCJhZGQiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiY2xhc3NNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZUNsYXNzTGlzdCIsImhvc3QiLCJ0YXJnZXQiLCJwcmV2aW91c0xpc3QiLCJnZXQiLCJsaXN0IiwiY2xhc3NMaXN0IiwiZGVsZXRlIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQWdEO0FBQUEsTUFBakJDLEdBQWlCLHVFQUFYLElBQUlDLEdBQUosRUFBVzs7QUFDOUMsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNKLEtBQWQsQ0FBSixFQUEwQjtBQUN4QkEsSUFBQUEsS0FBSyxDQUFDSyxPQUFOLENBQWMsVUFBQUMsU0FBUztBQUFBLGFBQUlMLEdBQUcsQ0FBQ00sR0FBSixDQUFRRCxTQUFSLENBQUo7QUFBQSxLQUF2QjtBQUNELEdBRkQsTUFFTyxJQUFJTixLQUFLLEtBQUssSUFBVixJQUFrQixRQUFPQSxLQUFQLE1BQWlCLFFBQXZDLEVBQWlEO0FBQ3REUSxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVQsS0FBWixFQUFtQkssT0FBbkIsQ0FBMkIsVUFBQUssR0FBRztBQUFBLGFBQUlWLEtBQUssQ0FBQ1UsR0FBRCxDQUFMLElBQWNULEdBQUcsQ0FBQ00sR0FBSixDQUFRRyxHQUFSLENBQWxCO0FBQUEsS0FBOUI7QUFDRCxHQUZNLE1BRUE7QUFDTFQsSUFBQUEsR0FBRyxDQUFDTSxHQUFKLENBQVFQLEtBQVI7QUFDRDs7QUFFRCxTQUFPQyxHQUFQO0FBQ0Q7O0FBRUQsSUFBTVUsUUFBUSxHQUFHLElBQUlDLE9BQUosRUFBakI7QUFFQSxlQUFlLFNBQVNDLGdCQUFULENBQTBCQyxJQUExQixFQUFnQ0MsTUFBaEMsRUFBd0NmLEtBQXhDLEVBQStDO0FBQzVELE1BQU1nQixZQUFZLEdBQUdMLFFBQVEsQ0FBQ00sR0FBVCxDQUFhRixNQUFiLEtBQXdCLElBQUliLEdBQUosRUFBN0M7QUFDQSxNQUFNZ0IsSUFBSSxHQUFHbkIsY0FBYyxDQUFDQyxLQUFELENBQTNCO0FBRUFXLEVBQUFBLFFBQVEsQ0FBQ1YsR0FBVCxDQUFhYyxNQUFiLEVBQXFCRyxJQUFyQjtBQUVBQSxFQUFBQSxJQUFJLENBQUNiLE9BQUwsQ0FBYSxVQUFBQyxTQUFTLEVBQUk7QUFDeEJTLElBQUFBLE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQlosR0FBakIsQ0FBcUJELFNBQXJCO0FBQ0FVLElBQUFBLFlBQVksQ0FBQ0ksTUFBYixDQUFvQmQsU0FBcEI7QUFDRCxHQUhEO0FBS0FVLEVBQUFBLFlBQVksQ0FBQ1gsT0FBYixDQUFxQixVQUFBQyxTQUFTLEVBQUk7QUFDaENTLElBQUFBLE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQkUsTUFBakIsQ0FBd0JmLFNBQXhCO0FBQ0QsR0FGRDtBQUdEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUsIHNldCA9IG5ldyBTZXQoKSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGNsYXNzTmFtZSA9PiBzZXQuYWRkKGNsYXNzTmFtZSkpO1xuICB9IGVsc2UgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGtleSA9PiB2YWx1ZVtrZXldICYmIHNldC5hZGQoa2V5KSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0LmFkZCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG5jb25zdCBjbGFzc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVDbGFzc0xpc3QoaG9zdCwgdGFyZ2V0LCB2YWx1ZSkge1xuICBjb25zdCBwcmV2aW91c0xpc3QgPSBjbGFzc01hcC5nZXQodGFyZ2V0KSB8fCBuZXcgU2V0KCk7XG4gIGNvbnN0IGxpc3QgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgY2xhc3NNYXAuc2V0KHRhcmdldCwgbGlzdCk7XG5cbiAgbGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICBwcmV2aW91c0xpc3QuZGVsZXRlKGNsYXNzTmFtZSk7XG4gIH0pO1xuXG4gIHByZXZpb3VzTGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSk7XG59XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL2NsYXNzLmpzPzkzMWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBLHVCQUF1QiwyQkFBMkIsMkVBQTJFLGtDQUFrQyxtQkFBbUIsR0FBRyxFQUFFLE9BQU8sa0NBQWtDLDhIQUE4SCxHQUFHLEVBQUUscUJBQXFCOztBQUV4WDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDJDQUEyQyxjQUFjIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL3Jlc29sdmVycy9jbGFzcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgdmFyIHNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbmV3IFNldCgpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIHNldC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZVtrZXldICYmIHNldC5hZGQoa2V5KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzZXQuYWRkKHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbnZhciBjbGFzc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlQ2xhc3NMaXN0KGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgdmFyIHByZXZpb3VzTGlzdCA9IGNsYXNzTWFwLmdldCh0YXJnZXQpIHx8IG5ldyBTZXQoKTtcbiAgdmFyIGxpc3QgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gIGNsYXNzTWFwLnNldCh0YXJnZXQsIGxpc3QpO1xuICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgcHJldmlvdXNMaXN0LmRlbGV0ZShjbGFzc05hbWUpO1xuICB9KTtcbiAgcHJldmlvdXNMaXN0LmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OTBaVzF3YkdGMFpTOXlaWE52YkhabGNuTXZZMnhoYzNNdWFuTWlYU3dpYm1GdFpYTWlPbHNpYm05eWJXRnNhWHBsVm1Gc2RXVWlMQ0oyWVd4MVpTSXNJbk5sZENJc0lsTmxkQ0lzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW1admNrVmhZMmdpTENKamJHRnpjMDVoYldVaUxDSmhaR1FpTENKUFltcGxZM1FpTENKclpYbHpJaXdpYTJWNUlpd2lZMnhoYzNOTllYQWlMQ0pYWldGclRXRndJaXdpY21WemIyeDJaVU5zWVhOelRHbHpkQ0lzSW1odmMzUWlMQ0owWVhKblpYUWlMQ0p3Y21WMmFXOTFjMHhwYzNRaUxDSm5aWFFpTENKc2FYTjBJaXdpWTJ4aGMzTk1hWE4wSWl3aVpHVnNaWFJsSWl3aWNtVnRiM1psSWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxGTkJRVk5CTEdOQlFWUXNRMEZCZDBKRExFdEJRWGhDTEVWQlFXZEVPMEZCUVVFc1RVRkJha0pETEVkQlFXbENMSFZGUVVGWUxFbEJRVWxETEVkQlFVb3NSVUZCVnpzN1FVRkRPVU1zVFVGQlNVTXNTMEZCU3l4RFFVRkRReXhQUVVGT0xFTkJRV05LTEV0QlFXUXNRMEZCU2l4RlFVRXdRanRCUVVONFFrRXNTVUZCUVVFc1MwRkJTeXhEUVVGRFN5eFBRVUZPTEVOQlFXTXNWVUZCUVVNc1UwRkJVenRCUVVGQkxHRkJRVWxNTEVkQlFVY3NRMEZCUTAwc1IwRkJTaXhEUVVGUlJDeFRRVUZTTEVOQlFVbzdRVUZCUVN4TFFVRjJRanRCUVVORUxFZEJSa1FzVFVGRlR5eEpRVUZKVGl4TFFVRkxMRXRCUVVzc1NVRkJWaXhKUVVGclFpeFJRVUZQUVN4TFFVRlFMRTFCUVdsQ0xGRkJRWFpETEVWQlFXbEVPMEZCUTNSRVVTeEpRVUZCUVN4TlFVRk5MRU5CUVVORExFbEJRVkFzUTBGQldWUXNTMEZCV2l4RlFVRnRRa3NzVDBGQmJrSXNRMEZCTWtJc1ZVRkJRVXNzUjBGQlJ6dEJRVUZCTEdGQlFVbFdMRXRCUVVzc1EwRkJRMVVzUjBGQlJDeERRVUZNTEVsQlFXTlVMRWRCUVVjc1EwRkJRMDBzUjBGQlNpeERRVUZSUnl4SFFVRlNMRU5CUVd4Q08wRkJRVUVzUzBGQk9VSTdRVUZEUkN4SFFVWk5MRTFCUlVFN1FVRkRURlFzU1VGQlFVRXNSMEZCUnl4RFFVRkRUU3hIUVVGS0xFTkJRVkZRTEV0QlFWSTdRVUZEUkRzN1FVRkZSQ3hUUVVGUFF5eEhRVUZRTzBGQlEwUTdPMEZCUlVRc1NVRkJUVlVzVVVGQlVTeEhRVUZITEVsQlFVbERMRTlCUVVvc1JVRkJha0k3UVVGRlFTeGxRVUZsTEZOQlFWTkRMR2RDUVVGVUxFTkJRVEJDUXl4SlFVRXhRaXhGUVVGblEwTXNUVUZCYUVNc1JVRkJkME5tTEV0QlFYaERMRVZCUVN0RE8wRkJRelZFTEUxQlFVMW5RaXhaUVVGWkxFZEJRVWRNTEZGQlFWRXNRMEZCUTAwc1IwRkJWQ3hEUVVGaFJpeE5RVUZpTEV0QlFYZENMRWxCUVVsaUxFZEJRVW9zUlVGQk4wTTdRVUZEUVN4TlFVRk5aMElzU1VGQlNTeEhRVUZIYmtJc1kwRkJZeXhEUVVGRFF5eExRVUZFTEVOQlFUTkNPMEZCUlVGWExFVkJRVUZCTEZGQlFWRXNRMEZCUTFZc1IwRkJWQ3hEUVVGaFl5eE5RVUZpTEVWQlFYRkNSeXhKUVVGeVFqdEJRVVZCUVN4RlFVRkJRU3hKUVVGSkxFTkJRVU5pTEU5QlFVd3NRMEZCWVN4VlFVRkJReXhUUVVGVExFVkJRVWs3UVVGRGVFSlRMRWxCUVVGQkxFMUJRVTBzUTBGQlEwa3NVMEZCVUN4RFFVRnBRbG9zUjBGQmFrSXNRMEZCY1VKRUxGTkJRWEpDTzBGQlEwRlZMRWxCUVVGQkxGbEJRVmtzUTBGQlEwa3NUVUZCWWl4RFFVRnZRbVFzVTBGQmNFSTdRVUZEUkN4SFFVaEVPMEZCUzBGVkxFVkJRVUZCTEZsQlFWa3NRMEZCUTFnc1QwRkJZaXhEUVVGeFFpeFZRVUZCUXl4VFFVRlRMRVZCUVVrN1FVRkRhRU5UTEVsQlFVRkJMRTFCUVUwc1EwRkJRMGtzVTBGQlVDeERRVUZwUWtVc1RVRkJha0lzUTBGQmQwSm1MRk5CUVhoQ08wRkJRMFFzUjBGR1JEdEJRVWRFSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpuVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFZtRnNkV1VvZG1Gc2RXVXNJSE5sZENBOUlHNWxkeUJUWlhRb0tTa2dlMXh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoMllXeDFaU2twSUh0Y2JpQWdJQ0IyWVd4MVpTNW1iM0pGWVdOb0tHTnNZWE56VG1GdFpTQTlQaUJ6WlhRdVlXUmtLR05zWVhOelRtRnRaU2twTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLSFpoYkhWbElDRTlQU0J1ZFd4c0lDWW1JSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdYQ0p2WW1wbFkzUmNJaWtnZTF4dUlDQWdJRTlpYW1WamRDNXJaWGx6S0haaGJIVmxLUzVtYjNKRllXTm9LR3RsZVNBOVBpQjJZV3gxWlZ0clpYbGRJQ1ltSUhObGRDNWhaR1FvYTJWNUtTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjMlYwTG1Ga1pDaDJZV3gxWlNrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2MyVjBPMXh1ZlZ4dVhHNWpiMjV6ZENCamJHRnpjMDFoY0NBOUlHNWxkeUJYWldGclRXRndLQ2s3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKbGMyOXNkbVZEYkdGemMweHBjM1FvYUc5emRDd2dkR0Z5WjJWMExDQjJZV3gxWlNrZ2UxeHVJQ0JqYjI1emRDQndjbVYyYVc5MWMweHBjM1FnUFNCamJHRnpjMDFoY0M1blpYUW9kR0Z5WjJWMEtTQjhmQ0J1WlhjZ1UyVjBLQ2s3WEc0Z0lHTnZibk4wSUd4cGMzUWdQU0J1YjNKdFlXeHBlbVZXWVd4MVpTaDJZV3gxWlNrN1hHNWNiaUFnWTJ4aGMzTk5ZWEF1YzJWMEtIUmhjbWRsZEN3Z2JHbHpkQ2s3WEc1Y2JpQWdiR2x6ZEM1bWIzSkZZV05vS0dOc1lYTnpUbUZ0WlNBOVBpQjdYRzRnSUNBZ2RHRnlaMlYwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMnhoYzNOT1lXMWxLVHRjYmlBZ0lDQndjbVYyYVc5MWMweHBjM1F1WkdWc1pYUmxLR05zWVhOelRtRnRaU2s3WEc0Z0lIMHBPMXh1WEc0Z0lIQnlaWFpwYjNWelRHbHpkQzVtYjNKRllXTm9LR05zWVhOelRtRnRaU0E5UGlCN1hHNGdJQ0FnZEdGeVoyVjBMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9ZMnhoYzNOT1lXMWxLVHRjYmlBZ2ZTazdYRzU5WEc0aVhYMD0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/resolvers/class.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/resolvers/event.js":
/*!**************************************************************!*\
  !*** ./node_modules/hybrids/esm/template/resolvers/event.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return resolveEventListener; });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar targets = new WeakMap();\nfunction resolveEventListener(eventType) {\n  return function (host, target, value, lastValue) {\n    if (lastValue) {\n      var eventMap = targets.get(target);\n\n      if (eventMap) {\n        target.removeEventListener(eventType, eventMap.get(lastValue), lastValue.options !== undefined ? lastValue.options : false);\n      }\n    }\n\n    if (value) {\n      if (typeof value !== \"function\") {\n        throw Error(\"Event listener must be a function: \".concat(_typeof(value)));\n      }\n\n      var _eventMap = targets.get(target);\n\n      if (!_eventMap) {\n        _eventMap = new WeakMap();\n        targets.set(target, _eventMap);\n      }\n\n      var callback = value.bind(null, host);\n\n      _eventMap.set(value, callback);\n\n      target.addEventListener(eventType, callback, value.options !== undefined ? value.options : false);\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvZXZlbnQuanMiXSwibmFtZXMiOlsidGFyZ2V0cyIsIldlYWtNYXAiLCJyZXNvbHZlRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImhvc3QiLCJ0YXJnZXQiLCJ2YWx1ZSIsImxhc3RWYWx1ZSIsImV2ZW50TWFwIiwiZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJFcnJvciIsInNldCIsImNhbGxiYWNrIiwiYmluZCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsT0FBTyxHQUFHLElBQUlDLE9BQUosRUFBaEI7QUFFQSxlQUFlLFNBQVNDLG9CQUFULENBQThCQyxTQUE5QixFQUF5QztBQUN0RCxTQUFPLFVBQUNDLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXNCQyxTQUF0QixFQUFvQztBQUN6QyxRQUFJQSxTQUFKLEVBQWU7QUFDYixVQUFNQyxRQUFRLEdBQUdSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZSixNQUFaLENBQWpCOztBQUNBLFVBQUlHLFFBQUosRUFBYztBQUNaSCxRQUFBQSxNQUFNLENBQUNLLG1CQUFQLENBQ0VQLFNBREYsRUFFRUssUUFBUSxDQUFDQyxHQUFULENBQWFGLFNBQWIsQ0FGRixFQUdFQSxTQUFTLENBQUNJLE9BQVYsS0FBc0JDLFNBQXRCLEdBQWtDTCxTQUFTLENBQUNJLE9BQTVDLEdBQXNELEtBSHhEO0FBS0Q7QUFDRjs7QUFFRCxRQUFJTCxLQUFKLEVBQVc7QUFDVCxVQUFJLE9BQU9BLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDL0IsY0FBTU8sS0FBSyxzREFBOENQLEtBQTlDLEdBQVg7QUFDRDs7QUFFRCxVQUFJRSxTQUFRLEdBQUdSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZSixNQUFaLENBQWY7O0FBQ0EsVUFBSSxDQUFDRyxTQUFMLEVBQWU7QUFDYkEsUUFBQUEsU0FBUSxHQUFHLElBQUlQLE9BQUosRUFBWDtBQUNBRCxRQUFBQSxPQUFPLENBQUNjLEdBQVIsQ0FBWVQsTUFBWixFQUFvQkcsU0FBcEI7QUFDRDs7QUFFRCxVQUFNTyxRQUFRLEdBQUdULEtBQUssQ0FBQ1UsSUFBTixDQUFXLElBQVgsRUFBaUJaLElBQWpCLENBQWpCOztBQUNBSSxNQUFBQSxTQUFRLENBQUNNLEdBQVQsQ0FBYVIsS0FBYixFQUFvQlMsUUFBcEI7O0FBRUFWLE1BQUFBLE1BQU0sQ0FBQ1ksZ0JBQVAsQ0FDRWQsU0FERixFQUVFWSxRQUZGLEVBR0VULEtBQUssQ0FBQ0ssT0FBTixLQUFrQkMsU0FBbEIsR0FBOEJOLEtBQUssQ0FBQ0ssT0FBcEMsR0FBOEMsS0FIaEQ7QUFLRDtBQUNGLEdBaENEO0FBaUNEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFyZ2V0cyA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSkge1xuICByZXR1cm4gKGhvc3QsIHRhcmdldCwgdmFsdWUsIGxhc3RWYWx1ZSkgPT4ge1xuICAgIGlmIChsYXN0VmFsdWUpIHtcbiAgICAgIGNvbnN0IGV2ZW50TWFwID0gdGFyZ2V0cy5nZXQodGFyZ2V0KTtcbiAgICAgIGlmIChldmVudE1hcCkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgZXZlbnRNYXAuZ2V0KGxhc3RWYWx1ZSksXG4gICAgICAgICAgbGFzdFZhbHVlLm9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IGxhc3RWYWx1ZS5vcHRpb25zIDogZmFsc2UsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYEV2ZW50IGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbjogJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBldmVudE1hcCA9IHRhcmdldHMuZ2V0KHRhcmdldCk7XG4gICAgICBpZiAoIWV2ZW50TWFwKSB7XG4gICAgICAgIGV2ZW50TWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgdGFyZ2V0cy5zZXQodGFyZ2V0LCBldmVudE1hcCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gdmFsdWUuYmluZChudWxsLCBob3N0KTtcbiAgICAgIGV2ZW50TWFwLnNldCh2YWx1ZSwgY2FsbGJhY2spO1xuXG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgdmFsdWUub3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gdmFsdWUub3B0aW9ucyA6IGZhbHNlLFxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL2V2ZW50LmpzPzQzMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBLHVCQUF1QiwyQkFBMkIsMkVBQTJFLGtDQUFrQyxtQkFBbUIsR0FBRyxFQUFFLE9BQU8sa0NBQWtDLDhIQUE4SCxHQUFHLEVBQUUscUJBQXFCOztBQUV4WDtBQUNlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL2V2ZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgdGFyZ2V0cyA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChob3N0LCB0YXJnZXQsIHZhbHVlLCBsYXN0VmFsdWUpIHtcbiAgICBpZiAobGFzdFZhbHVlKSB7XG4gICAgICB2YXIgZXZlbnRNYXAgPSB0YXJnZXRzLmdldCh0YXJnZXQpO1xuXG4gICAgICBpZiAoZXZlbnRNYXApIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudE1hcC5nZXQobGFzdFZhbHVlKSwgbGFzdFZhbHVlLm9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IGxhc3RWYWx1ZS5vcHRpb25zIDogZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiRXZlbnQgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uOiBcIi5jb25jYXQoX3R5cGVvZih2YWx1ZSkpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9ldmVudE1hcCA9IHRhcmdldHMuZ2V0KHRhcmdldCk7XG5cbiAgICAgIGlmICghX2V2ZW50TWFwKSB7XG4gICAgICAgIF9ldmVudE1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRhcmdldHMuc2V0KHRhcmdldCwgX2V2ZW50TWFwKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGxiYWNrID0gdmFsdWUuYmluZChudWxsLCBob3N0KTtcblxuICAgICAgX2V2ZW50TWFwLnNldCh2YWx1ZSwgY2FsbGJhY2spO1xuXG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB2YWx1ZS5vcHRpb25zICE9PSB1bmRlZmluZWQgPyB2YWx1ZS5vcHRpb25zIDogZmFsc2UpO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTkwWlcxd2JHRjBaUzl5WlhOdmJIWmxjbk12WlhabGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRHRnlaMlYwY3lJc0lsZGxZV3ROWVhBaUxDSnlaWE52YkhabFJYWmxiblJNYVhOMFpXNWxjaUlzSW1WMlpXNTBWSGx3WlNJc0ltaHZjM1FpTENKMFlYSm5aWFFpTENKMllXeDFaU0lzSW14aGMzUldZV3gxWlNJc0ltVjJaVzUwVFdGd0lpd2laMlYwSWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpSXNJbTl3ZEdsdmJuTWlMQ0oxYm1SbFptbHVaV1FpTENKRmNuSnZjaUlzSW5ObGRDSXNJbU5oYkd4aVlXTnJJaXdpWW1sdVpDSXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRVRXNUMEZCVHl4SFFVRkhMRWxCUVVsRExFOUJRVW9zUlVGQmFFSTdRVUZGUVN4bFFVRmxMRk5CUVZORExHOUNRVUZVTEVOQlFUaENReXhUUVVFNVFpeEZRVUY1UXp0QlFVTjBSQ3hUUVVGUExGVkJRVU5ETEVsQlFVUXNSVUZCVDBNc1RVRkJVQ3hGUVVGbFF5eExRVUZtTEVWQlFYTkNReXhUUVVGMFFpeEZRVUZ2UXp0QlFVTjZReXhSUVVGSlFTeFRRVUZLTEVWQlFXVTdRVUZEWWl4VlFVRk5ReXhSUVVGUkxFZEJRVWRTTEU5QlFVOHNRMEZCUTFNc1IwRkJVaXhEUVVGWlNpeE5RVUZhTEVOQlFXcENPenRCUVVOQkxGVkJRVWxITEZGQlFVb3NSVUZCWXp0QlFVTmFTQ3hSUVVGQlFTeE5RVUZOTEVOQlFVTkxMRzFDUVVGUUxFTkJRMFZRTEZOQlJFWXNSVUZGUlVzc1VVRkJVU3hEUVVGRFF5eEhRVUZVTEVOQlFXRkdMRk5CUVdJc1EwRkdSaXhGUVVkRlFTeFRRVUZUTEVOQlFVTkpMRTlCUVZZc1MwRkJjMEpETEZOQlFYUkNMRWRCUVd0RFRDeFRRVUZUTEVOQlFVTkpMRTlCUVRWRExFZEJRWE5FTEV0QlNIaEVPMEZCUzBRN1FVRkRSanM3UVVGRlJDeFJRVUZKVEN4TFFVRktMRVZCUVZjN1FVRkRWQ3hWUVVGSkxFOUJRVTlCTEV0QlFWQXNTMEZCYVVJc1ZVRkJja0lzUlVGQmFVTTdRVUZETDBJc1kwRkJUVThzUzBGQlN5eHpSRUZCT0VOUUxFdEJRVGxETEVkQlFWZzdRVUZEUkRzN1FVRkZSQ3hWUVVGSlJTeFRRVUZSTEVkQlFVZFNMRTlCUVU4c1EwRkJRMU1zUjBGQlVpeERRVUZaU2l4TlFVRmFMRU5CUVdZN08wRkJRMEVzVlVGQlNTeERRVUZEUnl4VFFVRk1MRVZCUVdVN1FVRkRZa0VzVVVGQlFVRXNVMEZCVVN4SFFVRkhMRWxCUVVsUUxFOUJRVW9zUlVGQldEdEJRVU5CUkN4UlFVRkJRU3hQUVVGUExFTkJRVU5qTEVkQlFWSXNRMEZCV1ZRc1RVRkJXaXhGUVVGdlFrY3NVMEZCY0VJN1FVRkRSRHM3UVVGRlJDeFZRVUZOVHl4UlFVRlJMRWRCUVVkVUxFdEJRVXNzUTBGQlExVXNTVUZCVGl4RFFVRlhMRWxCUVZnc1JVRkJhVUphTEVsQlFXcENMRU5CUVdwQ096dEJRVU5CU1N4TlFVRkJRU3hUUVVGUkxFTkJRVU5OTEVkQlFWUXNRMEZCWVZJc1MwRkJZaXhGUVVGdlFsTXNVVUZCY0VJN08wRkJSVUZXTEUxQlFVRkJMRTFCUVUwc1EwRkJRMWtzWjBKQlFWQXNRMEZEUldRc1UwRkVSaXhGUVVWRldTeFJRVVpHTEVWQlIwVlVMRXRCUVVzc1EwRkJRMHNzVDBGQlRpeExRVUZyUWtNc1UwRkJiRUlzUjBGQk9FSk9MRXRCUVVzc1EwRkJRMHNzVDBGQmNFTXNSMEZCT0VNc1MwRklhRVE3UVVGTFJEdEJRVU5HTEVkQmFFTkVPMEZCYVVORUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMjl1YzNRZ2RHRnlaMlYwY3lBOUlHNWxkeUJYWldGclRXRndLQ2s3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKbGMyOXNkbVZGZG1WdWRFeHBjM1JsYm1WeUtHVjJaVzUwVkhsd1pTa2dlMXh1SUNCeVpYUjFjbTRnS0dodmMzUXNJSFJoY21kbGRDd2dkbUZzZFdVc0lHeGhjM1JXWVd4MVpTa2dQVDRnZTF4dUlDQWdJR2xtSUNoc1lYTjBWbUZzZFdVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdWMlpXNTBUV0Z3SUQwZ2RHRnlaMlYwY3k1blpYUW9kR0Z5WjJWMEtUdGNiaUFnSUNBZ0lHbG1JQ2hsZG1WdWRFMWhjQ2tnZTF4dUlDQWdJQ0FnSUNCMFlYSm5aWFF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEZSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUk5ZWEF1WjJWMEtHeGhjM1JXWVd4MVpTa3NYRzRnSUNBZ0lDQWdJQ0FnYkdGemRGWmhiSFZsTG05d2RHbHZibk1nSVQwOUlIVnVaR1ZtYVc1bFpDQS9JR3hoYzNSV1lXeDFaUzV2Y0hScGIyNXpJRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb1lFVjJaVzUwSUd4cGMzUmxibVZ5SUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmpvZ0pIdDBlWEJsYjJZZ2RtRnNkV1Y5WUNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHeGxkQ0JsZG1WdWRFMWhjQ0E5SUhSaGNtZGxkSE11WjJWMEtIUmhjbWRsZENrN1hHNGdJQ0FnSUNCcFppQW9JV1YyWlc1MFRXRndLU0I3WEc0Z0lDQWdJQ0FnSUdWMlpXNTBUV0Z3SUQwZ2JtVjNJRmRsWVd0TllYQW9LVHRjYmlBZ0lDQWdJQ0FnZEdGeVoyVjBjeTV6WlhRb2RHRnlaMlYwTENCbGRtVnVkRTFoY0NrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk4wSUdOaGJHeGlZV05ySUQwZ2RtRnNkV1V1WW1sdVpDaHVkV3hzTENCb2IzTjBLVHRjYmlBZ0lDQWdJR1YyWlc1MFRXRndMbk5sZENoMllXeDFaU3dnWTJGc2JHSmhZMnNwTzF4dVhHNGdJQ0FnSUNCMFlYSm5aWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnWlhabGJuUlVlWEJsTEZ4dUlDQWdJQ0FnSUNCallXeHNZbUZqYXl4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1V1YjNCMGFXOXVjeUFoUFQwZ2RXNWtaV1pwYm1Wa0lEOGdkbUZzZFdVdWIzQjBhVzl1Y3lBNklHWmhiSE5sTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzU5WEc0aVhYMD0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/resolvers/event.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/resolvers/property.js":
/*!*****************************************************************!*\
  !*** ./node_modules/hybrids/esm/template/resolvers/property.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return resolveProperty; });\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ \"./node_modules/hybrids/esm/template/resolvers/event.js\");\n/* harmony import */ var _class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./class.js */ \"./node_modules/hybrids/esm/template/resolvers/class.js\");\n/* harmony import */ var _style_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style.js */ \"./node_modules/hybrids/esm/template/resolvers/style.js\");\n\n\n\nfunction resolveProperty(attrName, propertyName, isSVG) {\n  if (propertyName.substr(0, 2) === \"on\") {\n    var eventType = propertyName.substr(2);\n    return Object(_event_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(eventType);\n  }\n\n  switch (attrName) {\n    case \"class\":\n      return _class_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n\n    case \"style\":\n      return _style_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n\n    default:\n      return function (host, target, value) {\n        if (!isSVG && !(target instanceof SVGElement) && propertyName in target) {\n          if (target[propertyName] !== value) {\n            target[propertyName] = value;\n          }\n        } else if (value === false || value === undefined || value === null) {\n          target.removeAttribute(attrName);\n        } else {\n          var attrValue = value === true ? \"\" : String(value);\n          target.setAttribute(attrName, attrValue);\n        }\n      };\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvcHJvcGVydHkuanMiXSwibmFtZXMiOlsicmVzb2x2ZUV2ZW50TGlzdGVuZXIiLCJyZXNvbHZlQ2xhc3NMaXN0IiwicmVzb2x2ZVN0eWxlTGlzdCIsInJlc29sdmVQcm9wZXJ0eSIsImF0dHJOYW1lIiwicHJvcGVydHlOYW1lIiwiaXNTVkciLCJzdWJzdHIiLCJldmVudFR5cGUiLCJob3N0IiwidGFyZ2V0IiwidmFsdWUiLCJTVkdFbGVtZW50IiwidW5kZWZpbmVkIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clZhbHVlIiwiU3RyaW5nIiwic2V0QXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxvQkFBUCxNQUFpQyxZQUFqQztBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLFlBQTdCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsWUFBN0I7QUFFQSxlQUFlLFNBQVNDLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxZQUFuQyxFQUFpREMsS0FBakQsRUFBd0Q7QUFDckUsTUFBSUQsWUFBWSxDQUFDRSxNQUFiLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLE1BQThCLElBQWxDLEVBQXdDO0FBQ3RDLFFBQU1DLFNBQVMsR0FBR0gsWUFBWSxDQUFDRSxNQUFiLENBQW9CLENBQXBCLENBQWxCO0FBQ0EsV0FBT1Asb0JBQW9CLENBQUNRLFNBQUQsQ0FBM0I7QUFDRDs7QUFFRCxVQUFRSixRQUFSO0FBQ0UsU0FBSyxPQUFMO0FBQ0UsYUFBT0gsZ0JBQVA7O0FBQ0YsU0FBSyxPQUFMO0FBQ0UsYUFBT0MsZ0JBQVA7O0FBQ0Y7QUFDRSxhQUFPLFVBQUNPLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXlCO0FBQzlCLFlBQ0UsQ0FBQ0wsS0FBRCxJQUNBLEVBQUVJLE1BQU0sWUFBWUUsVUFBcEIsQ0FEQSxJQUVBUCxZQUFZLElBQUlLLE1BSGxCLEVBSUU7QUFDQSxjQUFJQSxNQUFNLENBQUNMLFlBQUQsQ0FBTixLQUF5Qk0sS0FBN0IsRUFBb0M7QUFDbENELFlBQUFBLE1BQU0sQ0FBQ0wsWUFBRCxDQUFOLEdBQXVCTSxLQUF2QjtBQUNEO0FBQ0YsU0FSRCxNQVFPLElBQUlBLEtBQUssS0FBSyxLQUFWLElBQW1CQSxLQUFLLEtBQUtFLFNBQTdCLElBQTBDRixLQUFLLEtBQUssSUFBeEQsRUFBOEQ7QUFDbkVELFVBQUFBLE1BQU0sQ0FBQ0ksZUFBUCxDQUF1QlYsUUFBdkI7QUFDRCxTQUZNLE1BRUE7QUFDTCxjQUFNVyxTQUFTLEdBQUdKLEtBQUssS0FBSyxJQUFWLEdBQWlCLEVBQWpCLEdBQXNCSyxNQUFNLENBQUNMLEtBQUQsQ0FBOUM7QUFDQUQsVUFBQUEsTUFBTSxDQUFDTyxZQUFQLENBQW9CYixRQUFwQixFQUE4QlcsU0FBOUI7QUFDRDtBQUNGLE9BZkQ7QUFOSjtBQXVCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZXNvbHZlRXZlbnRMaXN0ZW5lciBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IHJlc29sdmVDbGFzc0xpc3QgZnJvbSBcIi4vY2xhc3MuanNcIjtcbmltcG9ydCByZXNvbHZlU3R5bGVMaXN0IGZyb20gXCIuL3N0eWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0eShhdHRyTmFtZSwgcHJvcGVydHlOYW1lLCBpc1NWRykge1xuICBpZiAocHJvcGVydHlOYW1lLnN1YnN0cigwLCAyKSA9PT0gXCJvblwiKSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gcHJvcGVydHlOYW1lLnN1YnN0cigyKTtcbiAgICByZXR1cm4gcmVzb2x2ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlKTtcbiAgfVxuXG4gIHN3aXRjaCAoYXR0ck5hbWUpIHtcbiAgICBjYXNlIFwiY2xhc3NcIjpcbiAgICAgIHJldHVybiByZXNvbHZlQ2xhc3NMaXN0O1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgcmV0dXJuIHJlc29sdmVTdHlsZUxpc3Q7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAoaG9zdCwgdGFyZ2V0LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIWlzU1ZHICYmXG4gICAgICAgICAgISh0YXJnZXQgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSAmJlxuICAgICAgICAgIHByb3BlcnR5TmFtZSBpbiB0YXJnZXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHRhcmdldFtwcm9wZXJ0eU5hbWVdICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSB2YWx1ZSA9PT0gdHJ1ZSA/IFwiXCIgOiBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gIH1cbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL3Byb3BlcnR5LmpzPzFmNzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUE4QztBQUNKO0FBQ0E7QUFDM0I7QUFDZjtBQUNBO0FBQ0EsV0FBVyx5REFBb0I7QUFDL0I7O0FBRUE7QUFDQTtBQUNBLGFBQWEsaURBQWdCOztBQUU3QjtBQUNBLGFBQWEsaURBQWdCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL3Byb3BlcnR5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlc29sdmVFdmVudExpc3RlbmVyIGZyb20gXCIuL2V2ZW50LmpzXCI7XG5pbXBvcnQgcmVzb2x2ZUNsYXNzTGlzdCBmcm9tIFwiLi9jbGFzcy5qc1wiO1xuaW1wb3J0IHJlc29sdmVTdHlsZUxpc3QgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0eShhdHRyTmFtZSwgcHJvcGVydHlOYW1lLCBpc1NWRykge1xuICBpZiAocHJvcGVydHlOYW1lLnN1YnN0cigwLCAyKSA9PT0gXCJvblwiKSB7XG4gICAgdmFyIGV2ZW50VHlwZSA9IHByb3BlcnR5TmFtZS5zdWJzdHIoMik7XG4gICAgcmV0dXJuIHJlc29sdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSk7XG4gIH1cblxuICBzd2l0Y2ggKGF0dHJOYW1lKSB7XG4gICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICByZXR1cm4gcmVzb2x2ZUNsYXNzTGlzdDtcblxuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgcmV0dXJuIHJlc29sdmVTdHlsZUxpc3Q7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChob3N0LCB0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNTVkcgJiYgISh0YXJnZXQgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSAmJiBwcm9wZXJ0eU5hbWUgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKHRhcmdldFtwcm9wZXJ0eU5hbWVdICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYXR0clZhbHVlID0gdmFsdWUgPT09IHRydWUgPyBcIlwiIDogU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5eVpYTnZiSFpsY25NdmNISnZjR1Z5ZEhrdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WemIyeDJaVVYyWlc1MFRHbHpkR1Z1WlhJaUxDSnlaWE52YkhabFEyeGhjM05NYVhOMElpd2ljbVZ6YjJ4MlpWTjBlV3hsVEdsemRDSXNJbkpsYzI5c2RtVlFjbTl3WlhKMGVTSXNJbUYwZEhKT1lXMWxJaXdpY0hKdmNHVnlkSGxPWVcxbElpd2lhWE5UVmtjaUxDSnpkV0p6ZEhJaUxDSmxkbVZ1ZEZSNWNHVWlMQ0pvYjNOMElpd2lkR0Z5WjJWMElpd2lkbUZzZFdVaUxDSlRWa2RGYkdWdFpXNTBJaXdpZFc1a1pXWnBibVZrSWl3aWNtVnRiM1psUVhSMGNtbGlkWFJsSWl3aVlYUjBjbFpoYkhWbElpd2lVM1J5YVc1bklpd2ljMlYwUVhSMGNtbGlkWFJsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4UFFVRlBRU3h2UWtGQlVDeE5RVUZwUXl4WlFVRnFRenRCUVVOQkxFOUJRVTlETEdkQ1FVRlFMRTFCUVRaQ0xGbEJRVGRDTzBGQlEwRXNUMEZCVDBNc1owSkJRVkFzVFVGQk5rSXNXVUZCTjBJN1FVRkZRU3hsUVVGbExGTkJRVk5ETEdWQlFWUXNRMEZCZVVKRExGRkJRWHBDTEVWQlFXMURReXhaUVVGdVF5eEZRVUZwUkVNc1MwRkJha1FzUlVGQmQwUTdRVUZEY2tVc1RVRkJTVVFzV1VGQldTeERRVUZEUlN4TlFVRmlMRU5CUVc5Q0xFTkJRWEJDTEVWQlFYVkNMRU5CUVhaQ0xFMUJRVGhDTEVsQlFXeERMRVZCUVhkRE8wRkJRM1JETEZGQlFVMURMRk5CUVZNc1IwRkJSMGdzV1VGQldTeERRVUZEUlN4TlFVRmlMRU5CUVc5Q0xFTkJRWEJDTEVOQlFXeENPMEZCUTBFc1YwRkJUMUFzYjBKQlFXOUNMRU5CUVVOUkxGTkJRVVFzUTBGQk0wSTdRVUZEUkRzN1FVRkZSQ3hWUVVGUlNpeFJRVUZTTzBGQlEwVXNVMEZCU3l4UFFVRk1PMEZCUTBVc1lVRkJUMGdzWjBKQlFWQTdPMEZCUTBZc1UwRkJTeXhQUVVGTU8wRkJRMFVzWVVGQlQwTXNaMEpCUVZBN08wRkJRMFk3UVVGRFJTeGhRVUZQTEZWQlFVTlBMRWxCUVVRc1JVRkJUME1zVFVGQlVDeEZRVUZsUXl4TFFVRm1MRVZCUVhsQ08wRkJRemxDTEZsQlEwVXNRMEZCUTB3c1MwRkJSQ3hKUVVOQkxFVkJRVVZKTEUxQlFVMHNXVUZCV1VVc1ZVRkJjRUlzUTBGRVFTeEpRVVZCVUN4WlFVRlpMRWxCUVVsTExFMUJTR3hDTEVWQlNVVTdRVUZEUVN4alFVRkpRU3hOUVVGTkxFTkJRVU5NTEZsQlFVUXNRMEZCVGl4TFFVRjVRazBzUzBGQk4wSXNSVUZCYjBNN1FVRkRiRU5FTEZsQlFVRkJMRTFCUVUwc1EwRkJRMHdzV1VGQlJDeERRVUZPTEVkQlFYVkNUU3hMUVVGMlFqdEJRVU5FTzBGQlEwWXNVMEZTUkN4TlFWRlBMRWxCUVVsQkxFdEJRVXNzUzBGQlN5eExRVUZXTEVsQlFXMUNRU3hMUVVGTExFdEJRVXRGTEZOQlFUZENMRWxCUVRCRFJpeExRVUZMTEV0QlFVc3NTVUZCZUVRc1JVRkJPRVE3UVVGRGJrVkVMRlZCUVVGQkxFMUJRVTBzUTBGQlEwa3NaVUZCVUN4RFFVRjFRbFlzVVVGQmRrSTdRVUZEUkN4VFFVWk5MRTFCUlVFN1FVRkRUQ3hqUVVGTlZ5eFRRVUZUTEVkQlFVZEtMRXRCUVVzc1MwRkJTeXhKUVVGV0xFZEJRV2xDTEVWQlFXcENMRWRCUVhOQ1N5eE5RVUZOTEVOQlFVTk1MRXRCUVVRc1EwRkJPVU03UVVGRFFVUXNWVUZCUVVFc1RVRkJUU3hEUVVGRFR5eFpRVUZRTEVOQlFXOUNZaXhSUVVGd1FpeEZRVUU0UWxjc1UwRkJPVUk3UVVGRFJEdEJRVU5HTEU5QlprUTdRVUZPU2p0QlFYVkNSQ0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0J5WlhOdmJIWmxSWFpsYm5STWFYTjBaVzVsY2lCbWNtOXRJRndpTGk5bGRtVnVkQzVxYzF3aU8xeHVhVzF3YjNKMElISmxjMjlzZG1WRGJHRnpjMHhwYzNRZ1puSnZiU0JjSWk0dlkyeGhjM011YW5OY0lqdGNibWx0Y0c5eWRDQnlaWE52YkhabFUzUjViR1ZNYVhOMElHWnliMjBnWENJdUwzTjBlV3hsTG1welhDSTdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJSEpsYzI5c2RtVlFjbTl3WlhKMGVTaGhkSFJ5VG1GdFpTd2djSEp2Y0dWeWRIbE9ZVzFsTENCcGMxTldSeWtnZTF4dUlDQnBaaUFvY0hKdmNHVnlkSGxPWVcxbExuTjFZbk4wY2lnd0xDQXlLU0E5UFQwZ1hDSnZibHdpS1NCN1hHNGdJQ0FnWTI5dWMzUWdaWFpsYm5SVWVYQmxJRDBnY0hKdmNHVnlkSGxPWVcxbExuTjFZbk4wY2lneUtUdGNiaUFnSUNCeVpYUjFjbTRnY21WemIyeDJaVVYyWlc1MFRHbHpkR1Z1WlhJb1pYWmxiblJVZVhCbEtUdGNiaUFnZlZ4dVhHNGdJSE4zYVhSamFDQW9ZWFIwY2s1aGJXVXBJSHRjYmlBZ0lDQmpZWE5sSUZ3aVkyeGhjM05jSWpwY2JpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxRMnhoYzNOTWFYTjBPMXh1SUNBZ0lHTmhjMlVnWENKemRIbHNaVndpT2x4dUlDQWdJQ0FnY21WMGRYSnVJSEpsYzI5c2RtVlRkSGxzWlV4cGMzUTdYRzRnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUhKbGRIVnliaUFvYUc5emRDd2dkR0Z5WjJWMExDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJV2x6VTFaSElDWW1YRzRnSUNBZ0lDQWdJQ0FnSVNoMFlYSm5aWFFnYVc1emRHRnVZMlZ2WmlCVFZrZEZiR1Z0Wlc1MEtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblI1VG1GdFpTQnBiaUIwWVhKblpYUmNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRGdHdjbTl3WlhKMGVVNWhiV1ZkSUNFOVBTQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBXM0J5YjNCbGNuUjVUbUZ0WlYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZG1Gc2RXVWdQVDA5SUdaaGJITmxJSHg4SUhaaGJIVmxJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2dkbUZzZFdVZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0IwWVhKblpYUXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtHRjBkSEpPWVcxbEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmhkSFJ5Vm1Gc2RXVWdQU0IyWVd4MVpTQTlQVDBnZEhKMVpTQS9JRndpWENJZ09pQlRkSEpwYm1jb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIUmhjbWRsZEM1elpYUkJkSFJ5YVdKMWRHVW9ZWFIwY2s1aGJXVXNJR0YwZEhKV1lXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwN1hHNGdJSDFjYm4xY2JpSmRmUT09Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/resolvers/property.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/resolvers/style.js":
/*!**************************************************************!*\
  !*** ./node_modules/hybrids/esm/template/resolvers/style.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return resolveStyle; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils.js */ \"./node_modules/hybrids/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\nvar styleMap = new WeakMap();\nfunction resolveStyle(host, target, value) {\n  if (value === null || _typeof(value) !== \"object\") {\n    throw TypeError(\"Style value must be an object in \".concat(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"stringifyElement\"])(target), \":\"), value);\n  }\n\n  var previousMap = styleMap.get(target) || new Map();\n  var nextMap = Object.keys(value).reduce(function (map, key) {\n    var dashKey = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"camelToDash\"])(key);\n    var styleValue = value[key];\n\n    if (!styleValue && styleValue !== 0) {\n      target.style.removeProperty(dashKey);\n    } else {\n      target.style.setProperty(dashKey, styleValue);\n    }\n\n    map.set(dashKey, styleValue);\n    previousMap.delete(dashKey);\n    return map;\n  }, new Map());\n  previousMap.forEach(function (styleValue, key) {\n    target.style[key] = \"\";\n  });\n  styleMap.set(target, nextMap);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvc3R5bGUuanMiXSwibmFtZXMiOlsiY2FtZWxUb0Rhc2giLCJzdHJpbmdpZnlFbGVtZW50Iiwic3R5bGVNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZVN0eWxlIiwiaG9zdCIsInRhcmdldCIsInZhbHVlIiwiVHlwZUVycm9yIiwicHJldmlvdXNNYXAiLCJnZXQiLCJNYXAiLCJuZXh0TWFwIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsIm1hcCIsImtleSIsImRhc2hLZXkiLCJzdHlsZVZhbHVlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5Iiwic2V0IiwiZGVsZXRlIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxXQUFULEVBQXNCQyxnQkFBdEIsUUFBOEMsZ0JBQTlDO0FBRUEsSUFBTUMsUUFBUSxHQUFHLElBQUlDLE9BQUosRUFBakI7QUFFQSxlQUFlLFNBQVNDLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxNQUE1QixFQUFvQ0MsS0FBcEMsRUFBMkM7QUFDeEQsTUFBSUEsS0FBSyxLQUFLLElBQVYsSUFBa0IsUUFBT0EsS0FBUCxNQUFpQixRQUF2QyxFQUFpRDtBQUMvQyxVQUFNQyxTQUFTLDRDQUN1QlAsZ0JBQWdCLENBQUNLLE1BQUQsQ0FEdkMsUUFFYkMsS0FGYSxDQUFmO0FBSUQ7O0FBRUQsTUFBTUUsV0FBVyxHQUFHUCxRQUFRLENBQUNRLEdBQVQsQ0FBYUosTUFBYixLQUF3QixJQUFJSyxHQUFKLEVBQTVDO0FBRUEsTUFBTUMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWVAsS0FBWixFQUFtQlEsTUFBbkIsQ0FBMEIsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDdEQsUUFBTUMsT0FBTyxHQUFHbEIsV0FBVyxDQUFDaUIsR0FBRCxDQUEzQjtBQUNBLFFBQU1FLFVBQVUsR0FBR1osS0FBSyxDQUFDVSxHQUFELENBQXhCOztBQUVBLFFBQUksQ0FBQ0UsVUFBRCxJQUFlQSxVQUFVLEtBQUssQ0FBbEMsRUFBcUM7QUFDbkNiLE1BQUFBLE1BQU0sQ0FBQ2MsS0FBUCxDQUFhQyxjQUFiLENBQTRCSCxPQUE1QjtBQUNELEtBRkQsTUFFTztBQUNMWixNQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYUUsV0FBYixDQUF5QkosT0FBekIsRUFBa0NDLFVBQWxDO0FBQ0Q7O0FBRURILElBQUFBLEdBQUcsQ0FBQ08sR0FBSixDQUFRTCxPQUFSLEVBQWlCQyxVQUFqQjtBQUNBVixJQUFBQSxXQUFXLENBQUNlLE1BQVosQ0FBbUJOLE9BQW5CO0FBRUEsV0FBT0YsR0FBUDtBQUNELEdBZGUsRUFjYixJQUFJTCxHQUFKLEVBZGEsQ0FBaEI7QUFnQkFGLEVBQUFBLFdBQVcsQ0FBQ2dCLE9BQVosQ0FBb0IsVUFBQ04sVUFBRCxFQUFhRixHQUFiLEVBQXFCO0FBQ3ZDWCxJQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYUgsR0FBYixJQUFvQixFQUFwQjtBQUNELEdBRkQ7QUFJQWYsRUFBQUEsUUFBUSxDQUFDcUIsR0FBVCxDQUFhakIsTUFBYixFQUFxQk0sT0FBckI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbWVsVG9EYXNoLCBzdHJpbmdpZnlFbGVtZW50IH0gZnJvbSBcIi4uLy4uL3V0aWxzLmpzXCI7XG5cbmNvbnN0IHN0eWxlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVN0eWxlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgIHRocm93IFR5cGVFcnJvcihcbiAgICAgIGBTdHlsZSB2YWx1ZSBtdXN0IGJlIGFuIG9iamVjdCBpbiAke3N0cmluZ2lmeUVsZW1lbnQodGFyZ2V0KX06YCxcbiAgICAgIHZhbHVlLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBwcmV2aW91c01hcCA9IHN0eWxlTWFwLmdldCh0YXJnZXQpIHx8IG5ldyBNYXAoKTtcblxuICBjb25zdCBuZXh0TWFwID0gT2JqZWN0LmtleXModmFsdWUpLnJlZHVjZSgobWFwLCBrZXkpID0+IHtcbiAgICBjb25zdCBkYXNoS2V5ID0gY2FtZWxUb0Rhc2goa2V5KTtcbiAgICBjb25zdCBzdHlsZVZhbHVlID0gdmFsdWVba2V5XTtcblxuICAgIGlmICghc3R5bGVWYWx1ZSAmJiBzdHlsZVZhbHVlICE9PSAwKSB7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoZGFzaEtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShkYXNoS2V5LCBzdHlsZVZhbHVlKTtcbiAgICB9XG5cbiAgICBtYXAuc2V0KGRhc2hLZXksIHN0eWxlVmFsdWUpO1xuICAgIHByZXZpb3VzTWFwLmRlbGV0ZShkYXNoS2V5KTtcblxuICAgIHJldHVybiBtYXA7XG4gIH0sIG5ldyBNYXAoKSk7XG5cbiAgcHJldmlvdXNNYXAuZm9yRWFjaCgoc3R5bGVWYWx1ZSwga2V5KSA9PiB7XG4gICAgdGFyZ2V0LnN0eWxlW2tleV0gPSBcIlwiO1xuICB9KTtcblxuICBzdHlsZU1hcC5zZXQodGFyZ2V0LCBuZXh0TWFwKTtcbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL3N0eWxlLmpzP2Y3ZGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQXVCLDJCQUEyQiwyRUFBMkUsa0NBQWtDLG1CQUFtQixHQUFHLEVBQUUsT0FBTyxrQ0FBa0MsOEhBQThILEdBQUcsRUFBRSxxQkFBcUI7O0FBRXpUO0FBQy9EO0FBQ2U7QUFDZjtBQUNBLCtEQUErRCxrRUFBZ0I7QUFDL0U7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQiw2REFBVztBQUM3Qjs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDJDQUEyQyxjQUFjIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL3Jlc29sdmVycy9zdHlsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgY2FtZWxUb0Rhc2gsIHN0cmluZ2lmeUVsZW1lbnQgfSBmcm9tIFwiLi4vLi4vdXRpbHMuanNcIjtcbnZhciBzdHlsZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlU3R5bGUoaG9zdCwgdGFyZ2V0LCB2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgX3R5cGVvZih2YWx1ZSkgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJTdHlsZSB2YWx1ZSBtdXN0IGJlIGFuIG9iamVjdCBpbiBcIi5jb25jYXQoc3RyaW5naWZ5RWxlbWVudCh0YXJnZXQpLCBcIjpcIiksIHZhbHVlKTtcbiAgfVxuXG4gIHZhciBwcmV2aW91c01hcCA9IHN0eWxlTWFwLmdldCh0YXJnZXQpIHx8IG5ldyBNYXAoKTtcbiAgdmFyIG5leHRNYXAgPSBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChtYXAsIGtleSkge1xuICAgIHZhciBkYXNoS2V5ID0gY2FtZWxUb0Rhc2goa2V5KTtcbiAgICB2YXIgc3R5bGVWYWx1ZSA9IHZhbHVlW2tleV07XG5cbiAgICBpZiAoIXN0eWxlVmFsdWUgJiYgc3R5bGVWYWx1ZSAhPT0gMCkge1xuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KGRhc2hLZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkoZGFzaEtleSwgc3R5bGVWYWx1ZSk7XG4gICAgfVxuXG4gICAgbWFwLnNldChkYXNoS2V5LCBzdHlsZVZhbHVlKTtcbiAgICBwcmV2aW91c01hcC5kZWxldGUoZGFzaEtleSk7XG4gICAgcmV0dXJuIG1hcDtcbiAgfSwgbmV3IE1hcCgpKTtcbiAgcHJldmlvdXNNYXAuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGVWYWx1ZSwga2V5KSB7XG4gICAgdGFyZ2V0LnN0eWxlW2tleV0gPSBcIlwiO1xuICB9KTtcbiAgc3R5bGVNYXAuc2V0KHRhcmdldCwgbmV4dE1hcCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5eVpYTnZiSFpsY25NdmMzUjViR1V1YW5NaVhTd2libUZ0WlhNaU9sc2lZMkZ0Wld4VWIwUmhjMmdpTENKemRISnBibWRwWm5sRmJHVnRaVzUwSWl3aWMzUjViR1ZOWVhBaUxDSlhaV0ZyVFdGd0lpd2ljbVZ6YjJ4MlpWTjBlV3hsSWl3aWFHOXpkQ0lzSW5SaGNtZGxkQ0lzSW5aaGJIVmxJaXdpVkhsd1pVVnljbTl5SWl3aWNISmxkbWx2ZFhOTllYQWlMQ0puWlhRaUxDSk5ZWEFpTENKdVpYaDBUV0Z3SWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW5KbFpIVmpaU0lzSW0xaGNDSXNJbXRsZVNJc0ltUmhjMmhMWlhraUxDSnpkSGxzWlZaaGJIVmxJaXdpYzNSNWJHVWlMQ0p5WlcxdmRtVlFjbTl3WlhKMGVTSXNJbk5sZEZCeWIzQmxjblI1SWl3aWMyVjBJaXdpWkdWc1pYUmxJaXdpWm05eVJXRmphQ0pkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4VFFVRlRRU3hYUVVGVUxFVkJRWE5DUXl4blFrRkJkRUlzVVVGQk9FTXNaMEpCUVRsRE8wRkJSVUVzU1VGQlRVTXNVVUZCVVN4SFFVRkhMRWxCUVVsRExFOUJRVW9zUlVGQmFrSTdRVUZGUVN4bFFVRmxMRk5CUVZORExGbEJRVlFzUTBGQmMwSkRMRWxCUVhSQ0xFVkJRVFJDUXl4TlFVRTFRaXhGUVVGdlEwTXNTMEZCY0VNc1JVRkJNa003UVVGRGVFUXNUVUZCU1VFc1MwRkJTeXhMUVVGTExFbEJRVllzU1VGQmEwSXNVVUZCVDBFc1MwRkJVQ3hOUVVGcFFpeFJRVUYyUXl4RlFVRnBSRHRCUVVNdlF5eFZRVUZOUXl4VFFVRlRMRFJEUVVOMVFsQXNaMEpCUVdkQ0xFTkJRVU5MTEUxQlFVUXNRMEZFZGtNc1VVRkZZa01zUzBGR1lTeERRVUZtTzBGQlNVUTdPMEZCUlVRc1RVRkJUVVVzVjBGQlZ5eEhRVUZIVUN4UlFVRlJMRU5CUVVOUkxFZEJRVlFzUTBGQllVb3NUVUZCWWl4TFFVRjNRaXhKUVVGSlN5eEhRVUZLTEVWQlFUVkRPMEZCUlVFc1RVRkJUVU1zVDBGQlR5eEhRVUZIUXl4TlFVRk5MRU5CUVVORExFbEJRVkFzUTBGQldWQXNTMEZCV2l4RlFVRnRRbEVzVFVGQmJrSXNRMEZCTUVJc1ZVRkJRME1zUjBGQlJDeEZRVUZOUXl4SFFVRk9MRVZCUVdNN1FVRkRkRVFzVVVGQlRVTXNUMEZCVHl4SFFVRkhiRUlzVjBGQlZ5eERRVUZEYVVJc1IwRkJSQ3hEUVVFelFqdEJRVU5CTEZGQlFVMUZMRlZCUVZVc1IwRkJSMW9zUzBGQlN5eERRVUZEVlN4SFFVRkVMRU5CUVhoQ096dEJRVVZCTEZGQlFVa3NRMEZCUTBVc1ZVRkJSQ3hKUVVGbFFTeFZRVUZWTEV0QlFVc3NRMEZCYkVNc1JVRkJjVU03UVVGRGJrTmlMRTFCUVVGQkxFMUJRVTBzUTBGQlEyTXNTMEZCVUN4RFFVRmhReXhqUVVGaUxFTkJRVFJDU0N4UFFVRTFRanRCUVVORUxFdEJSa1FzVFVGRlR6dEJRVU5NV2l4TlFVRkJRU3hOUVVGTkxFTkJRVU5qTEV0QlFWQXNRMEZCWVVVc1YwRkJZaXhEUVVGNVFrb3NUMEZCZWtJc1JVRkJhME5ETEZWQlFXeERPMEZCUTBRN08wRkJSVVJJTEVsQlFVRkJMRWRCUVVjc1EwRkJRMDhzUjBGQlNpeERRVUZSVEN4UFFVRlNMRVZCUVdsQ1F5eFZRVUZxUWp0QlFVTkJWaXhKUVVGQlFTeFhRVUZYTEVOQlFVTmxMRTFCUVZvc1EwRkJiVUpPTEU5QlFXNUNPMEZCUlVFc1YwRkJUMFlzUjBGQlVEdEJRVU5FTEVkQlpHVXNSVUZqWWl4SlFVRkpUQ3hIUVVGS0xFVkJaR0VzUTBGQmFFSTdRVUZuUWtGR0xFVkJRVUZCTEZkQlFWY3NRMEZCUTJkQ0xFOUJRVm9zUTBGQmIwSXNWVUZCUTA0c1ZVRkJSQ3hGUVVGaFJpeEhRVUZpTEVWQlFYRkNPMEZCUTNaRFdDeEpRVUZCUVN4TlFVRk5MRU5CUVVOakxFdEJRVkFzUTBGQllVZ3NSMEZCWWl4SlFVRnZRaXhGUVVGd1FqdEJRVU5FTEVkQlJrUTdRVUZKUVdZc1JVRkJRVUVzVVVGQlVTeERRVUZEY1VJc1IwRkJWQ3hEUVVGaGFrSXNUVUZCWWl4RlFVRnhRazBzVDBGQmNrSTdRVUZEUkNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lHTmhiV1ZzVkc5RVlYTm9MQ0J6ZEhKcGJtZHBabmxGYkdWdFpXNTBJSDBnWm5KdmJTQmNJaTR1THk0dUwzVjBhV3h6TG1welhDSTdYRzVjYm1OdmJuTjBJSE4wZVd4bFRXRndJRDBnYm1WM0lGZGxZV3ROWVhBb0tUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdjbVZ6YjJ4MlpWTjBlV3hsS0dodmMzUXNJSFJoY21kbGRDd2dkbUZzZFdVcElIdGNiaUFnYVdZZ0tIWmhiSFZsSUQwOVBTQnVkV3hzSUh4OElIUjVjR1Z2WmlCMllXeDFaU0FoUFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lIUm9jbTkzSUZSNWNHVkZjbkp2Y2loY2JpQWdJQ0FnSUdCVGRIbHNaU0IyWVd4MVpTQnRkWE4wSUdKbElHRnVJRzlpYW1WamRDQnBiaUFrZTNOMGNtbHVaMmxtZVVWc1pXMWxiblFvZEdGeVoyVjBLWDA2WUN4Y2JpQWdJQ0FnSUhaaGJIVmxMRnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQndjbVYyYVc5MWMwMWhjQ0E5SUhOMGVXeGxUV0Z3TG1kbGRDaDBZWEpuWlhRcElIeDhJRzVsZHlCTllYQW9LVHRjYmx4dUlDQmpiMjV6ZENCdVpYaDBUV0Z3SUQwZ1QySnFaV04wTG10bGVYTW9kbUZzZFdVcExuSmxaSFZqWlNnb2JXRndMQ0JyWlhrcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCa1lYTm9TMlY1SUQwZ1kyRnRaV3hVYjBSaGMyZ29hMlY1S1R0Y2JpQWdJQ0JqYjI1emRDQnpkSGxzWlZaaGJIVmxJRDBnZG1Gc2RXVmJhMlY1WFR0Y2JseHVJQ0FnSUdsbUlDZ2hjM1I1YkdWV1lXeDFaU0FtSmlCemRIbHNaVlpoYkhWbElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCMFlYSm5aWFF1YzNSNWJHVXVjbVZ0YjNabFVISnZjR1Z5ZEhrb1pHRnphRXRsZVNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJoY21kbGRDNXpkSGxzWlM1elpYUlFjbTl3WlhKMGVTaGtZWE5vUzJWNUxDQnpkSGxzWlZaaGJIVmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnRZWEF1YzJWMEtHUmhjMmhMWlhrc0lITjBlV3hsVm1Gc2RXVXBPMXh1SUNBZ0lIQnlaWFpwYjNWelRXRndMbVJsYkdWMFpTaGtZWE5vUzJWNUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdFlYQTdYRzRnSUgwc0lHNWxkeUJOWVhBb0tTazdYRzVjYmlBZ2NISmxkbWx2ZFhOTllYQXVabTl5UldGamFDZ29jM1I1YkdWV1lXeDFaU3dnYTJWNUtTQTlQaUI3WEc0Z0lDQWdkR0Z5WjJWMExuTjBlV3hsVzJ0bGVWMGdQU0JjSWx3aU8xeHVJQ0I5S1R0Y2JseHVJQ0J6ZEhsc1pVMWhjQzV6WlhRb2RHRnlaMlYwTENCdVpYaDBUV0Z3S1R0Y2JuMWNiaUpkZlE9PSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/resolvers/style.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/resolvers/value.js":
/*!**************************************************************!*\
  !*** ./node_modules/hybrids/esm/template/resolvers/value.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return resolveValue; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/hybrids/esm/template/utils.js\");\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ \"./node_modules/hybrids/esm/template/resolvers/array.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\nfunction resolveValue(host, target, value) {\n  var type = Array.isArray(value) ? \"array\" : _typeof(value);\n  var data = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dataMap\"].get(target, {});\n\n  if (data.type !== type) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"removeTemplate\"])(target);\n    if (type === \"array\") _array_js__WEBPACK_IMPORTED_MODULE_1__[\"arrayMap\"].delete(target);\n    data = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dataMap\"].set(target, {\n      type: type\n    });\n\n    if (target.textContent !== \"\") {\n      target.textContent = \"\";\n    }\n  }\n\n  switch (type) {\n    case \"function\":\n      value(host, target);\n      break;\n\n    case \"array\":\n      Object(_array_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(host, target, value, resolveValue);\n      break;\n\n    default:\n      target.textContent = type === \"number\" || value ? value : \"\";\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvdmFsdWUuanMiXSwibmFtZXMiOlsiZGF0YU1hcCIsInJlbW92ZVRlbXBsYXRlIiwicmVzb2x2ZUFycmF5IiwiYXJyYXlNYXAiLCJyZXNvbHZlVmFsdWUiLCJob3N0IiwidGFyZ2V0IiwidmFsdWUiLCJ0eXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiZGF0YSIsImdldCIsImRlbGV0ZSIsInNldCIsInRleHRDb250ZW50Il0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLE9BQVQsRUFBa0JDLGNBQWxCLFFBQXdDLGFBQXhDO0FBQ0EsT0FBT0MsWUFBUCxJQUF1QkMsUUFBdkIsUUFBdUMsWUFBdkM7QUFFQSxlQUFlLFNBQVNDLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxNQUE1QixFQUFvQ0MsS0FBcEMsRUFBMkM7QUFDeEQsTUFBTUMsSUFBSSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsS0FBZCxJQUF1QixPQUF2QixXQUF3Q0EsS0FBeEMsQ0FBYjtBQUNBLE1BQUlJLElBQUksR0FBR1gsT0FBTyxDQUFDWSxHQUFSLENBQVlOLE1BQVosRUFBb0IsRUFBcEIsQ0FBWDs7QUFFQSxNQUFJSyxJQUFJLENBQUNILElBQUwsS0FBY0EsSUFBbEIsRUFBd0I7QUFDdEJQLElBQUFBLGNBQWMsQ0FBQ0ssTUFBRCxDQUFkO0FBQ0EsUUFBSUUsSUFBSSxLQUFLLE9BQWIsRUFBc0JMLFFBQVEsQ0FBQ1UsTUFBVCxDQUFnQlAsTUFBaEI7QUFFdEJLLElBQUFBLElBQUksR0FBR1gsT0FBTyxDQUFDYyxHQUFSLENBQVlSLE1BQVosRUFBb0I7QUFBRUUsTUFBQUEsSUFBSSxFQUFKQTtBQUFGLEtBQXBCLENBQVA7O0FBRUEsUUFBSUYsTUFBTSxDQUFDUyxXQUFQLEtBQXVCLEVBQTNCLEVBQStCO0FBQzdCVCxNQUFBQSxNQUFNLENBQUNTLFdBQVAsR0FBcUIsRUFBckI7QUFDRDtBQUNGOztBQUVELFVBQVFQLElBQVI7QUFDRSxTQUFLLFVBQUw7QUFDRUQsTUFBQUEsS0FBSyxDQUFDRixJQUFELEVBQU9DLE1BQVAsQ0FBTDtBQUNBOztBQUNGLFNBQUssT0FBTDtBQUNFSixNQUFBQSxZQUFZLENBQUNHLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXNCSCxZQUF0QixDQUFaO0FBQ0E7O0FBQ0Y7QUFDRUUsTUFBQUEsTUFBTSxDQUFDUyxXQUFQLEdBQXFCUCxJQUFJLEtBQUssUUFBVCxJQUFxQkQsS0FBckIsR0FBNkJBLEtBQTdCLEdBQXFDLEVBQTFEO0FBUko7QUFVRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRhdGFNYXAsIHJlbW92ZVRlbXBsYXRlIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgcmVzb2x2ZUFycmF5LCB7IGFycmF5TWFwIH0gZnJvbSBcIi4vYXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgY29uc3QgdHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gXCJhcnJheVwiIDogdHlwZW9mIHZhbHVlO1xuICBsZXQgZGF0YSA9IGRhdGFNYXAuZ2V0KHRhcmdldCwge30pO1xuXG4gIGlmIChkYXRhLnR5cGUgIT09IHR5cGUpIHtcbiAgICByZW1vdmVUZW1wbGF0ZSh0YXJnZXQpO1xuICAgIGlmICh0eXBlID09PSBcImFycmF5XCIpIGFycmF5TWFwLmRlbGV0ZSh0YXJnZXQpO1xuXG4gICAgZGF0YSA9IGRhdGFNYXAuc2V0KHRhcmdldCwgeyB0eXBlIH0pO1xuXG4gICAgaWYgKHRhcmdldC50ZXh0Q29udGVudCAhPT0gXCJcIikge1xuICAgICAgdGFyZ2V0LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIHZhbHVlKGhvc3QsIHRhcmdldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgIHJlc29sdmVBcnJheShob3N0LCB0YXJnZXQsIHZhbHVlLCByZXNvbHZlVmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRhcmdldC50ZXh0Q29udGVudCA9IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdmFsdWUgPyB2YWx1ZSA6IFwiXCI7XG4gIH1cbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL3ZhbHVlLmpzPzUyY2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFBdUIsMkJBQTJCLDJFQUEyRSxrQ0FBa0MsbUJBQW1CLEdBQUcsRUFBRSxPQUFPLGtDQUFrQyw4SEFBOEgsR0FBRyxFQUFFLHFCQUFxQjs7QUFFbFU7QUFDRjtBQUNyQztBQUNmO0FBQ0EsYUFBYSxpREFBTyxlQUFlOztBQUVuQztBQUNBLElBQUksZ0VBQWM7QUFDbEIsMEJBQTBCLGtEQUFRO0FBQ2xDLFdBQVcsaURBQU87QUFDbEI7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSx5REFBWTtBQUNsQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxjQUFjIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL3Jlc29sdmVycy92YWx1ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgZGF0YU1hcCwgcmVtb3ZlVGVtcGxhdGUgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCByZXNvbHZlQXJyYXksIHsgYXJyYXlNYXAgfSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgdmFyIHR5cGUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IFwiYXJyYXlcIiA6IF90eXBlb2YodmFsdWUpO1xuICB2YXIgZGF0YSA9IGRhdGFNYXAuZ2V0KHRhcmdldCwge30pO1xuXG4gIGlmIChkYXRhLnR5cGUgIT09IHR5cGUpIHtcbiAgICByZW1vdmVUZW1wbGF0ZSh0YXJnZXQpO1xuICAgIGlmICh0eXBlID09PSBcImFycmF5XCIpIGFycmF5TWFwLmRlbGV0ZSh0YXJnZXQpO1xuICAgIGRhdGEgPSBkYXRhTWFwLnNldCh0YXJnZXQsIHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9KTtcblxuICAgIGlmICh0YXJnZXQudGV4dENvbnRlbnQgIT09IFwiXCIpIHtcbiAgICAgIHRhcmdldC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgfVxuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICB2YWx1ZShob3N0LCB0YXJnZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgIHJlc29sdmVBcnJheShob3N0LCB0YXJnZXQsIHZhbHVlLCByZXNvbHZlVmFsdWUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGFyZ2V0LnRleHRDb250ZW50ID0gdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB2YWx1ZSA/IHZhbHVlIDogXCJcIjtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OTBaVzF3YkdGMFpTOXlaWE52YkhabGNuTXZkbUZzZFdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpWkdGMFlVMWhjQ0lzSW5KbGJXOTJaVlJsYlhCc1lYUmxJaXdpY21WemIyeDJaVUZ5Y21GNUlpd2lZWEp5WVhsTllYQWlMQ0p5WlhOdmJIWmxWbUZzZFdVaUxDSm9iM04wSWl3aWRHRnlaMlYwSWl3aWRtRnNkV1VpTENKMGVYQmxJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpWkdGMFlTSXNJbWRsZENJc0ltUmxiR1YwWlNJc0luTmxkQ0lzSW5SbGVIUkRiMjUwWlc1MElsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRk5CUVZOQkxFOUJRVlFzUlVGQmEwSkRMR05CUVd4Q0xGRkJRWGRETEdGQlFYaERPMEZCUTBFc1QwRkJUME1zV1VGQlVDeEpRVUYxUWtNc1VVRkJka0lzVVVGQmRVTXNXVUZCZGtNN1FVRkZRU3hsUVVGbExGTkJRVk5ETEZsQlFWUXNRMEZCYzBKRExFbEJRWFJDTEVWQlFUUkNReXhOUVVFMVFpeEZRVUZ2UTBNc1MwRkJjRU1zUlVGQk1rTTdRVUZEZUVRc1RVRkJUVU1zU1VGQlNTeEhRVUZIUXl4TFFVRkxMRU5CUVVORExFOUJRVTRzUTBGQlkwZ3NTMEZCWkN4SlFVRjFRaXhQUVVGMlFpeFhRVUYzUTBFc1MwRkJlRU1zUTBGQllqdEJRVU5CTEUxQlFVbEpMRWxCUVVrc1IwRkJSMWdzVDBGQlR5eERRVUZEV1N4SFFVRlNMRU5CUVZsT0xFMUJRVm9zUlVGQmIwSXNSVUZCY0VJc1EwRkJXRHM3UVVGRlFTeE5RVUZKU3l4SlFVRkpMRU5CUVVOSUxFbEJRVXdzUzBGQlkwRXNTVUZCYkVJc1JVRkJkMEk3UVVGRGRFSlFMRWxCUVVGQkxHTkJRV01zUTBGQlEwc3NUVUZCUkN4RFFVRmtPMEZCUTBFc1VVRkJTVVVzU1VGQlNTeExRVUZMTEU5QlFXSXNSVUZCYzBKTUxGRkJRVkVzUTBGQlExVXNUVUZCVkN4RFFVRm5RbEFzVFVGQmFFSTdRVUZGZEVKTExFbEJRVUZCTEVsQlFVa3NSMEZCUjFnc1QwRkJUeXhEUVVGRFl5eEhRVUZTTEVOQlFWbFNMRTFCUVZvc1JVRkJiMEk3UVVGQlJVVXNUVUZCUVVFc1NVRkJTU3hGUVVGS1FUdEJRVUZHTEV0QlFYQkNMRU5CUVZBN08wRkJSVUVzVVVGQlNVWXNUVUZCVFN4RFFVRkRVeXhYUVVGUUxFdEJRWFZDTEVWQlFUTkNMRVZCUVN0Q08wRkJRemRDVkN4TlFVRkJRU3hOUVVGTkxFTkJRVU5UTEZkQlFWQXNSMEZCY1VJc1JVRkJja0k3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRlZCUVZGUUxFbEJRVkk3UVVGRFJTeFRRVUZMTEZWQlFVdzdRVUZEUlVRc1RVRkJRVUVzUzBGQlN5eERRVUZEUml4SlFVRkVMRVZCUVU5RExFMUJRVkFzUTBGQlREdEJRVU5CT3p0QlFVTkdMRk5CUVVzc1QwRkJURHRCUVVORlNpeE5RVUZCUVN4WlFVRlpMRU5CUVVOSExFbEJRVVFzUlVGQlQwTXNUVUZCVUN4RlFVRmxReXhMUVVGbUxFVkJRWE5DU0N4WlFVRjBRaXhEUVVGYU8wRkJRMEU3TzBGQlEwWTdRVUZEUlVVc1RVRkJRVUVzVFVGQlRTeERRVUZEVXl4WFFVRlFMRWRCUVhGQ1VDeEpRVUZKTEV0QlFVc3NVVUZCVkN4SlFVRnhRa1FzUzBGQmNrSXNSMEZCTmtKQkxFdEJRVGRDTEVkQlFYRkRMRVZCUVRGRU8wRkJVa283UVVGVlJDSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdJR1JoZEdGTllYQXNJSEpsYlc5MlpWUmxiWEJzWVhSbElIMGdabkp2YlNCY0lpNHVMM1YwYVd4ekxtcHpYQ0k3WEc1cGJYQnZjblFnY21WemIyeDJaVUZ5Y21GNUxDQjdJR0Z5Y21GNVRXRndJSDBnWm5KdmJTQmNJaTR2WVhKeVlYa3Vhbk5jSWp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z2NtVnpiMngyWlZaaGJIVmxLR2h2YzNRc0lIUmhjbWRsZEN3Z2RtRnNkV1VwSUh0Y2JpQWdZMjl1YzNRZ2RIbHdaU0E5SUVGeWNtRjVMbWx6UVhKeVlYa29kbUZzZFdVcElEOGdYQ0poY25KaGVWd2lJRG9nZEhsd1pXOW1JSFpoYkhWbE8xeHVJQ0JzWlhRZ1pHRjBZU0E5SUdSaGRHRk5ZWEF1WjJWMEtIUmhjbWRsZEN3Z2UzMHBPMXh1WEc0Z0lHbG1JQ2hrWVhSaExuUjVjR1VnSVQwOUlIUjVjR1VwSUh0Y2JpQWdJQ0J5WlcxdmRtVlVaVzF3YkdGMFpTaDBZWEpuWlhRcE8xeHVJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQmNJbUZ5Y21GNVhDSXBJR0Z5Y21GNVRXRndMbVJsYkdWMFpTaDBZWEpuWlhRcE8xeHVYRzRnSUNBZ1pHRjBZU0E5SUdSaGRHRk5ZWEF1YzJWMEtIUmhjbWRsZEN3Z2V5QjBlWEJsSUgwcE8xeHVYRzRnSUNBZ2FXWWdLSFJoY21kbGRDNTBaWGgwUTI5dWRHVnVkQ0FoUFQwZ1hDSmNJaWtnZTF4dUlDQWdJQ0FnZEdGeVoyVjBMblJsZUhSRGIyNTBaVzUwSUQwZ1hDSmNJanRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J6ZDJsMFkyZ2dLSFI1Y0dVcElIdGNiaUFnSUNCallYTmxJRndpWm5WdVkzUnBiMjVjSWpwY2JpQWdJQ0FnSUhaaGJIVmxLR2h2YzNRc0lIUmhjbWRsZENrN1hHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUZ3aVlYSnlZWGxjSWpwY2JpQWdJQ0FnSUhKbGMyOXNkbVZCY25KaGVTaG9iM04wTENCMFlYSm5aWFFzSUhaaGJIVmxMQ0J5WlhOdmJIWmxWbUZzZFdVcE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lIUmhjbWRsZEM1MFpYaDBRMjl1ZEdWdWRDQTlJSFI1Y0dVZ1BUMDlJRndpYm5WdFltVnlYQ0lnZkh3Z2RtRnNkV1VnUHlCMllXeDFaU0E2SUZ3aVhDSTdYRzRnSUgxY2JuMWNiaUpkZlE9PSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/resolvers/value.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/template/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/hybrids/esm/template/utils.js ***!
  \****************************************************/
/*! exports provided: dataMap, getTemplateEnd, removeTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dataMap\", function() { return dataMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTemplateEnd\", function() { return getTemplateEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeTemplate\", function() { return removeTemplate; });\nvar map = new WeakMap();\nvar dataMap = {\n  get: function get(key, defaultValue) {\n    var value = map.get(key);\n    if (value) return value;\n\n    if (defaultValue) {\n      map.set(key, defaultValue);\n    }\n\n    return defaultValue;\n  },\n  set: function set(key, value) {\n    map.set(key, value);\n    return value;\n  }\n};\nfunction getTemplateEnd(node) {\n  var data; // eslint-disable-next-line no-cond-assign\n\n  while (node && (data = dataMap.get(node)) && data.endNode) {\n    node = data.endNode;\n  }\n\n  return node;\n}\nfunction removeTemplate(target) {\n  if (target.nodeType !== Node.TEXT_NODE) {\n    var child = target.childNodes[0];\n\n    while (child) {\n      target.removeChild(child);\n      child = target.childNodes[0];\n    }\n  } else {\n    var data = dataMap.get(target);\n\n    if (data.startNode) {\n      var endNode = getTemplateEnd(data.endNode);\n      var node = data.startNode;\n      var lastNextSibling = endNode.nextSibling;\n\n      while (node) {\n        var nextSibling = node.nextSibling;\n        node.parentNode.removeChild(node);\n        node = nextSibling !== lastNextSibling && nextSibling;\n      }\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS91dGlscy5qcyJdLCJuYW1lcyI6WyJtYXAiLCJXZWFrTWFwIiwiZGF0YU1hcCIsImdldCIsImtleSIsImRlZmF1bHRWYWx1ZSIsInZhbHVlIiwic2V0IiwiZ2V0VGVtcGxhdGVFbmQiLCJub2RlIiwiZGF0YSIsImVuZE5vZGUiLCJyZW1vdmVUZW1wbGF0ZSIsInRhcmdldCIsIm5vZGVUeXBlIiwiTm9kZSIsIlRFWFRfTk9ERSIsImNoaWxkIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwic3RhcnROb2RlIiwibGFzdE5leHRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxHQUFHLEdBQUcsSUFBSUMsT0FBSixFQUFaO0FBQ0EsT0FBTyxJQUFNQyxPQUFPLEdBQUc7QUFDckJDLEVBQUFBLEdBRHFCLGVBQ2pCQyxHQURpQixFQUNaQyxZQURZLEVBQ0U7QUFDckIsUUFBTUMsS0FBSyxHQUFHTixHQUFHLENBQUNHLEdBQUosQ0FBUUMsR0FBUixDQUFkO0FBQ0EsUUFBSUUsS0FBSixFQUFXLE9BQU9BLEtBQVA7O0FBRVgsUUFBSUQsWUFBSixFQUFrQjtBQUNoQkwsTUFBQUEsR0FBRyxDQUFDTyxHQUFKLENBQVFILEdBQVIsRUFBYUMsWUFBYjtBQUNEOztBQUVELFdBQU9BLFlBQVA7QUFDRCxHQVZvQjtBQVdyQkUsRUFBQUEsR0FYcUIsZUFXakJILEdBWGlCLEVBV1pFLEtBWFksRUFXTDtBQUNkTixJQUFBQSxHQUFHLENBQUNPLEdBQUosQ0FBUUgsR0FBUixFQUFhRSxLQUFiO0FBQ0EsV0FBT0EsS0FBUDtBQUNEO0FBZG9CLENBQWhCO0FBaUJQLE9BQU8sU0FBU0UsY0FBVCxDQUF3QkMsSUFBeEIsRUFBOEI7QUFDbkMsTUFBSUMsSUFBSixDQURtQyxDQUVuQzs7QUFDQSxTQUFPRCxJQUFJLEtBQUtDLElBQUksR0FBR1IsT0FBTyxDQUFDQyxHQUFSLENBQVlNLElBQVosQ0FBWixDQUFKLElBQXNDQyxJQUFJLENBQUNDLE9BQWxELEVBQTJEO0FBQ3pERixJQUFBQSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsT0FBWjtBQUNEOztBQUVELFNBQU9GLElBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0csY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0M7QUFDckMsTUFBSUEsTUFBTSxDQUFDQyxRQUFQLEtBQW9CQyxJQUFJLENBQUNDLFNBQTdCLEVBQXdDO0FBQ3RDLFFBQUlDLEtBQUssR0FBR0osTUFBTSxDQUFDSyxVQUFQLENBQWtCLENBQWxCLENBQVo7O0FBQ0EsV0FBT0QsS0FBUCxFQUFjO0FBQ1pKLE1BQUFBLE1BQU0sQ0FBQ00sV0FBUCxDQUFtQkYsS0FBbkI7QUFDQUEsTUFBQUEsS0FBSyxHQUFHSixNQUFNLENBQUNLLFVBQVAsQ0FBa0IsQ0FBbEIsQ0FBUjtBQUNEO0FBQ0YsR0FORCxNQU1PO0FBQ0wsUUFBTVIsSUFBSSxHQUFHUixPQUFPLENBQUNDLEdBQVIsQ0FBWVUsTUFBWixDQUFiOztBQUVBLFFBQUlILElBQUksQ0FBQ1UsU0FBVCxFQUFvQjtBQUNsQixVQUFNVCxPQUFPLEdBQUdILGNBQWMsQ0FBQ0UsSUFBSSxDQUFDQyxPQUFOLENBQTlCO0FBRUEsVUFBSUYsSUFBSSxHQUFHQyxJQUFJLENBQUNVLFNBQWhCO0FBQ0EsVUFBTUMsZUFBZSxHQUFHVixPQUFPLENBQUNXLFdBQWhDOztBQUVBLGFBQU9iLElBQVAsRUFBYTtBQUNYLFlBQU1hLFdBQVcsR0FBR2IsSUFBSSxDQUFDYSxXQUF6QjtBQUNBYixRQUFBQSxJQUFJLENBQUNjLFVBQUwsQ0FBZ0JKLFdBQWhCLENBQTRCVixJQUE1QjtBQUNBQSxRQUFBQSxJQUFJLEdBQUdhLFdBQVcsS0FBS0QsZUFBaEIsSUFBbUNDLFdBQTFDO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGNvbnN0IGRhdGFNYXAgPSB7XG4gIGdldChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gbWFwLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgbWFwLnNldChrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfSxcbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW1wbGF0ZUVuZChub2RlKSB7XG4gIGxldCBkYXRhO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgd2hpbGUgKG5vZGUgJiYgKGRhdGEgPSBkYXRhTWFwLmdldChub2RlKSkgJiYgZGF0YS5lbmROb2RlKSB7XG4gICAgbm9kZSA9IGRhdGEuZW5kTm9kZTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVGVtcGxhdGUodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgbGV0IGNoaWxkID0gdGFyZ2V0LmNoaWxkTm9kZXNbMF07XG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQgPSB0YXJnZXQuY2hpbGROb2Rlc1swXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFNYXAuZ2V0KHRhcmdldCk7XG5cbiAgICBpZiAoZGF0YS5zdGFydE5vZGUpIHtcbiAgICAgIGNvbnN0IGVuZE5vZGUgPSBnZXRUZW1wbGF0ZUVuZChkYXRhLmVuZE5vZGUpO1xuXG4gICAgICBsZXQgbm9kZSA9IGRhdGEuc3RhcnROb2RlO1xuICAgICAgY29uc3QgbGFzdE5leHRTaWJsaW5nID0gZW5kTm9kZS5uZXh0U2libGluZztcblxuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgY29uc3QgbmV4dFNpYmxpbmcgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgIG5vZGUgPSBuZXh0U2libGluZyAhPT0gbGFzdE5leHRTaWJsaW5nICYmIG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvdXRpbHMuanM/OTNhNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVc7O0FBRVg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxjQUFjIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL3V0aWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgdmFyIGRhdGFNYXAgPSB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbWFwLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgbWFwLnNldChrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRlbXBsYXRlRW5kKG5vZGUpIHtcbiAgdmFyIGRhdGE7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuXG4gIHdoaWxlIChub2RlICYmIChkYXRhID0gZGF0YU1hcC5nZXQobm9kZSkpICYmIGRhdGEuZW5kTm9kZSkge1xuICAgIG5vZGUgPSBkYXRhLmVuZE5vZGU7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUZW1wbGF0ZSh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldC5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHtcbiAgICB2YXIgY2hpbGQgPSB0YXJnZXQuY2hpbGROb2Rlc1swXTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgdGFyZ2V0LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gdGFyZ2V0LmNoaWxkTm9kZXNbMF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkYXRhID0gZGF0YU1hcC5nZXQodGFyZ2V0KTtcblxuICAgIGlmIChkYXRhLnN0YXJ0Tm9kZSkge1xuICAgICAgdmFyIGVuZE5vZGUgPSBnZXRUZW1wbGF0ZUVuZChkYXRhLmVuZE5vZGUpO1xuICAgICAgdmFyIG5vZGUgPSBkYXRhLnN0YXJ0Tm9kZTtcbiAgICAgIHZhciBsYXN0TmV4dFNpYmxpbmcgPSBlbmROb2RlLm5leHRTaWJsaW5nO1xuXG4gICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgIG5vZGUgPSBuZXh0U2libGluZyAhPT0gbGFzdE5leHRTaWJsaW5nICYmIG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5MWRHbHNjeTVxY3lKZExDSnVZVzFsY3lJNld5SnRZWEFpTENKWFpXRnJUV0Z3SWl3aVpHRjBZVTFoY0NJc0ltZGxkQ0lzSW10bGVTSXNJbVJsWm1GMWJIUldZV3gxWlNJc0luWmhiSFZsSWl3aWMyVjBJaXdpWjJWMFZHVnRjR3hoZEdWRmJtUWlMQ0p1YjJSbElpd2laR0YwWVNJc0ltVnVaRTV2WkdVaUxDSnlaVzF2ZG1WVVpXMXdiR0YwWlNJc0luUmhjbWRsZENJc0ltNXZaR1ZVZVhCbElpd2lUbTlrWlNJc0lsUkZXRlJmVGs5RVJTSXNJbU5vYVd4a0lpd2lZMmhwYkdST2IyUmxjeUlzSW5KbGJXOTJaVU5vYVd4a0lpd2ljM1JoY25ST2IyUmxJaXdpYkdGemRFNWxlSFJUYVdKc2FXNW5JaXdpYm1WNGRGTnBZbXhwYm1jaUxDSndZWEpsYm5ST2IyUmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGTlFTeEhRVUZITEVkQlFVY3NTVUZCU1VNc1QwRkJTaXhGUVVGYU8wRkJRMEVzVDBGQlR5eEpRVUZOUXl4UFFVRlBMRWRCUVVjN1FVRkRja0pETEVWQlFVRkJMRWRCUkhGQ0xHVkJRMnBDUXl4SFFVUnBRaXhGUVVOYVF5eFpRVVJaTEVWQlEwVTdRVUZEY2tJc1VVRkJUVU1zUzBGQlN5eEhRVUZIVGl4SFFVRkhMRU5CUVVOSExFZEJRVW9zUTBGQlVVTXNSMEZCVWl4RFFVRmtPMEZCUTBFc1VVRkJTVVVzUzBGQlNpeEZRVUZYTEU5QlFVOUJMRXRCUVZBN08wRkJSVmdzVVVGQlNVUXNXVUZCU2l4RlFVRnJRanRCUVVOb1Frd3NUVUZCUVVFc1IwRkJSeXhEUVVGRFR5eEhRVUZLTEVOQlFWRklMRWRCUVZJc1JVRkJZVU1zV1VGQllqdEJRVU5FT3p0QlFVVkVMRmRCUVU5QkxGbEJRVkE3UVVGRFJDeEhRVlp2UWp0QlFWZHlRa1VzUlVGQlFVRXNSMEZZY1VJc1pVRlhha0pJTEVkQldHbENMRVZCVjFwRkxFdEJXRmtzUlVGWFREdEJRVU5rVGl4SlFVRkJRU3hIUVVGSExFTkJRVU5QTEVkQlFVb3NRMEZCVVVnc1IwRkJVaXhGUVVGaFJTeExRVUZpTzBGQlEwRXNWMEZCVDBFc1MwRkJVRHRCUVVORU8wRkJaRzlDTEVOQlFXaENPMEZCYVVKUUxFOUJRVThzVTBGQlUwVXNZMEZCVkN4RFFVRjNRa01zU1VGQmVFSXNSVUZCT0VJN1FVRkRia01zVFVGQlNVTXNTVUZCU2l4RFFVUnRReXhEUVVWdVF6czdRVUZEUVN4VFFVRlBSQ3hKUVVGSkxFdEJRVXRETEVsQlFVa3NSMEZCUjFJc1QwRkJUeXhEUVVGRFF5eEhRVUZTTEVOQlFWbE5MRWxCUVZvc1EwRkJXaXhEUVVGS0xFbEJRWE5EUXl4SlFVRkpMRU5CUVVORExFOUJRV3hFTEVWQlFUSkVPMEZCUTNwRVJpeEpRVUZCUVN4SlFVRkpMRWRCUVVkRExFbEJRVWtzUTBGQlEwTXNUMEZCV2p0QlFVTkVPenRCUVVWRUxGTkJRVTlHTEVsQlFWQTdRVUZEUkR0QlFVVkVMRTlCUVU4c1UwRkJVMGNzWTBGQlZDeERRVUYzUWtNc1RVRkJlRUlzUlVGQlowTTdRVUZEY2tNc1RVRkJTVUVzVFVGQlRTeERRVUZEUXl4UlFVRlFMRXRCUVc5Q1F5eEpRVUZKTEVOQlFVTkRMRk5CUVRkQ0xFVkJRWGRETzBGQlEzUkRMRkZCUVVsRExFdEJRVXNzUjBGQlIwb3NUVUZCVFN4RFFVRkRTeXhWUVVGUUxFTkJRV3RDTEVOQlFXeENMRU5CUVZvN08wRkJRMEVzVjBGQlQwUXNTMEZCVUN4RlFVRmpPMEZCUTFwS0xFMUJRVUZCTEUxQlFVMHNRMEZCUTAwc1YwRkJVQ3hEUVVGdFFrWXNTMEZCYmtJN1FVRkRRVUVzVFVGQlFVRXNTMEZCU3l4SFFVRkhTaXhOUVVGTkxFTkJRVU5MTEZWQlFWQXNRMEZCYTBJc1EwRkJiRUlzUTBGQlVqdEJRVU5FTzBGQlEwWXNSMEZPUkN4TlFVMVBPMEZCUTB3c1VVRkJUVklzU1VGQlNTeEhRVUZIVWl4UFFVRlBMRU5CUVVORExFZEJRVklzUTBGQldWVXNUVUZCV2l4RFFVRmlPenRCUVVWQkxGRkJRVWxJTEVsQlFVa3NRMEZCUTFVc1UwRkJWQ3hGUVVGdlFqdEJRVU5zUWl4VlFVRk5WQ3hQUVVGUExFZEJRVWRJTEdOQlFXTXNRMEZCUTBVc1NVRkJTU3hEUVVGRFF5eFBRVUZPTEVOQlFUbENPMEZCUlVFc1ZVRkJTVVlzU1VGQlNTeEhRVUZIUXl4SlFVRkpMRU5CUVVOVkxGTkJRV2hDTzBGQlEwRXNWVUZCVFVNc1pVRkJaU3hIUVVGSFZpeFBRVUZQTEVOQlFVTlhMRmRCUVdoRE96dEJRVVZCTEdGQlFVOWlMRWxCUVZBc1JVRkJZVHRCUVVOWUxGbEJRVTFoTEZkQlFWY3NSMEZCUjJJc1NVRkJTU3hEUVVGRFlTeFhRVUY2UWp0QlFVTkJZaXhSUVVGQlFTeEpRVUZKTEVOQlFVTmpMRlZCUVV3c1EwRkJaMEpLTEZkQlFXaENMRU5CUVRSQ1ZpeEpRVUUxUWp0QlFVTkJRU3hSUVVGQlFTeEpRVUZKTEVkQlFVZGhMRmRCUVZjc1MwRkJTMFFzWlVGQmFFSXNTVUZCYlVORExGZEJRVEZETzBGQlEwUTdRVUZEUmp0QlFVTkdPMEZCUTBZaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCdFlYQWdQU0J1WlhjZ1YyVmhhMDFoY0NncE8xeHVaWGh3YjNKMElHTnZibk4wSUdSaGRHRk5ZWEFnUFNCN1hHNGdJR2RsZENoclpYa3NJR1JsWm1GMWJIUldZV3gxWlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFpoYkhWbElEMGdiV0Z3TG1kbGRDaHJaWGtwTzF4dUlDQWdJR2xtSUNoMllXeDFaU2tnY21WMGRYSnVJSFpoYkhWbE8xeHVYRzRnSUNBZ2FXWWdLR1JsWm1GMWJIUldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2JXRndMbk5sZENoclpYa3NJR1JsWm1GMWJIUldZV3gxWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR1JsWm1GMWJIUldZV3gxWlR0Y2JpQWdmU3hjYmlBZ2MyVjBLR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0J0WVhBdWMyVjBLR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JpQWdmU3hjYm4wN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJVWlcxd2JHRjBaVVZ1WkNodWIyUmxLU0I3WEc0Z0lHeGxkQ0JrWVhSaE8xeHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dFkyOXVaQzFoYzNOcFoyNWNiaUFnZDJocGJHVWdLRzV2WkdVZ0ppWWdLR1JoZEdFZ1BTQmtZWFJoVFdGd0xtZGxkQ2h1YjJSbEtTa2dKaVlnWkdGMFlTNWxibVJPYjJSbEtTQjdYRzRnSUNBZ2JtOWtaU0E5SUdSaGRHRXVaVzVrVG05a1pUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnViMlJsTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjbVZ0YjNabFZHVnRjR3hoZEdVb2RHRnlaMlYwS1NCN1hHNGdJR2xtSUNoMFlYSm5aWFF1Ym05a1pWUjVjR1VnSVQwOUlFNXZaR1V1VkVWWVZGOU9UMFJGS1NCN1hHNGdJQ0FnYkdWMElHTm9hV3hrSUQwZ2RHRnlaMlYwTG1Ob2FXeGtUbTlrWlhOYk1GMDdYRzRnSUNBZ2QyaHBiR1VnS0dOb2FXeGtLU0I3WEc0Z0lDQWdJQ0IwWVhKblpYUXVjbVZ0YjNabFEyaHBiR1FvWTJocGJHUXBPMXh1SUNBZ0lDQWdZMmhwYkdRZ1BTQjBZWEpuWlhRdVkyaHBiR1JPYjJSbGMxc3dYVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUdSaGRHRk5ZWEF1WjJWMEtIUmhjbWRsZENrN1hHNWNiaUFnSUNCcFppQW9aR0YwWVM1emRHRnlkRTV2WkdVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdWdVpFNXZaR1VnUFNCblpYUlVaVzF3YkdGMFpVVnVaQ2hrWVhSaExtVnVaRTV2WkdVcE8xeHVYRzRnSUNBZ0lDQnNaWFFnYm05a1pTQTlJR1JoZEdFdWMzUmhjblJPYjJSbE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYkdGemRFNWxlSFJUYVdKc2FXNW5JRDBnWlc1a1RtOWtaUzV1WlhoMFUybGliR2x1Wnp0Y2JseHVJQ0FnSUNBZ2QyaHBiR1VnS0c1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibVY0ZEZOcFlteHBibWNnUFNCdWIyUmxMbTVsZUhSVGFXSnNhVzVuTzF4dUlDQWdJQ0FnSUNCdWIyUmxMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUc1dlpHVWdQU0J1WlhoMFUybGliR2x1WnlBaFBUMGdiR0Z6ZEU1bGVIUlRhV0pzYVc1bklDWW1JRzVsZUhSVGFXSnNhVzVuTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1SWwxOSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/template/utils.js\n");

/***/ }),

/***/ "./node_modules/hybrids/esm/utils.js":
/*!*******************************************!*\
  !*** ./node_modules/hybrids/esm/utils.js ***!
  \*******************************************/
/*! exports provided: camelToDash, pascalToDash, dispatch, shadyCSS, stringifyElement, IS_IE, deferred, storePointer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"camelToDash\", function() { return camelToDash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pascalToDash\", function() { return pascalToDash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dispatch\", function() { return dispatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shadyCSS\", function() { return shadyCSS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stringifyElement\", function() { return stringifyElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IS_IE\", function() { return IS_IE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deferred\", function() { return deferred; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"storePointer\", function() { return storePointer; });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar camelToDashMap = new Map();\nfunction camelToDash(str) {\n  var result = camelToDashMap.get(str);\n\n  if (result === undefined) {\n    result = str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n    camelToDashMap.set(str, result);\n  }\n\n  return result;\n}\nfunction pascalToDash(str) {\n  return camelToDash(str.replace(/((?!([A-Z]{2}|^))[A-Z])/g, \"-$1\"));\n}\nfunction dispatch(host, eventType) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return host.dispatchEvent(new CustomEvent(eventType, _objectSpread({\n    bubbles: false\n  }, options)));\n}\nfunction shadyCSS(fn, fallback) {\n  var shady = window.ShadyCSS;\n  /* istanbul ignore next */\n\n  if (shady && !shady.nativeShadow) {\n    return fn(shady);\n  }\n\n  return fallback;\n}\nfunction stringifyElement(target) {\n  return \"<\".concat(String(target.tagName).toLowerCase(), \">\");\n}\nvar IS_IE = (\"ActiveXObject\" in window);\nvar deferred = Promise.resolve();\nvar storePointer = new WeakMap();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaE1hcCIsIk1hcCIsImNhbWVsVG9EYXNoIiwic3RyIiwicmVzdWx0IiwiZ2V0IiwidW5kZWZpbmVkIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwic2V0IiwicGFzY2FsVG9EYXNoIiwiZGlzcGF0Y2giLCJob3N0IiwiZXZlbnRUeXBlIiwib3B0aW9ucyIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJzaGFkeUNTUyIsImZuIiwiZmFsbGJhY2siLCJzaGFkeSIsIndpbmRvdyIsIlNoYWR5Q1NTIiwibmF0aXZlU2hhZG93Iiwic3RyaW5naWZ5RWxlbWVudCIsInRhcmdldCIsIlN0cmluZyIsInRhZ05hbWUiLCJJU19JRSIsImRlZmVycmVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzdG9yZVBvaW50ZXIiLCJXZWFrTWFwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxjQUFjLEdBQUcsSUFBSUMsR0FBSixFQUF2QjtBQUNBLE9BQU8sU0FBU0MsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEI7QUFDL0IsTUFBSUMsTUFBTSxHQUFHSixjQUFjLENBQUNLLEdBQWYsQ0FBbUJGLEdBQW5CLENBQWI7O0FBQ0EsTUFBSUMsTUFBTSxLQUFLRSxTQUFmLEVBQTBCO0FBQ3hCRixJQUFBQSxNQUFNLEdBQUdELEdBQUcsQ0FBQ0ksT0FBSixDQUFZLGlCQUFaLEVBQStCLE9BQS9CLEVBQXdDQyxXQUF4QyxFQUFUO0FBQ0FSLElBQUFBLGNBQWMsQ0FBQ1MsR0FBZixDQUFtQk4sR0FBbkIsRUFBd0JDLE1BQXhCO0FBQ0Q7O0FBQ0QsU0FBT0EsTUFBUDtBQUNEO0FBRUQsT0FBTyxTQUFTTSxZQUFULENBQXNCUCxHQUF0QixFQUEyQjtBQUNoQyxTQUFPRCxXQUFXLENBQUNDLEdBQUcsQ0FBQ0ksT0FBSixDQUFZLDBCQUFaLEVBQXdDLEtBQXhDLENBQUQsQ0FBbEI7QUFDRDtBQUVELE9BQU8sU0FBU0ksUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLFNBQXhCLEVBQWlEO0FBQUEsTUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQ3RELFNBQU9GLElBQUksQ0FBQ0csYUFBTCxDQUNMLElBQUlDLFdBQUosQ0FBZ0JILFNBQWhCO0FBQTZCSSxJQUFBQSxPQUFPLEVBQUU7QUFBdEMsS0FBZ0RILE9BQWhELEVBREssQ0FBUDtBQUdEO0FBRUQsT0FBTyxTQUFTSSxRQUFULENBQWtCQyxFQUFsQixFQUFzQkMsUUFBdEIsRUFBZ0M7QUFDckMsTUFBTUMsS0FBSyxHQUFHQyxNQUFNLENBQUNDLFFBQXJCO0FBRUE7O0FBQ0EsTUFBSUYsS0FBSyxJQUFJLENBQUNBLEtBQUssQ0FBQ0csWUFBcEIsRUFBa0M7QUFDaEMsV0FBT0wsRUFBRSxDQUFDRSxLQUFELENBQVQ7QUFDRDs7QUFFRCxTQUFPRCxRQUFQO0FBQ0Q7QUFFRCxPQUFPLFNBQVNLLGdCQUFULENBQTBCQyxNQUExQixFQUFrQztBQUN2QyxvQkFBV0MsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQVIsQ0FBTixDQUF1QnBCLFdBQXZCLEVBQVg7QUFDRDtBQUVELE9BQU8sSUFBTXFCLEtBQUssSUFBRyxtQkFBbUJQLE1BQXRCLENBQVg7QUFDUCxPQUFPLElBQU1RLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxPQUFSLEVBQWpCO0FBRVAsT0FBTyxJQUFNQyxZQUFZLEdBQUcsSUFBSUMsT0FBSixFQUFyQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNhbWVsVG9EYXNoTWFwID0gbmV3IE1hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsVG9EYXNoKHN0cikge1xuICBsZXQgcmVzdWx0ID0gY2FtZWxUb0Rhc2hNYXAuZ2V0KHN0cik7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlc3VsdCA9IHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgY2FtZWxUb0Rhc2hNYXAuc2V0KHN0ciwgcmVzdWx0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFzY2FsVG9EYXNoKHN0cikge1xuICByZXR1cm4gY2FtZWxUb0Rhc2goc3RyLnJlcGxhY2UoLygoPyEoW0EtWl17Mn18XikpW0EtWl0pL2csIFwiLSQxXCIpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoKGhvc3QsIGV2ZW50VHlwZSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBob3N0LmRpc3BhdGNoRXZlbnQoXG4gICAgbmV3IEN1c3RvbUV2ZW50KGV2ZW50VHlwZSwgeyBidWJibGVzOiBmYWxzZSwgLi4ub3B0aW9ucyB9KSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWR5Q1NTKGZuLCBmYWxsYmFjaykge1xuICBjb25zdCBzaGFkeSA9IHdpbmRvdy5TaGFkeUNTUztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoc2hhZHkgJiYgIXNoYWR5Lm5hdGl2ZVNoYWRvdykge1xuICAgIHJldHVybiBmbihzaGFkeSk7XG4gIH1cblxuICByZXR1cm4gZmFsbGJhY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlFbGVtZW50KHRhcmdldCkge1xuICByZXR1cm4gYDwke1N0cmluZyh0YXJnZXQudGFnTmFtZSkudG9Mb3dlckNhc2UoKX0+YDtcbn1cblxuZXhwb3J0IGNvbnN0IElTX0lFID0gXCJBY3RpdmVYT2JqZWN0XCIgaW4gd2luZG93O1xuZXhwb3J0IGNvbnN0IGRlZmVycmVkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbmV4cG9ydCBjb25zdCBzdG9yZVBvaW50ZXIgPSBuZXcgV2Vha01hcCgpO1xuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hybrids/esm/utils.js\n");

/***/ }),

/***/ 0:
/*!***********************************************************************************************!*\
  !*** multi ./assets/js/app.js ./assets/scss/extras/woocommerce.scss ./assets/scss/style.scss ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! D:\laragon\www\my-website.com\web\app\themes\ooteam\assets\js\app.js */"./assets/js/app.js");
__webpack_require__(/*! D:\laragon\www\my-website.com\web\app\themes\ooteam\assets\scss\extras\woocommerce.scss */"./assets/scss/extras/woocommerce.scss");
module.exports = __webpack_require__(/*! D:\laragon\www\my-website.com\web\app\themes\ooteam\assets\scss\style.scss */"./assets/scss/style.scss");


/***/ })

/******/ });